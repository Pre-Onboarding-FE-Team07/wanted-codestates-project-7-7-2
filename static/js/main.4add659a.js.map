{"version":3,"file":"static/js/main.4add659a.js","mappings":"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","sources":["../node_modules/@babel/runtime/regenerator/index.js","../node_modules/object-assign/index.js","../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/react-dom/index.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react/index.js","../node_modules/react/jsx-runtime.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/scheduler/cjs/scheduler.production.min.js","../node_modules/scheduler/index.js","../webpack/bootstrap","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../node_modules/tslib/tslib.es6.js","../node_modules/ts-invariant/src/invariant.ts","../node_modules/@apollo/src/utilities/globals/maybe.ts","../node_modules/@apollo/src/utilities/globals/global.ts","../node_modules/@apollo/src/utilities/globals/DEV.ts","../node_modules/ts-invariant/process/index.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/graphql/jsutils/devAssert.mjs","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/graphql/jsutils/inspect.mjs","../node_modules/graphql/jsutils/instanceOf.mjs","../node_modules/graphql/language/source.mjs","../node_modules/@apollo/src/utilities/globals/fix-graphql.ts","../node_modules/@apollo/src/utilities/globals/index.ts","../node_modules/@apollo/src/utilities/common/canUse.ts","../node_modules/@apollo/src/react/context/ApolloContext.ts","../node_modules/@apollo/src/react/context/ApolloProvider.tsx","../node_modules/@apollo/src/react/hooks/useReactiveVar.ts","../node_modules/zen-observable-ts/module.js","../node_modules/@apollo/src/utilities/common/objects.ts","../node_modules/@apollo/src/utilities/graphql/fragments.ts","../node_modules/@apollo/src/utilities/graphql/storeUtils.ts","../node_modules/@apollo/src/utilities/graphql/getFromAST.ts","../node_modules/@apollo/src/link/core/ApolloLink.ts","../node_modules/@apollo/src/link/utils/createOperation.ts","../node_modules/@apollo/src/link/utils/transformOperation.ts","../node_modules/@apollo/src/link/utils/validateOperation.ts","../node_modules/@apollo/src/link/core/execute.ts","../node_modules/@apollo/src/utilities/common/compact.ts","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/graphql/language/ast.mjs","../node_modules/graphql/language/kinds.mjs","../node_modules/graphql/language/visitor.mjs","../node_modules/@apollo/src/link/http/serializeFetchParameter.ts","../node_modules/@apollo/src/link/utils/throwServerError.ts","../node_modules/@apollo/src/link/http/parseAndCheckHttpResponse.ts","../node_modules/graphql/language/characterClasses.mjs","../node_modules/graphql/language/blockString.mjs","../node_modules/graphql/language/printString.mjs","../node_modules/graphql/language/printer.mjs","../node_modules/@apollo/src/link/http/selectHttpOptionsAndBody.ts","../node_modules/@apollo/src/link/utils/fromError.ts","../node_modules/@apollo/src/link/http/createHttpLink.ts","../node_modules/@apollo/src/link/http/checkFetcher.ts","../node_modules/@apollo/src/link/http/selectURI.ts","../node_modules/@apollo/src/link/http/createSignalIfSupported.ts","../node_modules/@apollo/src/link/http/rewriteURIForGET.ts","../node_modules/@apollo/src/link/http/HttpLink.ts","../node_modules/@wry/equality/src/equality.ts","../node_modules/@wry/trie/src/trie.ts","../node_modules/@apollo/src/utilities/graphql/directives.ts","../node_modules/@apollo/src/utilities/common/mergeDeep.ts","../node_modules/@apollo/src/cache/inmemory/helpers.ts","../node_modules/@apollo/src/cache/inmemory/object-canon.ts","../node_modules/@apollo/src/utilities/observables/asyncMap.ts","../node_modules/@apollo/src/utilities/common/errorHandling.ts","../node_modules/@apollo/src/utilities/common/filterInPlace.ts","../node_modules/@apollo/src/utilities/graphql/transform.ts","../node_modules/@apollo/src/utilities/common/makeUniqueId.ts","../node_modules/@apollo/src/utilities/observables/iteration.ts","../node_modules/@apollo/src/utilities/observables/subclassing.ts","../node_modules/@apollo/src/utilities/observables/Concast.ts","../node_modules/@apollo/src/utilities/common/arrays.ts","../node_modules/@apollo/src/errors/index.ts","../node_modules/@apollo/src/core/networkStatus.ts","../node_modules/@apollo/src/utilities/common/cloneDeep.ts","../node_modules/@apollo/src/core/ObservableQuery.ts","../node_modules/@wry/context/src/slot.ts","../node_modules/@wry/context/src/context.ts","../node_modules/optimism/src/cache.ts","../node_modules/optimism/src/context.ts","../node_modules/optimism/src/helpers.ts","../node_modules/optimism/src/entry.ts","../node_modules/optimism/src/dep.ts","../node_modules/optimism/src/index.ts","../node_modules/@apollo/src/cache/inmemory/reactiveVars.ts","../node_modules/@apollo/src/core/LocalState.ts","../node_modules/@apollo/src/core/QueryInfo.ts","../node_modules/@apollo/src/core/QueryManager.ts","../node_modules/@apollo/src/core/ApolloClient.ts","../node_modules/@apollo/src/version.ts","../node_modules/@apollo/src/cache/core/cache.ts","../node_modules/@apollo/src/cache/core/types/common.ts","../node_modules/@apollo/src/utilities/common/maybeDeepFreeze.ts","../node_modules/@apollo/src/cache/inmemory/entityStore.ts","../node_modules/@apollo/src/cache/inmemory/readFromStore.ts","../node_modules/@apollo/src/cache/inmemory/key-extractor.ts","../node_modules/@apollo/src/cache/inmemory/policies.ts","../node_modules/@apollo/src/utilities/common/stringifyForDisplay.ts","../node_modules/@apollo/src/cache/inmemory/writeToStore.ts","../node_modules/@apollo/src/cache/inmemory/inMemoryCache.ts","apollo.ts","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/graphql/jsutils/isObjectLike.mjs","../node_modules/graphql/jsutils/invariant.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/language/printLocation.mjs","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/language/tokenKind.mjs","../node_modules/graphql/error/syntaxError.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/language/parser.mjs","../node_modules/graphql-tag/src/index.ts","../node_modules/@apollo/src/react/parser/index.ts","../node_modules/@apollo/src/react/hooks/useQuery.ts","../node_modules/@apollo/src/react/hooks/useApolloClient.ts","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts","generated/graphql.ts","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","components/Search.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/d3-selection/src/selector.js","../node_modules/d3-selection/src/array.js","../node_modules/d3-selection/src/selectorAll.js","../node_modules/d3-selection/src/matcher.js","../node_modules/d3-selection/src/selection/selectChild.js","../node_modules/d3-selection/src/selection/selectChildren.js","../node_modules/d3-selection/src/selection/sparse.js","../node_modules/d3-selection/src/selection/enter.js","../node_modules/d3-selection/src/constant.js","../node_modules/d3-selection/src/selection/data.js","../node_modules/d3-selection/src/selection/sort.js","../node_modules/d3-selection/src/namespaces.js","../node_modules/d3-selection/src/namespace.js","../node_modules/d3-selection/src/selection/attr.js","../node_modules/d3-selection/src/window.js","../node_modules/d3-selection/src/selection/style.js","../node_modules/d3-selection/src/selection/property.js","../node_modules/d3-selection/src/selection/classed.js","../node_modules/d3-selection/src/selection/text.js","../node_modules/d3-selection/src/selection/html.js","../node_modules/d3-selection/src/selection/raise.js","../node_modules/d3-selection/src/selection/lower.js","../node_modules/d3-selection/src/creator.js","../node_modules/d3-selection/src/selection/insert.js","../node_modules/d3-selection/src/selection/remove.js","../node_modules/d3-selection/src/selection/clone.js","../node_modules/d3-selection/src/selection/on.js","../node_modules/d3-selection/src/selection/dispatch.js","../node_modules/d3-selection/src/selection/iterator.js","../node_modules/d3-selection/src/selection/index.js","../node_modules/d3-selection/src/selection/select.js","../node_modules/d3-selection/src/selection/selectAll.js","../node_modules/d3-selection/src/selection/filter.js","../node_modules/d3-selection/src/selection/exit.js","../node_modules/d3-selection/src/selection/join.js","../node_modules/d3-selection/src/selection/merge.js","../node_modules/d3-selection/src/selection/order.js","../node_modules/d3-selection/src/selection/call.js","../node_modules/d3-selection/src/selection/nodes.js","../node_modules/d3-selection/src/selection/node.js","../node_modules/d3-selection/src/selection/size.js","../node_modules/d3-selection/src/selection/empty.js","../node_modules/d3-selection/src/selection/each.js","../node_modules/d3-selection/src/selection/append.js","../node_modules/d3-selection/src/selection/datum.js","../node_modules/d3-dispatch/src/dispatch.js","../node_modules/d3-timer/src/timer.js","../node_modules/d3-timer/src/timeout.js","../node_modules/d3-transition/src/transition/schedule.js","../node_modules/d3-transition/src/interrupt.js","../node_modules/d3-interpolate/src/number.js","../node_modules/d3-interpolate/src/transform/decompose.js","../node_modules/d3-interpolate/src/transform/parse.js","../node_modules/d3-interpolate/src/transform/index.js","../node_modules/d3-transition/src/transition/tween.js","../node_modules/d3-color/src/define.js","../node_modules/d3-color/src/color.js","../node_modules/d3-interpolate/src/basis.js","../node_modules/d3-interpolate/src/constant.js","../node_modules/d3-interpolate/src/color.js","../node_modules/d3-interpolate/src/rgb.js","../node_modules/d3-interpolate/src/basisClosed.js","../node_modules/d3-interpolate/src/string.js","../node_modules/d3-transition/src/transition/interpolate.js","../node_modules/d3-transition/src/transition/attr.js","../node_modules/d3-transition/src/transition/attrTween.js","../node_modules/d3-transition/src/transition/delay.js","../node_modules/d3-transition/src/transition/duration.js","../node_modules/d3-transition/src/transition/ease.js","../node_modules/d3-transition/src/transition/on.js","../node_modules/d3-transition/src/transition/selection.js","../node_modules/d3-transition/src/transition/style.js","../node_modules/d3-transition/src/transition/styleTween.js","../node_modules/d3-transition/src/transition/textTween.js","../node_modules/d3-transition/src/transition/index.js","../node_modules/d3-transition/src/transition/select.js","../node_modules/d3-transition/src/transition/selectAll.js","../node_modules/d3-transition/src/transition/filter.js","../node_modules/d3-transition/src/transition/merge.js","../node_modules/d3-transition/src/transition/transition.js","../node_modules/d3-transition/src/transition/text.js","../node_modules/d3-transition/src/transition/remove.js","../node_modules/d3-transition/src/transition/easeVarying.js","../node_modules/d3-transition/src/transition/end.js","../node_modules/d3-transition/src/selection/transition.js","../node_modules/d3-ease/src/cubic.js","../node_modules/d3-transition/src/selection/index.js","../node_modules/d3-transition/src/selection/interrupt.js","../node_modules/d3-brush/src/brush.js","../node_modules/d3-force/src/constant.js","../node_modules/d3-force/src/jiggle.js","../node_modules/d3-force/src/link.js","../node_modules/d3-quadtree/src/add.js","../node_modules/d3-quadtree/src/quad.js","../node_modules/d3-quadtree/src/x.js","../node_modules/d3-quadtree/src/y.js","../node_modules/d3-quadtree/src/quadtree.js","../node_modules/d3-quadtree/src/cover.js","../node_modules/d3-quadtree/src/data.js","../node_modules/d3-quadtree/src/extent.js","../node_modules/d3-quadtree/src/find.js","../node_modules/d3-quadtree/src/remove.js","../node_modules/d3-quadtree/src/root.js","../node_modules/d3-quadtree/src/size.js","../node_modules/d3-quadtree/src/visit.js","../node_modules/d3-quadtree/src/visitAfter.js","../node_modules/d3-force/src/lcg.js","../node_modules/d3-force/src/simulation.js","../node_modules/d3-selection/src/select.js","../node_modules/d3-drag/src/noevent.js","../node_modules/d3-drag/src/nodrag.js","../node_modules/d3-interpolate/src/zoom.js","../node_modules/d3-selection/src/pointer.js","../node_modules/d3-selection/src/sourceEvent.js","../node_modules/d3-zoom/src/constant.js","../node_modules/d3-zoom/src/event.js","../node_modules/d3-zoom/src/transform.js","../node_modules/d3-zoom/src/noevent.js","../node_modules/d3-zoom/src/zoom.js","utils/github-social-graph.ts","../node_modules/d3-force/src/manyBody.js","../node_modules/d3-force/src/center.js","App.tsx","index.tsx"],"sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/** @license React v17.0.2\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),m=require(\"object-assign\"),r=require(\"scheduler\");function y(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}if(!aa)throw Error(y(227));var ba=new Set,ca={};function da(a,b){ea(a,b);ea(a+\"Capture\",b)}\nfunction ea(a,b){ca[a]=b;for(a=0;a<b.length;a++)ba.add(b[a])}\nvar fa=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ha=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,ia=Object.prototype.hasOwnProperty,\nja={},ka={};function la(a){if(ia.call(ka,a))return!0;if(ia.call(ja,a))return!1;if(ha.test(a))return ka[a]=!0;ja[a]=!0;return!1}function ma(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction na(a,b,c,d){if(null===b||\"undefined\"===typeof b||ma(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function B(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var D={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){D[a]=new B(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];D[b]=new B(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){D[a]=new B(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){D[a]=new B(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){D[a]=new B(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){D[a]=new B(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){D[a]=new B(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){D[a]=new B(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){D[a]=new B(a,5,!1,a.toLowerCase(),null,!1,!1)});var oa=/[\\-:]([a-z])/g;function pa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(oa,\npa);D[b]=new B(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!1,!1)});\nD.xlinkHref=new B(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction qa(a,b,c,d){var e=D.hasOwnProperty(b)?D[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1]?!1:!0;f||(na(b,c,e,d)&&(c=null),d||null===e?la(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}\nvar ra=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,sa=60103,ta=60106,ua=60107,wa=60108,xa=60114,ya=60109,za=60110,Aa=60112,Ba=60113,Ca=60120,Da=60115,Ea=60116,Fa=60121,Ga=60128,Ha=60129,Ia=60130,Ja=60131;\nif(\"function\"===typeof Symbol&&Symbol.for){var E=Symbol.for;sa=E(\"react.element\");ta=E(\"react.portal\");ua=E(\"react.fragment\");wa=E(\"react.strict_mode\");xa=E(\"react.profiler\");ya=E(\"react.provider\");za=E(\"react.context\");Aa=E(\"react.forward_ref\");Ba=E(\"react.suspense\");Ca=E(\"react.suspense_list\");Da=E(\"react.memo\");Ea=E(\"react.lazy\");Fa=E(\"react.block\");E(\"react.scope\");Ga=E(\"react.opaque.id\");Ha=E(\"react.debug_trace_mode\");Ia=E(\"react.offscreen\");Ja=E(\"react.legacy_hidden\")}\nvar Ka=\"function\"===typeof Symbol&&Symbol.iterator;function La(a){if(null===a||\"object\"!==typeof a)return null;a=Ka&&a[Ka]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var Ma;function Na(a){if(void 0===Ma)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);Ma=b&&b[1]||\"\"}return\"\\n\"+Ma+a}var Oa=!1;\nfunction Pa(a,b){if(!a||Oa)return\"\";Oa=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(k){var d=k}Reflect.construct(a,[],b)}else{try{b.call()}catch(k){d=k}a.call(b.prototype)}else{try{throw Error();}catch(k){d=k}a()}}catch(k){if(k&&d&&\"string\"===typeof k.stack){for(var e=k.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h])return\"\\n\"+e[g].replace(\" at new \",\" at \");while(1<=g&&0<=h)}break}}}finally{Oa=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Na(a):\"\"}\nfunction Qa(a){switch(a.tag){case 5:return Na(a.type);case 16:return Na(\"Lazy\");case 13:return Na(\"Suspense\");case 19:return Na(\"SuspenseList\");case 0:case 2:case 15:return a=Pa(a.type,!1),a;case 11:return a=Pa(a.type.render,!1),a;case 22:return a=Pa(a.type._render,!1),a;case 1:return a=Pa(a.type,!0),a;default:return\"\"}}\nfunction Ra(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ua:return\"Fragment\";case ta:return\"Portal\";case xa:return\"Profiler\";case wa:return\"StrictMode\";case Ba:return\"Suspense\";case Ca:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case za:return(a.displayName||\"Context\")+\".Consumer\";case ya:return(a._context.displayName||\"Context\")+\".Provider\";case Aa:var b=a.render;b=b.displayName||b.name||\"\";\nreturn a.displayName||(\"\"!==b?\"ForwardRef(\"+b+\")\":\"ForwardRef\");case Da:return Ra(a.type);case Fa:return Ra(a._render);case Ea:b=a._payload;a=a._init;try{return Ra(a(b))}catch(c){}}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"object\":case \"string\":case \"undefined\":return a;default:return\"\"}}function Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return m({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function $a(a,b){b=b.checked;null!=b&&qa(a,\"checked\",b,!1)}\nfunction ab(a,b){$a(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?bb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&bb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction cb(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction bb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}function db(a){var b=\"\";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function eb(a,b){a=m({children:void 0},b);if(b=db(b.children))a.children=b;return a}\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(y(91));return m({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(y(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(y(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}var kb={html:\"http://www.w3.org/1999/xhtml\",mathml:\"http://www.w3.org/1998/Math/MathML\",svg:\"http://www.w3.org/2000/svg\"};\nfunction lb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}function mb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?lb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar nb,ob=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==kb.svg||\"innerHTML\"in a)a.innerHTML=b;else{nb=nb||document.createElement(\"div\");nb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=nb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction pb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar qb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,\nfloodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(qb).forEach(function(a){rb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qb[b]=qb[a]})});function sb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||qb.hasOwnProperty(a)&&qb[a]?(\"\"+b).trim():b+\"px\"}\nfunction tb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=sb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var ub=m({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction vb(a,b){if(b){if(ub[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(y(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(y(60));if(!(\"object\"===typeof b.dangerouslySetInnerHTML&&\"__html\"in b.dangerouslySetInnerHTML))throw Error(y(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(y(62));}}\nfunction wb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(y(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(a,b,c,d,e){return a(b,c,d,e)}function Ib(){}var Jb=Gb,Kb=!1,Lb=!1;function Mb(){if(null!==zb||null!==Ab)Ib(),Fb()}\nfunction Nb(a,b,c){if(Lb)return a(b,c);Lb=!0;try{return Jb(a,b,c)}finally{Lb=!1,Mb()}}\nfunction Ob(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(y(231,b,typeof c));return c}var Pb=!1;if(fa)try{var Qb={};Object.defineProperty(Qb,\"passive\",{get:function(){Pb=!0}});window.addEventListener(\"test\",Qb,Qb);window.removeEventListener(\"test\",Qb,Qb)}catch(a){Pb=!1}function Rb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(n){this.onError(n)}}var Sb=!1,Tb=null,Ub=!1,Vb=null,Wb={onError:function(a){Sb=!0;Tb=a}};function Xb(a,b,c,d,e,f,g,h,k){Sb=!1;Tb=null;Rb.apply(Wb,arguments)}\nfunction Yb(a,b,c,d,e,f,g,h,k){Xb.apply(this,arguments);if(Sb){if(Sb){var l=Tb;Sb=!1;Tb=null}else throw Error(y(198));Ub||(Ub=!0,Vb=l)}}function Zb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function $b(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function ac(a){if(Zb(a)!==a)throw Error(y(188));}\nfunction bc(a){var b=a.alternate;if(!b){b=Zb(a);if(null===b)throw Error(y(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return ac(e),a;if(f===d)return ac(e),b;f=f.sibling}throw Error(y(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(y(189));}}if(c.alternate!==d)throw Error(y(190));}if(3!==c.tag)throw Error(y(188));return c.stateNode.current===c?a:b}function cc(a){a=bc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}\nfunction dc(a,b){for(var c=a.alternate;null!==b;){if(b===a||b===c)return!0;b=b.return}return!1}var ec,fc,gc,hc,ic=!1,jc=[],kc=null,lc=null,mc=null,nc=new Map,oc=new Map,pc=[],qc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction rc(a,b,c,d,e){return{blockedOn:a,domEventName:b,eventSystemFlags:c|16,nativeEvent:e,targetContainers:[d]}}function sc(a,b){switch(a){case \"focusin\":case \"focusout\":kc=null;break;case \"dragenter\":case \"dragleave\":lc=null;break;case \"mouseover\":case \"mouseout\":mc=null;break;case \"pointerover\":case \"pointerout\":nc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":oc.delete(b.pointerId)}}\nfunction tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=rc(b,c,d,e,f),null!==b&&(b=Cb(b),null!==b&&fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction uc(a,b,c,d,e){switch(b){case \"focusin\":return kc=tc(kc,a,b,c,d,e),!0;case \"dragenter\":return lc=tc(lc,a,b,c,d,e),!0;case \"mouseover\":return mc=tc(mc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;nc.set(f,tc(nc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,oc.set(f,tc(oc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction vc(a){var b=wc(a.target);if(null!==b){var c=Zb(b);if(null!==c)if(b=c.tag,13===b){if(b=$b(c),null!==b){a.blockedOn=b;hc(a.lanePriority,function(){r.unstable_runWithPriority(a.priority,function(){gc(c)})});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c)return b=Cb(c),null!==b&&fc(b),a.blockedOn=c,!1;b.shift()}return!0}function zc(a,b,c){xc(a)&&c.delete(b)}\nfunction Ac(){for(ic=!1;0<jc.length;){var a=jc[0];if(null!==a.blockedOn){a=Cb(a.blockedOn);null!==a&&ec(a);break}for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c){a.blockedOn=c;break}b.shift()}null===a.blockedOn&&jc.shift()}null!==kc&&xc(kc)&&(kc=null);null!==lc&&xc(lc)&&(lc=null);null!==mc&&xc(mc)&&(mc=null);nc.forEach(zc);oc.forEach(zc)}\nfunction Bc(a,b){a.blockedOn===b&&(a.blockedOn=null,ic||(ic=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Ac)))}\nfunction Cc(a){function b(b){return Bc(b,a)}if(0<jc.length){Bc(jc[0],a);for(var c=1;c<jc.length;c++){var d=jc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==kc&&Bc(kc,a);null!==lc&&Bc(lc,a);null!==mc&&Bc(mc,a);nc.forEach(b);oc.forEach(b);for(c=0;c<pc.length;c++)d=pc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<pc.length&&(c=pc[0],null===c.blockedOn);)vc(c),null===c.blockedOn&&pc.shift()}\nfunction Dc(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var Ec={animationend:Dc(\"Animation\",\"AnimationEnd\"),animationiteration:Dc(\"Animation\",\"AnimationIteration\"),animationstart:Dc(\"Animation\",\"AnimationStart\"),transitionend:Dc(\"Transition\",\"TransitionEnd\")},Fc={},Gc={};\nfa&&(Gc=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete Ec.animationend.animation,delete Ec.animationiteration.animation,delete Ec.animationstart.animation),\"TransitionEvent\"in window||delete Ec.transitionend.transition);function Hc(a){if(Fc[a])return Fc[a];if(!Ec[a])return a;var b=Ec[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Gc)return Fc[a]=b[c];return a}\nvar Ic=Hc(\"animationend\"),Jc=Hc(\"animationiteration\"),Kc=Hc(\"animationstart\"),Lc=Hc(\"transitionend\"),Mc=new Map,Nc=new Map,Oc=[\"abort\",\"abort\",Ic,\"animationEnd\",Jc,\"animationIteration\",Kc,\"animationStart\",\"canplay\",\"canPlay\",\"canplaythrough\",\"canPlayThrough\",\"durationchange\",\"durationChange\",\"emptied\",\"emptied\",\"encrypted\",\"encrypted\",\"ended\",\"ended\",\"error\",\"error\",\"gotpointercapture\",\"gotPointerCapture\",\"load\",\"load\",\"loadeddata\",\"loadedData\",\"loadedmetadata\",\"loadedMetadata\",\"loadstart\",\"loadStart\",\n\"lostpointercapture\",\"lostPointerCapture\",\"playing\",\"playing\",\"progress\",\"progress\",\"seeking\",\"seeking\",\"stalled\",\"stalled\",\"suspend\",\"suspend\",\"timeupdate\",\"timeUpdate\",Lc,\"transitionEnd\",\"waiting\",\"waiting\"];function Pc(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1];e=\"on\"+(e[0].toUpperCase()+e.slice(1));Nc.set(d,b);Mc.set(d,e);da(e,[d])}}var Qc=r.unstable_now;Qc();var F=8;\nfunction Rc(a){if(0!==(1&a))return F=15,1;if(0!==(2&a))return F=14,2;if(0!==(4&a))return F=13,4;var b=24&a;if(0!==b)return F=12,b;if(0!==(a&32))return F=11,32;b=192&a;if(0!==b)return F=10,b;if(0!==(a&256))return F=9,256;b=3584&a;if(0!==b)return F=8,b;if(0!==(a&4096))return F=7,4096;b=4186112&a;if(0!==b)return F=6,b;b=62914560&a;if(0!==b)return F=5,b;if(a&67108864)return F=4,67108864;if(0!==(a&134217728))return F=3,134217728;b=805306368&a;if(0!==b)return F=2,b;if(0!==(1073741824&a))return F=1,1073741824;\nF=8;return a}function Sc(a){switch(a){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}function Tc(a){switch(a){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(y(358,a));}}\nfunction Uc(a,b){var c=a.pendingLanes;if(0===c)return F=0;var d=0,e=0,f=a.expiredLanes,g=a.suspendedLanes,h=a.pingedLanes;if(0!==f)d=f,e=F=15;else if(f=c&134217727,0!==f){var k=f&~g;0!==k?(d=Rc(k),e=F):(h&=f,0!==h&&(d=Rc(h),e=F))}else f=c&~g,0!==f?(d=Rc(f),e=F):0!==h&&(d=Rc(h),e=F);if(0===d)return 0;d=31-Vc(d);d=c&((0>d?0:1<<d)<<1)-1;if(0!==b&&b!==d&&0===(b&g)){Rc(b);if(e<=F)return b;F=e}b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-Vc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction Wc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function Xc(a,b){switch(a){case 15:return 1;case 14:return 2;case 12:return a=Yc(24&~b),0===a?Xc(10,b):a;case 10:return a=Yc(192&~b),0===a?Xc(8,b):a;case 8:return a=Yc(3584&~b),0===a&&(a=Yc(4186112&~b),0===a&&(a=512)),a;case 2:return b=Yc(805306368&~b),0===b&&(b=268435456),b}throw Error(y(358,a));}function Yc(a){return a&-a}function Zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction $c(a,b,c){a.pendingLanes|=b;var d=b-1;a.suspendedLanes&=d;a.pingedLanes&=d;a=a.eventTimes;b=31-Vc(b);a[b]=c}var Vc=Math.clz32?Math.clz32:ad,bd=Math.log,cd=Math.LN2;function ad(a){return 0===a?32:31-(bd(a)/cd|0)|0}var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function gd(a,b,c,d){Kb||Ib();var e=hd,f=Kb;Kb=!0;try{Hb(e,a,b,c,d)}finally{(Kb=f)||Mb()}}function id(a,b,c,d){ed(dd,hd.bind(null,a,b,c,d))}\nfunction hd(a,b,c,d){if(fd){var e;if((e=0===(b&4))&&0<jc.length&&-1<qc.indexOf(a))a=rc(null,a,b,c,d),jc.push(a);else{var f=yc(a,b,c,d);if(null===f)e&&sc(a,d);else{if(e){if(-1<qc.indexOf(a)){a=rc(f,a,b,c,d);jc.push(a);return}if(uc(f,a,b,c,d))return;sc(a,d)}jd(a,b,d,null,c)}}}}\nfunction yc(a,b,c,d){var e=xb(d);e=wc(e);if(null!==e){var f=Zb(e);if(null===f)e=null;else{var g=f.tag;if(13===g){e=$b(f);if(null!==e)return e;e=null}else if(3===g){if(f.stateNode.hydrate)return 3===f.tag?f.stateNode.containerInfo:null;e=null}else f!==e&&(e=null)}}jd(a,b,d,e,c);return null}var kd=null,ld=null,md=null;\nfunction nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}function od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}m(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=m({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=m({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=m({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=m({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=m({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=m({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=m({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=m({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=m({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=m({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=m({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=m({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=fa&&\"CompositionEvent\"in window,be=null;fa&&\"documentMode\"in document&&(be=document.documentMode);var ce=fa&&\"TextEvent\"in window&&!be,de=fa&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(fa){var xe;if(fa){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));a=re;if(Kb)a(b);else{Kb=!0;try{Gb(a,b)}finally{Kb=!1,Mb()}}}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge,Ie=Object.prototype.hasOwnProperty;\nfunction Je(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!Ie.call(b,c[d])||!He(a[c[d]],b[c[d]]))return!1;return!0}function Ke(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Le(a,b){var c=Ke(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Ke(c)}}function Me(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Me(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Ne(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Oe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nvar Pe=fa&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Oe(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Je(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nPc(\"cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange\".split(\" \"),\n0);Pc(\"drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel\".split(\" \"),1);Pc(Oc,2);for(var Ve=\"change selectionchange textInput compositionstart compositionend compositionupdate\".split(\" \"),We=0;We<Ve.length;We++)Nc.set(Ve[We],0);ea(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);\nea(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ea(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);ea(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);da(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));da(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));da(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);da(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));\nda(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));da(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var Xe=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),Ye=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(Xe));\nfunction Ze(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Yb(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k}}}if(Ub)throw a=Vb,Ub=!1,Vb=null,a;}\nfunction G(a,b){var c=$e(b),d=a+\"__bubble\";c.has(d)||(af(b,a,2,!1),c.add(d))}var bf=\"_reactListening\"+Math.random().toString(36).slice(2);function cf(a){a[bf]||(a[bf]=!0,ba.forEach(function(b){Ye.has(b)||df(b,!1,a,null);df(b,!0,a,null)}))}\nfunction df(a,b,c,d){var e=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,f=c;\"selectionchange\"===a&&9!==c.nodeType&&(f=c.ownerDocument);if(null!==d&&!b&&Ye.has(a)){if(\"scroll\"!==a)return;e|=2;f=d}var g=$e(f),h=a+\"__\"+(b?\"capture\":\"bubble\");g.has(h)||(b&&(e|=4),af(f,a,e,b),g.add(h))}\nfunction af(a,b,c,d){var e=Nc.get(b);switch(void 0===e?2:e){case 0:e=gd;break;case 1:e=id;break;default:e=hd}c=e.bind(null,b,c,a);e=void 0;!Pb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction jd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Nb(function(){var d=f,e=xb(c),g=[];\na:{var h=Mc.get(a);if(void 0!==h){var k=td,x=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":x=\"focus\";k=Fd;break;case \"focusout\":x=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case Ic:case Jc:case Kc:k=Hd;break;case Lc:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var w=0!==(b&4),z=!w&&\"scroll\"===a,u=w?null!==h?h+\"Capture\":null:h;w=[];for(var t=d,q;null!==\nt;){q=t;var v=q.stateNode;5===q.tag&&null!==v&&(q=v,null!==u&&(v=Ob(t,u),null!=v&&w.push(ef(t,v,q))));if(z)break;t=t.return}0<w.length&&(h=new k(h,x,null,c,e),g.push({event:h,listeners:w}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&0===(b&16)&&(x=c.relatedTarget||c.fromElement)&&(wc(x)||x[ff]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(x=c.relatedTarget||c.toElement,k=d,x=x?wc(x):null,null!==\nx&&(z=Zb(x),x!==z||5!==x.tag&&6!==x.tag))x=null}else k=null,x=d;if(k!==x){w=Bd;v=\"onMouseLeave\";u=\"onMouseEnter\";t=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)w=Td,v=\"onPointerLeave\",u=\"onPointerEnter\",t=\"pointer\";z=null==k?h:ue(k);q=null==x?h:ue(x);h=new w(v,t+\"leave\",k,c,e);h.target=z;h.relatedTarget=q;v=null;wc(e)===d&&(w=new w(u,t+\"enter\",x,c,e),w.target=q,w.relatedTarget=z,v=w);z=v;if(k&&x)b:{w=k;u=x;t=0;for(q=w;q;q=gf(q))t++;q=0;for(v=u;v;v=gf(v))q++;for(;0<t-q;)w=gf(w),t--;for(;0<q-t;)u=\ngf(u),q--;for(;t--;){if(w===u||null!==u&&w===u.alternate)break b;w=gf(w);u=gf(u)}w=null}else w=null;null!==k&&hf(g,h,k,w,!1);null!==x&&null!==z&&hf(g,z,x,w,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var J=ve;else if(me(h))if(we)J=Fe;else{J=De;var K=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(J=Ee);if(J&&(J=J(a,d))){ne(g,J,c,e);break a}K&&K(a,h,d);\"focusout\"===a&&(K=h._wrapperState)&&\nK.controlled&&\"number\"===h.type&&bb(h,\"number\",h.value)}K=d?ue(d):window;switch(a){case \"focusin\":if(me(K)||\"true\"===K.contentEditable)Qe=K,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var Q;if(ae)b:{switch(a){case \"compositionstart\":var L=\"onCompositionStart\";break b;case \"compositionend\":L=\"onCompositionEnd\";break b;\ncase \"compositionupdate\":L=\"onCompositionUpdate\";break b}L=void 0}else ie?ge(a,c)&&(L=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(L=\"onCompositionStart\");L&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==L?\"onCompositionEnd\"===L&&ie&&(Q=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),K=oe(d,L),0<K.length&&(L=new Ld(L,a,null,c,e),g.push({event:L,listeners:K}),Q?L.data=Q:(Q=he(c),null!==Q&&(L.data=Q))));if(Q=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),0<d.length&&(e=new Ld(\"onBeforeInput\",\n\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=Q)}se(g,b)})}function ef(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Ob(a,c),null!=f&&d.unshift(ef(a,f,e)),f=Ob(a,b),null!=f&&d.push(ef(a,f,e)));a=a.return}return d}function gf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction hf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Ob(c,f),null!=k&&g.unshift(ef(c,k,h))):e||(k=Ob(c,f),null!=k&&g.push(ef(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}function jf(){}var kf=null,lf=null;function mf(a,b){switch(a){case \"button\":case \"input\":case \"select\":case \"textarea\":return!!b.autoFocus}return!1}\nfunction nf(a,b){return\"textarea\"===a||\"option\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var of=\"function\"===typeof setTimeout?setTimeout:void 0,pf=\"function\"===typeof clearTimeout?clearTimeout:void 0;function qf(a){1===a.nodeType?a.textContent=\"\":9===a.nodeType&&(a=a.body,null!=a&&(a.textContent=\"\"))}\nfunction rf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}function sf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var tf=0;function uf(a){return{$$typeof:Ga,toString:a,valueOf:a}}var vf=Math.random().toString(36).slice(2),wf=\"__reactFiber$\"+vf,xf=\"__reactProps$\"+vf,ff=\"__reactContainer$\"+vf,yf=\"__reactEvents$\"+vf;\nfunction wc(a){var b=a[wf];if(b)return b;for(var c=a.parentNode;c;){if(b=c[ff]||c[wf]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=sf(a);null!==a;){if(c=a[wf])return c;a=sf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[wf]||a[ff];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(y(33));}function Db(a){return a[xf]||null}\nfunction $e(a){var b=a[yf];void 0===b&&(b=a[yf]=new Set);return b}var zf=[],Af=-1;function Bf(a){return{current:a}}function H(a){0>Af||(a.current=zf[Af],zf[Af]=null,Af--)}function I(a,b){Af++;zf[Af]=a.current;a.current=b}var Cf={},M=Bf(Cf),N=Bf(!1),Df=Cf;\nfunction Ef(a,b){var c=a.type.contextTypes;if(!c)return Cf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function Ff(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Gf(){H(N);H(M)}function Hf(a,b,c){if(M.current!==Cf)throw Error(y(168));I(M,b);I(N,c)}\nfunction If(a,b,c){var d=a.stateNode;a=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(y(108,Ra(b)||\"Unknown\",e));return m({},c,d)}function Jf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Cf;Df=M.current;I(M,a);I(N,N.current);return!0}function Kf(a,b,c){var d=a.stateNode;if(!d)throw Error(y(169));c?(a=If(a,b,Df),d.__reactInternalMemoizedMergedChildContext=a,H(N),H(M),I(M,a)):H(N);I(N,c)}\nvar Lf=null,Mf=null,Nf=r.unstable_runWithPriority,Of=r.unstable_scheduleCallback,Pf=r.unstable_cancelCallback,Qf=r.unstable_shouldYield,Rf=r.unstable_requestPaint,Sf=r.unstable_now,Tf=r.unstable_getCurrentPriorityLevel,Uf=r.unstable_ImmediatePriority,Vf=r.unstable_UserBlockingPriority,Wf=r.unstable_NormalPriority,Xf=r.unstable_LowPriority,Yf=r.unstable_IdlePriority,Zf={},$f=void 0!==Rf?Rf:function(){},ag=null,bg=null,cg=!1,dg=Sf(),O=1E4>dg?Sf:function(){return Sf()-dg};\nfunction eg(){switch(Tf()){case Uf:return 99;case Vf:return 98;case Wf:return 97;case Xf:return 96;case Yf:return 95;default:throw Error(y(332));}}function fg(a){switch(a){case 99:return Uf;case 98:return Vf;case 97:return Wf;case 96:return Xf;case 95:return Yf;default:throw Error(y(332));}}function gg(a,b){a=fg(a);return Nf(a,b)}function hg(a,b,c){a=fg(a);return Of(a,b,c)}function ig(){if(null!==bg){var a=bg;bg=null;Pf(a)}jg()}\nfunction jg(){if(!cg&&null!==ag){cg=!0;var a=0;try{var b=ag;gg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});ag=null}catch(c){throw null!==ag&&(ag=ag.slice(a+1)),Of(Uf,ig),c;}finally{cg=!1}}}var kg=ra.ReactCurrentBatchConfig;function lg(a,b){if(a&&a.defaultProps){b=m({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var mg=Bf(null),ng=null,og=null,pg=null;function qg(){pg=og=ng=null}\nfunction rg(a){var b=mg.current;H(mg);a.type._context._currentValue=b}function sg(a,b){for(;null!==a;){var c=a.alternate;if((a.childLanes&b)===b)if(null===c||(c.childLanes&b)===b)break;else c.childLanes|=b;else a.childLanes|=b,null!==c&&(c.childLanes|=b);a=a.return}}function tg(a,b){ng=a;pg=og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(ug=!0),a.firstContext=null)}\nfunction vg(a,b){if(pg!==a&&!1!==b&&0!==b){if(\"number\"!==typeof b||1073741823===b)pg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===og){if(null===ng)throw Error(y(308));og=b;ng.dependencies={lanes:0,firstContext:b,responders:null}}else og=og.next=b}return a._currentValue}var wg=!1;function xg(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}\nfunction yg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function zg(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}function Ag(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}\nfunction Bg(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction Cg(a,b,c,d){var e=a.updateQueue;wg=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var n=a.alternate;if(null!==n){n=n.updateQueue;var A=n.lastBaseUpdate;A!==g&&(null===A?n.firstBaseUpdate=l:A.next=l,n.lastBaseUpdate=k)}}if(null!==f){A=e.baseState;g=0;n=l=k=null;do{h=f.lane;var p=f.eventTime;if((d&h)===h){null!==n&&(n=n.next={eventTime:p,lane:0,tag:f.tag,payload:f.payload,callback:f.callback,\nnext:null});a:{var C=a,x=f;h=b;p=c;switch(x.tag){case 1:C=x.payload;if(\"function\"===typeof C){A=C.call(p,A,h);break a}A=C;break a;case 3:C.flags=C.flags&-4097|64;case 0:C=x.payload;h=\"function\"===typeof C?C.call(p,A,h):C;if(null===h||void 0===h)break a;A=m({},A,h);break a;case 2:wg=!0}}null!==f.callback&&(a.flags|=32,h=e.effects,null===h?e.effects=[f]:h.push(f))}else p={eventTime:p,lane:h,tag:f.tag,payload:f.payload,callback:f.callback,next:null},null===n?(l=n=p,k=A):n=n.next=p,g|=h;f=f.next;if(null===\nf)if(h=e.shared.pending,null===h)break;else f=h.next,h.next=null,e.lastBaseUpdate=h,e.shared.pending=null}while(1);null===n&&(k=A);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=n;Dg|=g;a.lanes=g;a.memoizedState=A}}function Eg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(y(191,e));e.call(d)}}}var Fg=(new aa.Component).refs;\nfunction Gg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:m({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar Kg={isMounted:function(a){return(a=a._reactInternals)?Zb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d)},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=Hg(),d=Ig(a),e=zg(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=\nb);Ag(a,e);Jg(a,d,c)}};function Lg(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Je(c,d)||!Je(e,f):!0}\nfunction Mg(a,b,c){var d=!1,e=Cf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=vg(f):(e=Ff(b)?Df:M.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Ef(a,e):Cf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Kg;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction Ng(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Kg.enqueueReplaceState(b,b.state,null)}\nfunction Og(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Fg;xg(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=vg(f):(f=Ff(b)?Df:M.current,e.context=Ef(a,f));Cg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(Gg(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||\n(b=e.state,\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Kg.enqueueReplaceState(e,e.state,null),Cg(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4)}var Pg=Array.isArray;\nfunction Qg(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(y(309));var d=c.stateNode}if(!d)throw Error(y(147,a));var e=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Fg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if(\"string\"!==typeof a)throw Error(y(284));if(!c._owner)throw Error(y(290,a));}return a}\nfunction Rg(a,b){if(\"textarea\"!==a.type)throw Error(y(31,\"[object Object]\"===Object.prototype.toString.call(b)?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":b));}\nfunction Sg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.flags=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Tg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags=2,\nc):d;b.flags=2;return c}function g(b){a&&null===b.alternate&&(b.flags=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Ug(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Qg(a,b,c),d.return=a,d;d=Vg(c.type,c.key,c.props,null,a.mode,d);d.ref=Qg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=\nWg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function n(a,b,c,d,f){if(null===b||7!==b.tag)return b=Xg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function A(a,b,c){if(\"string\"===typeof b||\"number\"===typeof b)return b=Ug(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case sa:return c=Vg(b.type,b.key,b.props,null,a.mode,c),c.ref=Qg(a,null,b),c.return=a,c;case ta:return b=Wg(b,a.mode,c),b.return=a,b}if(Pg(b)||La(b))return b=Xg(b,\na.mode,c,null),b.return=a,b;Rg(a,b)}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case sa:return c.key===e?c.type===ua?n(a,b,c.props.children,d,e):k(a,b,c,d):null;case ta:return c.key===e?l(a,b,c,d):null}if(Pg(c)||La(c))return null!==e?null:n(a,b,c,d,null);Rg(a,c)}return null}function C(a,b,c,d,e){if(\"string\"===typeof d||\"number\"===typeof d)return a=a.get(c)||\nnull,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case sa:return a=a.get(null===d.key?c:d.key)||null,d.type===ua?n(b,a,d.props.children,e,d.key):k(b,a,d,e);case ta:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Pg(d)||La(d))return a=a.get(c)||null,n(b,a,d,e,null);Rg(b,d)}return null}function x(e,g,h,k){for(var l=null,t=null,u=g,z=g=0,q=null;null!==u&&z<h.length;z++){u.index>z?(q=u,u=null):q=u.sibling;var n=p(e,u,h[z],k);if(null===n){null===u&&(u=q);break}a&&u&&null===\nn.alternate&&b(e,u);g=f(n,g,z);null===t?l=n:t.sibling=n;t=n;u=q}if(z===h.length)return c(e,u),l;if(null===u){for(;z<h.length;z++)u=A(e,h[z],k),null!==u&&(g=f(u,g,z),null===t?l=u:t.sibling=u,t=u);return l}for(u=d(e,u);z<h.length;z++)q=C(u,e,z,h[z],k),null!==q&&(a&&null!==q.alternate&&u.delete(null===q.key?z:q.key),g=f(q,g,z),null===t?l=q:t.sibling=q,t=q);a&&u.forEach(function(a){return b(e,a)});return l}function w(e,g,h,k){var l=La(h);if(\"function\"!==typeof l)throw Error(y(150));h=l.call(h);if(null==\nh)throw Error(y(151));for(var t=l=null,u=g,z=g=0,q=null,n=h.next();null!==u&&!n.done;z++,n=h.next()){u.index>z?(q=u,u=null):q=u.sibling;var w=p(e,u,n.value,k);if(null===w){null===u&&(u=q);break}a&&u&&null===w.alternate&&b(e,u);g=f(w,g,z);null===t?l=w:t.sibling=w;t=w;u=q}if(n.done)return c(e,u),l;if(null===u){for(;!n.done;z++,n=h.next())n=A(e,n.value,k),null!==n&&(g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);return l}for(u=d(e,u);!n.done;z++,n=h.next())n=C(u,e,z,n.value,k),null!==n&&(a&&null!==n.alternate&&\nu.delete(null===n.key?z:n.key),g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);a&&u.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k=\"object\"===typeof f&&null!==f&&f.type===ua&&null===f.key;k&&(f=f.props.children);var l=\"object\"===typeof f&&null!==f;if(l)switch(f.$$typeof){case sa:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ua){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,k.sibling);\nd=e(k,f.props);d.ref=Qg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ua?(d=Xg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Vg(f.type,f.key,f.props,null,a.mode,h),h.ref=Qg(a,d,f),h.return=a,a=h)}return g(a);case ta:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=\nWg(f,a.mode,h);d.return=a;a=d}return g(a)}if(\"string\"===typeof f||\"number\"===typeof f)return f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Ug(f,a.mode,h),d.return=a,a=d),g(a);if(Pg(f))return x(a,d,f,h);if(La(f))return w(a,d,f,h);l&&Rg(a,f);if(\"undefined\"===typeof f&&!k)switch(a.tag){case 1:case 22:case 0:case 11:case 15:throw Error(y(152,Ra(a.type)||\"Component\"));}return c(a,d)}}var Yg=Sg(!0),Zg=Sg(!1),$g={},ah=Bf($g),bh=Bf($g),ch=Bf($g);\nfunction dh(a){if(a===$g)throw Error(y(174));return a}function eh(a,b){I(ch,b);I(bh,a);I(ah,$g);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:mb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=mb(b,a)}H(ah);I(ah,b)}function fh(){H(ah);H(bh);H(ch)}function gh(a){dh(ch.current);var b=dh(ah.current);var c=mb(b,a.type);b!==c&&(I(bh,a),I(ah,c))}function hh(a){bh.current===a&&(H(ah),H(bh))}var P=Bf(0);\nfunction ih(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var jh=null,kh=null,lh=!1;\nfunction mh(a,b){var c=nh(5,null,null,0);c.elementType=\"DELETED\";c.type=\"DELETED\";c.stateNode=b;c.return=a;c.flags=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function oh(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}\nfunction ph(a){if(lh){var b=kh;if(b){var c=b;if(!oh(a,b)){b=rf(c.nextSibling);if(!b||!oh(a,b)){a.flags=a.flags&-1025|2;lh=!1;jh=a;return}mh(jh,c)}jh=a;kh=rf(b.firstChild)}else a.flags=a.flags&-1025|2,lh=!1,jh=a}}function qh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;jh=a}\nfunction rh(a){if(a!==jh)return!1;if(!lh)return qh(a),lh=!0,!1;var b=a.type;if(5!==a.tag||\"head\"!==b&&\"body\"!==b&&!nf(b,a.memoizedProps))for(b=kh;b;)mh(a,b),b=rf(b.nextSibling);qh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(y(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){kh=rf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}kh=null}}else kh=jh?rf(a.stateNode.nextSibling):null;return!0}\nfunction sh(){kh=jh=null;lh=!1}var th=[];function uh(){for(var a=0;a<th.length;a++)th[a]._workInProgressVersionPrimary=null;th.length=0}var vh=ra.ReactCurrentDispatcher,wh=ra.ReactCurrentBatchConfig,xh=0,R=null,S=null,T=null,yh=!1,zh=!1;function Ah(){throw Error(y(321));}function Bh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Ch(a,b,c,d,e,f){xh=f;R=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;vh.current=null===a||null===a.memoizedState?Dh:Eh;a=c(d,e);if(zh){f=0;do{zh=!1;if(!(25>f))throw Error(y(301));f+=1;T=S=null;b.updateQueue=null;vh.current=Fh;a=c(d,e)}while(zh)}vh.current=Gh;b=null!==S&&null!==S.next;xh=0;T=S=R=null;yh=!1;if(b)throw Error(y(300));return a}function Hh(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===T?R.memoizedState=T=a:T=T.next=a;return T}\nfunction Ih(){if(null===S){var a=R.alternate;a=null!==a?a.memoizedState:null}else a=S.next;var b=null===T?R.memoizedState:T.next;if(null!==b)T=b,S=a;else{if(null===a)throw Error(y(310));S=a;a={memoizedState:S.memoizedState,baseState:S.baseState,baseQueue:S.baseQueue,queue:S.queue,next:null};null===T?R.memoizedState=T=a:T=T.next=a}return T}function Jh(a,b){return\"function\"===typeof b?b(a):b}\nfunction Kh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y(311));c.lastRenderedReducer=a;var d=S,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.lane;if((xh&l)===l)null!==h&&(h=h.next={lane:0,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),d=k.eagerReducer===a?k.eagerState:a(d,k.action);else{var n={lane:l,action:k.action,eagerReducer:k.eagerReducer,\neagerState:k.eagerState,next:null};null===h?(g=h=n,f=d):h=h.next=n;R.lanes|=l;Dg|=l}k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;He(d,b.memoizedState)||(ug=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}\nfunction Lh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}\nfunction Mh(a,b,c){var d=b._getVersion;d=d(b._source);var e=b._workInProgressVersionPrimary;if(null!==e)a=e===d;else if(a=a.mutableReadLanes,a=(xh&a)===a)b._workInProgressVersionPrimary=d,th.push(b);if(a)return c(b._source);th.push(b);throw Error(y(350));}\nfunction Nh(a,b,c,d){var e=U;if(null===e)throw Error(y(349));var f=b._getVersion,g=f(b._source),h=vh.current,k=h.useState(function(){return Mh(e,b,c)}),l=k[1],n=k[0];k=T;var A=a.memoizedState,p=A.refs,C=p.getSnapshot,x=A.source;A=A.subscribe;var w=R;a.memoizedState={refs:p,source:b,subscribe:d};h.useEffect(function(){p.getSnapshot=c;p.setSnapshot=l;var a=f(b._source);if(!He(g,a)){a=c(b._source);He(n,a)||(l(a),a=Ig(w),e.mutableReadLanes|=a&e.pendingLanes);a=e.mutableReadLanes;e.entangledLanes|=a;for(var d=\ne.entanglements,h=a;0<h;){var k=31-Vc(h),v=1<<k;d[k]|=a;h&=~v}}},[c,b,d]);h.useEffect(function(){return d(b._source,function(){var a=p.getSnapshot,c=p.setSnapshot;try{c(a(b._source));var d=Ig(w);e.mutableReadLanes|=d&e.pendingLanes}catch(q){c(function(){throw q;})}})},[b,d]);He(C,c)&&He(x,b)&&He(A,d)||(a={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:n},a.dispatch=l=Oh.bind(null,R,a),k.queue=a,k.baseQueue=null,n=Mh(e,b,c),k.memoizedState=k.baseState=n);return n}\nfunction Ph(a,b,c){var d=Ih();return Nh(d,a,b,c)}function Qh(a){var b=Hh();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:a};a=a.dispatch=Oh.bind(null,R,a);return[b.memoizedState,a]}\nfunction Rh(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=R.updateQueue;null===b?(b={lastEffect:null},R.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function Sh(a){var b=Hh();a={current:a};return b.memoizedState=a}function Th(){return Ih().memoizedState}function Uh(a,b,c,d){var e=Hh();R.flags|=a;e.memoizedState=Rh(1|b,c,void 0,void 0===d?null:d)}\nfunction Vh(a,b,c,d){var e=Ih();d=void 0===d?null:d;var f=void 0;if(null!==S){var g=S.memoizedState;f=g.destroy;if(null!==d&&Bh(d,g.deps)){Rh(b,c,f,d);return}}R.flags|=a;e.memoizedState=Rh(1|b,c,f,d)}function Wh(a,b){return Uh(516,4,a,b)}function Xh(a,b){return Vh(516,4,a,b)}function Yh(a,b){return Vh(4,2,a,b)}function Zh(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}\nfunction $h(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Vh(4,2,Zh.bind(null,b,a),c)}function ai(){}function bi(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}function ci(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}\nfunction di(a,b){var c=eg();gg(98>c?98:c,function(){a(!0)});gg(97<c?97:c,function(){var c=wh.transition;wh.transition=1;try{a(!1),b()}finally{wh.transition=c}})}\nfunction Oh(a,b,c){var d=Hg(),e=Ig(a),f={lane:e,action:c,eagerReducer:null,eagerState:null,next:null},g=b.pending;null===g?f.next=f:(f.next=g.next,g.next=f);b.pending=f;g=a.alternate;if(a===R||null!==g&&g===R)zh=yh=!0;else{if(0===a.lanes&&(null===g||0===g.lanes)&&(g=b.lastRenderedReducer,null!==g))try{var h=b.lastRenderedState,k=g(h,c);f.eagerReducer=g;f.eagerState=k;if(He(k,h))return}catch(l){}finally{}Jg(a,e,d)}}\nvar Gh={readContext:vg,useCallback:Ah,useContext:Ah,useEffect:Ah,useImperativeHandle:Ah,useLayoutEffect:Ah,useMemo:Ah,useReducer:Ah,useRef:Ah,useState:Ah,useDebugValue:Ah,useDeferredValue:Ah,useTransition:Ah,useMutableSource:Ah,useOpaqueIdentifier:Ah,unstable_isNewReconciler:!1},Dh={readContext:vg,useCallback:function(a,b){Hh().memoizedState=[a,void 0===b?null:b];return a},useContext:vg,useEffect:Wh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Uh(4,2,Zh.bind(null,\nb,a),c)},useLayoutEffect:function(a,b){return Uh(4,2,a,b)},useMemo:function(a,b){var c=Hh();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Hh();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=Oh.bind(null,R,a);return[d.memoizedState,a]},useRef:Sh,useState:Qh,useDebugValue:ai,useDeferredValue:function(a){var b=Qh(a),c=b[0],d=b[1];Wh(function(){var b=wh.transition;\nwh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Qh(!1),b=a[0];a=di.bind(null,a[1]);Sh(a);return[a,b]},useMutableSource:function(a,b,c){var d=Hh();d.memoizedState={refs:{getSnapshot:b,setSnapshot:null},source:a,subscribe:c};return Nh(d,a,b,c)},useOpaqueIdentifier:function(){if(lh){var a=!1,b=uf(function(){a||(a=!0,c(\"r:\"+(tf++).toString(36)));throw Error(y(355));}),c=Qh(b)[1];0===(R.mode&2)&&(R.flags|=516,Rh(5,function(){c(\"r:\"+(tf++).toString(36))},\nvoid 0,null));return b}b=\"r:\"+(tf++).toString(36);Qh(b);return b},unstable_isNewReconciler:!1},Eh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Kh,useRef:Th,useState:function(){return Kh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Kh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Kh(Jh)[0];return[Th().current,\na]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Kh(Jh)[0]},unstable_isNewReconciler:!1},Fh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Lh,useRef:Th,useState:function(){return Lh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Lh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Lh(Jh)[0];return[Th().current,\na]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Lh(Jh)[0]},unstable_isNewReconciler:!1},ei=ra.ReactCurrentOwner,ug=!1;function fi(a,b,c,d){b.child=null===a?Zg(b,null,c,d):Yg(b,a.child,c,d)}function gi(a,b,c,d,e){c=c.render;var f=b.ref;tg(b,e);d=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,d,e);return b.child}\nfunction ii(a,b,c,d,e,f){if(null===a){var g=c.type;if(\"function\"===typeof g&&!ji(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ki(a,b,g,d,e,f);a=Vg(c.type,null,d,b,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(0===(e&f)&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:Je,c(e,d)&&a.ref===b.ref))return hi(a,b,f);b.flags|=1;a=Tg(g,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction ki(a,b,c,d,e,f){if(null!==a&&Je(a.memoizedProps,d)&&a.ref===b.ref)if(ug=!1,0!==(f&e))0!==(a.flags&16384)&&(ug=!0);else return b.lanes=a.lanes,hi(a,b,f);return li(a,b,c,d,f)}\nfunction mi(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode||\"unstable-defer-without-hiding\"===d.mode)if(0===(b.mode&4))b.memoizedState={baseLanes:0},ni(b,c);else if(0!==(c&1073741824))b.memoizedState={baseLanes:0},ni(b,null!==f?f.baseLanes:c);else return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a},ni(b,a),null;else null!==f?(d=f.baseLanes|c,b.memoizedState=null):d=c,ni(b,d);fi(a,b,e,c);return b.child}\nfunction oi(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=128}function li(a,b,c,d,e){var f=Ff(c)?Df:M.current;f=Ef(b,f);tg(b,e);c=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,c,e);return b.child}\nfunction pi(a,b,c,d,e){if(Ff(c)){var f=!0;Jf(b)}else f=!1;tg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),Mg(b,c,d),Og(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=vg(l):(l=Ff(c)?Df:M.current,l=Ef(b,l));var n=c.getDerivedStateFromProps,A=\"function\"===typeof n||\"function\"===typeof g.getSnapshotBeforeUpdate;A||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\n\"function\"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Ng(b,g,d,l);wg=!1;var p=b.memoizedState;g.state=p;Cg(b,d,g,e);k=b.memoizedState;h!==d||p!==k||N.current||wg?(\"function\"===typeof n&&(Gg(b,c,n,d),k=b.memoizedState),(h=wg||Lg(b,c,h,d,p,k,l))?(A||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===\ntypeof g.componentDidMount&&(b.flags|=4)):(\"function\"===typeof g.componentDidMount&&(b.flags|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4),d=!1)}else{g=b.stateNode;yg(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:lg(b.type,h);g.props=l;A=b.pendingProps;p=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=vg(k):(k=Ff(c)?Df:M.current,k=Ef(b,k));var C=c.getDerivedStateFromProps;(n=\"function\"===typeof C||\n\"function\"===typeof g.getSnapshotBeforeUpdate)||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==A||p!==k)&&Ng(b,g,d,k);wg=!1;p=b.memoizedState;g.state=p;Cg(b,d,g,e);var x=b.memoizedState;h!==A||p!==x||N.current||wg?(\"function\"===typeof C&&(Gg(b,c,C,d),x=b.memoizedState),(l=wg||Lg(b,c,l,d,p,x,k))?(n||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,\nx,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=256)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||\nh===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),d=!1)}return qi(a,b,c,d,f,e)}\nfunction qi(a,b,c,d,e,f){oi(a,b);var g=0!==(b.flags&64);if(!d&&!g)return e&&Kf(b,c,!1),hi(a,b,f);d=b.stateNode;ei.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Yg(b,a.child,null,f),b.child=Yg(b,null,h,f)):fi(a,b,h,f);b.memoizedState=d.state;e&&Kf(b,c,!0);return b.child}function ri(a){var b=a.stateNode;b.pendingContext?Hf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Hf(a,b.context,!1);eh(a,b.containerInfo)}\nvar si={dehydrated:null,retryLane:0};\nfunction ti(a,b,c){var d=b.pendingProps,e=P.current,f=!1,g;(g=0!==(b.flags&64))||(g=null!==a&&null===a.memoizedState?!1:0!==(e&2));g?(f=!0,b.flags&=-65):null!==a&&null===a.memoizedState||void 0===d.fallback||!0===d.unstable_avoidThisFallback||(e|=1);I(P,e&1);if(null===a){void 0!==d.fallback&&ph(b);a=d.children;e=d.fallback;if(f)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},b.memoizedState=si,a;if(\"number\"===typeof d.unstable_expectedLoadTime)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},\nb.memoizedState=si,b.lanes=33554432,a;c=vi({mode:\"visible\",children:a},b.mode,c,null);c.return=b;return b.child=c}if(null!==a.memoizedState){if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:\n{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}function ui(a,b,c,d){var e=a.mode,f=a.child;b={mode:\"hidden\",children:b};0===(e&2)&&null!==f?(f.childLanes=0,f.pendingProps=b):f=vi(b,e,0,null);c=Xg(c,e,d,null);f.return=a;c.return=a;f.sibling=c;a.child=f;return c}\nfunction xi(a,b,c,d){var e=a.child;a=e.sibling;c=Tg(e,{mode:\"visible\",children:c});0===(b.mode&2)&&(c.lanes=d);c.return=b;c.sibling=null;null!==a&&(a.nextEffect=null,a.flags=8,b.firstEffect=b.lastEffect=a);return b.child=c}\nfunction wi(a,b,c,d,e){var f=b.mode,g=a.child;a=g.sibling;var h={mode:\"hidden\",children:c};0===(f&2)&&b.child!==g?(c=b.child,c.childLanes=0,c.pendingProps=h,g=c.lastEffect,null!==g?(b.firstEffect=c.firstEffect,b.lastEffect=g,g.nextEffect=null):b.firstEffect=b.lastEffect=null):c=Tg(g,h);null!==a?d=Tg(a,d):(d=Xg(d,f,e,null),d.flags|=2);d.return=b;c.return=b;c.sibling=d;b.child=c;return d}function yi(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);sg(a.return,b)}\nfunction zi(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailMode=e,g.lastEffect=f)}\nfunction Ai(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;fi(a,b,d.children,c);d=P.current;if(0!==(d&2))d=d&1|2,b.flags|=64;else{if(null!==a&&0!==(a.flags&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&yi(a,c);else if(19===a.tag)yi(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(P,d);if(0===(b.mode&2))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===ih(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);zi(b,!1,e,c,f,b.lastEffect);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===ih(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}zi(b,!0,c,null,f,b.lastEffect);break;case \"together\":zi(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}\nfunction hi(a,b,c){null!==a&&(b.dependencies=a.dependencies);Dg|=b.lanes;if(0!==(c&b.childLanes)){if(null!==a&&b.child!==a.child)throw Error(y(153));if(null!==b.child){a=b.child;c=Tg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Tg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}return null}var Bi,Ci,Di,Ei;\nBi=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Ci=function(){};\nDi=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;dh(ah.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"option\":e=eb(a,e);d=eb(a,d);f=[];break;case \"select\":e=m({},e,{value:void 0});d=m({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=jf)}vb(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===\nl){var h=e[l];for(g in h)h.hasOwnProperty(g)&&(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ca.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||\n(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,c)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ca.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&G(\"scroll\",a),f||h===k||(f=[])):\"object\"===typeof k&&null!==k&&k.$$typeof===Ga?k.toString():(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",\nc);var l=f;if(b.updateQueue=l)b.flags|=4}};Ei=function(a,b,c,d){c!==d&&(b.flags|=4)};function Fi(a,b){if(!lh)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction Gi(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return Ff(b.type)&&Gf(),null;case 3:fh();H(N);H(M);uh();d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)rh(b)?b.flags|=4:d.hydrate||(b.flags|=256);Ci(b);return null;case 5:hh(b);var e=dh(ch.current);c=b.type;if(null!==a&&null!=b.stateNode)Di(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=128);else{if(!d){if(null===\nb.stateNode)throw Error(y(166));return null}a=dh(ah.current);if(rh(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[wf]=b;d[xf]=f;switch(c){case \"dialog\":G(\"cancel\",d);G(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":G(\"load\",d);break;case \"video\":case \"audio\":for(a=0;a<Xe.length;a++)G(Xe[a],d);break;case \"source\":G(\"error\",d);break;case \"img\":case \"image\":case \"link\":G(\"error\",d);G(\"load\",d);break;case \"details\":G(\"toggle\",d);break;case \"input\":Za(d,f);G(\"invalid\",d);break;case \"select\":d._wrapperState=\n{wasMultiple:!!f.multiple};G(\"invalid\",d);break;case \"textarea\":hb(d,f),G(\"invalid\",d)}vb(c,f);a=null;for(var g in f)f.hasOwnProperty(g)&&(e=f[g],\"children\"===g?\"string\"===typeof e?d.textContent!==e&&(a=[\"children\",e]):\"number\"===typeof e&&d.textContent!==\"\"+e&&(a=[\"children\",\"\"+e]):ca.hasOwnProperty(g)&&null!=e&&\"onScroll\"===g&&G(\"scroll\",d));switch(c){case \"input\":Va(d);cb(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=\njf)}d=a;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;a===kb.html&&(a=lb(c));a===kb.html?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[wf]=b;a[xf]=d;Bi(a,b,!1,!1);b.stateNode=a;g=wb(c,d);switch(c){case \"dialog\":G(\"cancel\",a);G(\"close\",a);\ne=d;break;case \"iframe\":case \"object\":case \"embed\":G(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<Xe.length;e++)G(Xe[e],a);e=d;break;case \"source\":G(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":G(\"error\",a);G(\"load\",a);e=d;break;case \"details\":G(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);G(\"invalid\",a);break;case \"option\":e=eb(a,d);break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=m({},d,{value:void 0});G(\"invalid\",a);break;case \"textarea\":hb(a,d);e=\ngb(a,d);G(\"invalid\",a);break;default:e=d}vb(c,e);var h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?tb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&ob(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==c||\"\"!==k)&&pb(a,k):\"number\"===typeof k&&pb(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ca.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&G(\"scroll\",a):null!=k&&qa(a,f,k,g))}switch(c){case \"input\":Va(a);cb(a,d,!1);\nbreak;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=jf)}mf(c,d)&&(b.flags|=4)}null!==b.ref&&(b.flags|=128)}return null;case 6:if(a&&null!=b.stateNode)Ei(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(y(166));\nc=dh(ch.current);dh(ah.current);rh(b)?(d=b.stateNode,c=b.memoizedProps,d[wf]=b,d.nodeValue!==c&&(b.flags|=4)):(d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[wf]=b,b.stateNode=d)}return null;case 13:H(P);d=b.memoizedState;if(0!==(b.flags&64))return b.lanes=c,b;d=null!==d;c=!1;null===a?void 0!==b.memoizedProps.fallback&&rh(b):c=null!==a.memoizedState;if(d&&!c&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(P.current&1))0===V&&(V=3);else{if(0===V||3===V)V=\n4;null===U||0===(Dg&134217727)&&0===(Hi&134217727)||Ii(U,W)}if(d||c)b.flags|=4;return null;case 4:return fh(),Ci(b),null===a&&cf(b.stateNode.containerInfo),null;case 10:return rg(b),null;case 17:return Ff(b.type)&&Gf(),null;case 19:H(P);d=b.memoizedState;if(null===d)return null;f=0!==(b.flags&64);g=d.rendering;if(null===g)if(f)Fi(d,!1);else{if(0!==V||null!==a&&0!==(a.flags&64))for(a=b.child;null!==a;){g=ih(a);if(null!==g){b.flags|=64;Fi(d,!1);f=g.updateQueue;null!==f&&(b.updateQueue=f,b.flags|=4);\nnull===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=2,f.nextEffect=null,f.firstEffect=null,f.lastEffect=null,g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,\nf.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;I(P,P.current&1|2);return b.child}a=a.sibling}null!==d.tail&&O()>Ji&&(b.flags|=64,f=!0,Fi(d,!1),b.lanes=33554432)}else{if(!f)if(a=ih(g),null!==a){if(b.flags|=64,f=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Fi(d,!0),null===d.tail&&\"hidden\"===d.tailMode&&!g.alternate&&!lh)return b=b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*O()-d.renderingStartTime>Ji&&1073741824!==c&&(b.flags|=\n64,f=!0,Fi(d,!1),b.lanes=33554432);d.isBackwards?(g.sibling=b.child,b.child=g):(c=d.last,null!==c?c.sibling=g:b.child=g,d.last=g)}return null!==d.tail?(c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=O(),c.sibling=null,b=P.current,I(P,f?b&1|2:b&1),c):null;case 23:case 24:return Ki(),null!==a&&null!==a.memoizedState!==(null!==b.memoizedState)&&\"unstable-defer-without-hiding\"!==d.mode&&(b.flags|=4),null}throw Error(y(156,b.tag));}\nfunction Li(a){switch(a.tag){case 1:Ff(a.type)&&Gf();var b=a.flags;return b&4096?(a.flags=b&-4097|64,a):null;case 3:fh();H(N);H(M);uh();b=a.flags;if(0!==(b&64))throw Error(y(285));a.flags=b&-4097|64;return a;case 5:return hh(a),null;case 13:return H(P),b=a.flags,b&4096?(a.flags=b&-4097|64,a):null;case 19:return H(P),null;case 4:return fh(),null;case 10:return rg(a),null;case 23:case 24:return Ki(),null;default:return null}}\nfunction Mi(a,b){try{var c=\"\",d=b;do c+=Qa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e}}function Ni(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Oi=\"function\"===typeof WeakMap?WeakMap:Map;function Pi(a,b,c){c=zg(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qi||(Qi=!0,Ri=d);Ni(a,b)};return c}\nfunction Si(a,b,c){c=zg(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){Ni(a,b);return d(e)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){\"function\"!==typeof d&&(null===Ti?Ti=new Set([this]):Ti.add(this),Ni(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}var Ui=\"function\"===typeof WeakSet?WeakSet:Set;\nfunction Vi(a){var b=a.ref;if(null!==b)if(\"function\"===typeof b)try{b(null)}catch(c){Wi(a,c)}else b.current=null}function Xi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.flags&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:lg(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:b.flags&256&&qf(b.stateNode.containerInfo);return;case 5:case 6:case 4:case 17:return}throw Error(y(163));}\nfunction Yi(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{if(3===(a.tag&3)){var d=a.create;a.destroy=d()}a=a.next}while(a!==b)}b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{var e=a;d=e.next;e=e.tag;0!==(e&4)&&0!==(e&1)&&(Zi(c,a),$i(c,a));a=d}while(a!==b)}return;case 1:a=c.stateNode;c.flags&4&&(null===b?a.componentDidMount():(d=c.elementType===c.type?b.memoizedProps:lg(c.type,b.memoizedProps),a.componentDidUpdate(d,\nb.memoizedState,a.__reactInternalSnapshotBeforeUpdate)));b=c.updateQueue;null!==b&&Eg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Eg(c,b,a)}return;case 5:a=c.stateNode;null===b&&c.flags&4&&mf(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Cc(c))));\nreturn;case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(y(163));}\nfunction aj(a,b){for(var c=a;;){if(5===c.tag){var d=c.stateNode;if(b)d=d.style,\"function\"===typeof d.setProperty?d.setProperty(\"display\",\"none\",\"important\"):d.display=\"none\";else{d=c.stateNode;var e=c.memoizedProps.style;e=void 0!==e&&null!==e&&e.hasOwnProperty(\"display\")?e.display:null;d.style.display=sb(\"display\",e)}}else if(6===c.tag)c.stateNode.nodeValue=b?\"\":c.memoizedProps;else if((23!==c.tag&&24!==c.tag||null===c.memoizedState||c===a)&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===\na)break;for(;null===c.sibling;){if(null===c.return||c.return===a)return;c=c.return}c.sibling.return=c.return;c=c.sibling}}\nfunction bj(a,b){if(Mf&&\"function\"===typeof Mf.onCommitFiberUnmount)try{Mf.onCommitFiberUnmount(Lf,b)}catch(f){}switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var c=a=a.next;do{var d=c,e=d.destroy;d=d.tag;if(void 0!==e)if(0!==(d&4))Zi(b,c);else{d=b;try{e()}catch(f){Wi(d,f)}}c=c.next}while(c!==a)}break;case 1:Vi(b);a=b.stateNode;if(\"function\"===typeof a.componentWillUnmount)try{a.props=b.memoizedProps,a.state=b.memoizedState,a.componentWillUnmount()}catch(f){Wi(b,\nf)}break;case 5:Vi(b);break;case 4:cj(a,b)}}function dj(a){a.alternate=null;a.child=null;a.dependencies=null;a.firstEffect=null;a.lastEffect=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.return=null;a.updateQueue=null}function ej(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction fj(a){a:{for(var b=a.return;null!==b;){if(ej(b))break a;b=b.return}throw Error(y(160));}var c=b;b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(y(161));}c.flags&16&&(pb(b,\"\"),c.flags&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||ej(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.flags&2)continue b;if(null===\nc.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.flags&2)){c=c.stateNode;break a}}d?gj(a,c,b):hj(a,c,b)}\nfunction gj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=jf));else if(4!==d&&(a=a.child,null!==a))for(gj(a,b,c),a=a.sibling;null!==a;)gj(a,b,c),a=a.sibling}\nfunction hj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(hj(a,b,c),a=a.sibling;null!==a;)hj(a,b,c),a=a.sibling}\nfunction cj(a,b){for(var c=b,d=!1,e,f;;){if(!d){d=c.return;a:for(;;){if(null===d)throw Error(y(160));e=d.stateNode;switch(d.tag){case 5:f=!1;break a;case 3:e=e.containerInfo;f=!0;break a;case 4:e=e.containerInfo;f=!0;break a}d=d.return}d=!0}if(5===c.tag||6===c.tag){a:for(var g=a,h=c,k=h;;)if(bj(g,k),null!==k.child&&4!==k.tag)k.child.return=k,k=k.child;else{if(k===h)break a;for(;null===k.sibling;){if(null===k.return||k.return===h)break a;k=k.return}k.sibling.return=k.return;k=k.sibling}f?(g=e,h=c.stateNode,\n8===g.nodeType?g.parentNode.removeChild(h):g.removeChild(h)):e.removeChild(c.stateNode)}else if(4===c.tag){if(null!==c.child){e=c.stateNode.containerInfo;f=!0;c.child.return=c;c=c.child;continue}}else if(bj(a,c),null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;4===c.tag&&(d=!1)}c.sibling.return=c.return;c=c.sibling}}\nfunction ij(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:var c=b.updateQueue;c=null!==c?c.lastEffect:null;if(null!==c){var d=c=c.next;do 3===(d.tag&3)&&(a=d.destroy,d.destroy=void 0,void 0!==a&&a()),d=d.next;while(d!==c)}return;case 1:return;case 5:c=b.stateNode;if(null!=c){d=b.memoizedProps;var e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[xf]=d;\"input\"===a&&\"radio\"===d.type&&null!=d.name&&$a(c,d);wb(a,e);b=wb(a,d);for(e=0;e<f.length;e+=\n2){var g=f[e],h=f[e+1];\"style\"===g?tb(c,h):\"dangerouslySetInnerHTML\"===g?ob(c,h):\"children\"===g?pb(c,h):qa(c,g,h,b)}switch(a){case \"input\":ab(c,d);break;case \"textarea\":ib(c,d);break;case \"select\":a=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,f=d.value,null!=f?fb(c,!!d.multiple,f,!1):a!==!!d.multiple&&(null!=d.defaultValue?fb(c,!!d.multiple,d.defaultValue,!0):fb(c,!!d.multiple,d.multiple?[]:\"\",!1))}}}return;case 6:if(null===b.stateNode)throw Error(y(162));b.stateNode.nodeValue=\nb.memoizedProps;return;case 3:c=b.stateNode;c.hydrate&&(c.hydrate=!1,Cc(c.containerInfo));return;case 12:return;case 13:null!==b.memoizedState&&(jj=O(),aj(b.child,!0));kj(b);return;case 19:kj(b);return;case 17:return;case 23:case 24:aj(b,null!==b.memoizedState);return}throw Error(y(163));}function kj(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Ui);b.forEach(function(b){var d=lj.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction mj(a,b){return null!==a&&(a=a.memoizedState,null===a||null!==a.dehydrated)?(b=b.memoizedState,null!==b&&null===b.dehydrated):!1}var nj=Math.ceil,oj=ra.ReactCurrentDispatcher,pj=ra.ReactCurrentOwner,X=0,U=null,Y=null,W=0,qj=0,rj=Bf(0),V=0,sj=null,tj=0,Dg=0,Hi=0,uj=0,vj=null,jj=0,Ji=Infinity;function wj(){Ji=O()+500}var Z=null,Qi=!1,Ri=null,Ti=null,xj=!1,yj=null,zj=90,Aj=[],Bj=[],Cj=null,Dj=0,Ej=null,Fj=-1,Gj=0,Hj=0,Ij=null,Jj=!1;function Hg(){return 0!==(X&48)?O():-1!==Fj?Fj:Fj=O()}\nfunction Ig(a){a=a.mode;if(0===(a&2))return 1;if(0===(a&4))return 99===eg()?1:2;0===Gj&&(Gj=tj);if(0!==kg.transition){0!==Hj&&(Hj=null!==vj?vj.pendingLanes:0);a=Gj;var b=4186112&~Hj;b&=-b;0===b&&(a=4186112&~a,b=a&-a,0===b&&(b=8192));return b}a=eg();0!==(X&4)&&98===a?a=Xc(12,Gj):(a=Sc(a),a=Xc(a,Gj));return a}\nfunction Jg(a,b,c){if(50<Dj)throw Dj=0,Ej=null,Error(y(185));a=Kj(a,b);if(null===a)return null;$c(a,b,c);a===U&&(Hi|=b,4===V&&Ii(a,W));var d=eg();1===b?0!==(X&8)&&0===(X&48)?Lj(a):(Mj(a,c),0===X&&(wj(),ig())):(0===(X&4)||98!==d&&99!==d||(null===Cj?Cj=new Set([a]):Cj.add(a)),Mj(a,c));vj=a}function Kj(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}\nfunction Mj(a,b){for(var c=a.callbackNode,d=a.suspendedLanes,e=a.pingedLanes,f=a.expirationTimes,g=a.pendingLanes;0<g;){var h=31-Vc(g),k=1<<h,l=f[h];if(-1===l){if(0===(k&d)||0!==(k&e)){l=b;Rc(k);var n=F;f[h]=10<=n?l+250:6<=n?l+5E3:-1}}else l<=b&&(a.expiredLanes|=k);g&=~k}d=Uc(a,a===U?W:0);b=F;if(0===d)null!==c&&(c!==Zf&&Pf(c),a.callbackNode=null,a.callbackPriority=0);else{if(null!==c){if(a.callbackPriority===b)return;c!==Zf&&Pf(c)}15===b?(c=Lj.bind(null,a),null===ag?(ag=[c],bg=Of(Uf,jg)):ag.push(c),\nc=Zf):14===b?c=hg(99,Lj.bind(null,a)):(c=Tc(b),c=hg(c,Nj.bind(null,a)));a.callbackPriority=b;a.callbackNode=c}}\nfunction Nj(a){Fj=-1;Hj=Gj=0;if(0!==(X&48))throw Error(y(327));var b=a.callbackNode;if(Oj()&&a.callbackNode!==b)return null;var c=Uc(a,a===U?W:0);if(0===c)return null;var d=c;var e=X;X|=16;var f=Pj();if(U!==a||W!==d)wj(),Qj(a,d);do try{Rj();break}catch(h){Sj(a,h)}while(1);qg();oj.current=f;X=e;null!==Y?d=0:(U=null,W=0,d=V);if(0!==(tj&Hi))Qj(a,0);else if(0!==d){2===d&&(X|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),c=Wc(a),0!==c&&(d=Tj(a,c)));if(1===d)throw b=sj,Qj(a,0),Ii(a,c),Mj(a,O()),b;a.finishedWork=\na.current.alternate;a.finishedLanes=c;switch(d){case 0:case 1:throw Error(y(345));case 2:Uj(a);break;case 3:Ii(a,c);if((c&62914560)===c&&(d=jj+500-O(),10<d)){if(0!==Uc(a,0))break;e=a.suspendedLanes;if((e&c)!==c){Hg();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=of(Uj.bind(null,a),d);break}Uj(a);break;case 4:Ii(a,c);if((c&4186112)===c)break;d=a.eventTimes;for(e=-1;0<c;){var g=31-Vc(c);f=1<<g;g=d[g];g>e&&(e=g);c&=~f}c=e;c=O()-c;c=(120>c?120:480>c?480:1080>c?1080:1920>c?1920:3E3>c?3E3:4320>\nc?4320:1960*nj(c/1960))-c;if(10<c){a.timeoutHandle=of(Uj.bind(null,a),c);break}Uj(a);break;case 5:Uj(a);break;default:throw Error(y(329));}}Mj(a,O());return a.callbackNode===b?Nj.bind(null,a):null}function Ii(a,b){b&=~uj;b&=~Hi;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-Vc(b),d=1<<c;a[c]=-1;b&=~d}}\nfunction Lj(a){if(0!==(X&48))throw Error(y(327));Oj();if(a===U&&0!==(a.expiredLanes&W)){var b=W;var c=Tj(a,b);0!==(tj&Hi)&&(b=Uc(a,b),c=Tj(a,b))}else b=Uc(a,0),c=Tj(a,b);0!==a.tag&&2===c&&(X|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),b=Wc(a),0!==b&&(c=Tj(a,b)));if(1===c)throw c=sj,Qj(a,0),Ii(a,b),Mj(a,O()),c;a.finishedWork=a.current.alternate;a.finishedLanes=b;Uj(a);Mj(a,O());return null}\nfunction Vj(){if(null!==Cj){var a=Cj;Cj=null;a.forEach(function(a){a.expiredLanes|=24&a.pendingLanes;Mj(a,O())})}ig()}function Wj(a,b){var c=X;X|=1;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}}function Xj(a,b){var c=X;X&=-2;X|=8;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}}function ni(a,b){I(rj,qj);qj|=b;tj|=b}function Ki(){qj=rj.current;H(rj)}\nfunction Qj(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,pf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Gf();break;case 3:fh();H(N);H(M);uh();break;case 5:hh(d);break;case 4:fh();break;case 13:H(P);break;case 19:H(P);break;case 10:rg(d);break;case 23:case 24:Ki()}c=c.return}U=a;Y=Tg(a.current,null);W=qj=tj=b;V=0;sj=null;uj=Hi=Dg=0}\nfunction Sj(a,b){do{var c=Y;try{qg();vh.current=Gh;if(yh){for(var d=R.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}yh=!1}xh=0;T=S=R=null;zh=!1;pj.current=null;if(null===c||null===c.return){V=1;sj=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=W;h.flags|=2048;h.firstEffect=h.lastEffect=null;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k;if(0===(h.mode&2)){var n=h.alternate;n?(h.updateQueue=n.updateQueue,h.memoizedState=n.memoizedState,h.lanes=n.lanes):\n(h.updateQueue=null,h.memoizedState=null)}var A=0!==(P.current&1),p=g;do{var C;if(C=13===p.tag){var x=p.memoizedState;if(null!==x)C=null!==x.dehydrated?!0:!1;else{var w=p.memoizedProps;C=void 0===w.fallback?!1:!0!==w.unstable_avoidThisFallback?!0:A?!1:!0}}if(C){var z=p.updateQueue;if(null===z){var u=new Set;u.add(l);p.updateQueue=u}else z.add(l);if(0===(p.mode&2)){p.flags|=64;h.flags|=16384;h.flags&=-2981;if(1===h.tag)if(null===h.alternate)h.tag=17;else{var t=zg(-1,1);t.tag=2;Ag(h,t)}h.lanes|=1;break a}k=\nvoid 0;h=b;var q=f.pingCache;null===q?(q=f.pingCache=new Oi,k=new Set,q.set(l,k)):(k=q.get(l),void 0===k&&(k=new Set,q.set(l,k)));if(!k.has(h)){k.add(h);var v=Yj.bind(null,f,l,h);l.then(v,v)}p.flags|=4096;p.lanes=b;break a}p=p.return}while(null!==p);k=Error((Ra(h.type)||\"A React component\")+\" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.\")}5!==V&&(V=2);k=Mi(k,h);p=\ng;do{switch(p.tag){case 3:f=k;p.flags|=4096;b&=-b;p.lanes|=b;var J=Pi(p,f,b);Bg(p,J);break a;case 1:f=k;var K=p.type,Q=p.stateNode;if(0===(p.flags&64)&&(\"function\"===typeof K.getDerivedStateFromError||null!==Q&&\"function\"===typeof Q.componentDidCatch&&(null===Ti||!Ti.has(Q)))){p.flags|=4096;b&=-b;p.lanes|=b;var L=Si(p,f,b);Bg(p,L);break a}}p=p.return}while(null!==p)}Zj(c)}catch(va){b=va;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}\nfunction Pj(){var a=oj.current;oj.current=Gh;return null===a?Gh:a}function Tj(a,b){var c=X;X|=16;var d=Pj();U===a&&W===b||Qj(a,b);do try{ak();break}catch(e){Sj(a,e)}while(1);qg();X=c;oj.current=d;if(null!==Y)throw Error(y(261));U=null;W=0;return V}function ak(){for(;null!==Y;)bk(Y)}function Rj(){for(;null!==Y&&!Qf();)bk(Y)}function bk(a){var b=ck(a.alternate,a,qj);a.memoizedProps=a.pendingProps;null===b?Zj(a):Y=b;pj.current=null}\nfunction Zj(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&2048)){c=Gi(c,b,qj);if(null!==c){Y=c;return}c=b;if(24!==c.tag&&23!==c.tag||null===c.memoizedState||0!==(qj&1073741824)||0===(c.mode&4)){for(var d=0,e=c.child;null!==e;)d|=e.lanes|e.childLanes,e=e.sibling;c.childLanes=d}null!==a&&0===(a.flags&2048)&&(null===a.firstEffect&&(a.firstEffect=b.firstEffect),null!==b.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=b.firstEffect),a.lastEffect=b.lastEffect),1<b.flags&&(null!==\na.lastEffect?a.lastEffect.nextEffect=b:a.firstEffect=b,a.lastEffect=b))}else{c=Li(b);if(null!==c){c.flags&=2047;Y=c;return}null!==a&&(a.firstEffect=a.lastEffect=null,a.flags|=2048)}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===V&&(V=5)}function Uj(a){var b=eg();gg(99,dk.bind(null,a,b));return null}\nfunction dk(a,b){do Oj();while(null!==yj);if(0!==(X&48))throw Error(y(327));var c=a.finishedWork;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(y(177));a.callbackNode=null;var d=c.lanes|c.childLanes,e=d,f=a.pendingLanes&~e;a.pendingLanes=e;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=e;a.mutableReadLanes&=e;a.entangledLanes&=e;e=a.entanglements;for(var g=a.eventTimes,h=a.expirationTimes;0<f;){var k=31-Vc(f),l=1<<k;e[k]=0;g[k]=-1;h[k]=-1;f&=~l}null!==\nCj&&0===(d&24)&&Cj.has(a)&&Cj.delete(a);a===U&&(Y=U=null,W=0);1<c.flags?null!==c.lastEffect?(c.lastEffect.nextEffect=c,d=c.firstEffect):d=c:d=c.firstEffect;if(null!==d){e=X;X|=32;pj.current=null;kf=fd;g=Ne();if(Oe(g)){if(\"selectionStart\"in g)h={start:g.selectionStart,end:g.selectionEnd};else a:if(h=(h=g.ownerDocument)&&h.defaultView||window,(l=h.getSelection&&h.getSelection())&&0!==l.rangeCount){h=l.anchorNode;f=l.anchorOffset;k=l.focusNode;l=l.focusOffset;try{h.nodeType,k.nodeType}catch(va){h=null;\nbreak a}var n=0,A=-1,p=-1,C=0,x=0,w=g,z=null;b:for(;;){for(var u;;){w!==h||0!==f&&3!==w.nodeType||(A=n+f);w!==k||0!==l&&3!==w.nodeType||(p=n+l);3===w.nodeType&&(n+=w.nodeValue.length);if(null===(u=w.firstChild))break;z=w;w=u}for(;;){if(w===g)break b;z===h&&++C===f&&(A=n);z===k&&++x===l&&(p=n);if(null!==(u=w.nextSibling))break;w=z;z=w.parentNode}w=u}h=-1===A||-1===p?null:{start:A,end:p}}else h=null;h=h||{start:0,end:0}}else h=null;lf={focusedElem:g,selectionRange:h};fd=!1;Ij=null;Jj=!1;Z=d;do try{ek()}catch(va){if(null===\nZ)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);Ij=null;Z=d;do try{for(g=a;null!==Z;){var t=Z.flags;t&16&&pb(Z.stateNode,\"\");if(t&128){var q=Z.alternate;if(null!==q){var v=q.ref;null!==v&&(\"function\"===typeof v?v(null):v.current=null)}}switch(t&1038){case 2:fj(Z);Z.flags&=-3;break;case 6:fj(Z);Z.flags&=-3;ij(Z.alternate,Z);break;case 1024:Z.flags&=-1025;break;case 1028:Z.flags&=-1025;ij(Z.alternate,Z);break;case 4:ij(Z.alternate,Z);break;case 8:h=Z;cj(g,h);var J=h.alternate;dj(h);null!==\nJ&&dj(J)}Z=Z.nextEffect}}catch(va){if(null===Z)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);v=lf;q=Ne();t=v.focusedElem;g=v.selectionRange;if(q!==t&&t&&t.ownerDocument&&Me(t.ownerDocument.documentElement,t)){null!==g&&Oe(t)&&(q=g.start,v=g.end,void 0===v&&(v=q),\"selectionStart\"in t?(t.selectionStart=q,t.selectionEnd=Math.min(v,t.value.length)):(v=(q=t.ownerDocument||document)&&q.defaultView||window,v.getSelection&&(v=v.getSelection(),h=t.textContent.length,J=Math.min(g.start,h),g=void 0===\ng.end?J:Math.min(g.end,h),!v.extend&&J>g&&(h=g,g=J,J=h),h=Le(t,J),f=Le(t,g),h&&f&&(1!==v.rangeCount||v.anchorNode!==h.node||v.anchorOffset!==h.offset||v.focusNode!==f.node||v.focusOffset!==f.offset)&&(q=q.createRange(),q.setStart(h.node,h.offset),v.removeAllRanges(),J>g?(v.addRange(q),v.extend(f.node,f.offset)):(q.setEnd(f.node,f.offset),v.addRange(q))))));q=[];for(v=t;v=v.parentNode;)1===v.nodeType&&q.push({element:v,left:v.scrollLeft,top:v.scrollTop});\"function\"===typeof t.focus&&t.focus();for(t=\n0;t<q.length;t++)v=q[t],v.element.scrollLeft=v.left,v.element.scrollTop=v.top}fd=!!kf;lf=kf=null;a.current=c;Z=d;do try{for(t=a;null!==Z;){var K=Z.flags;K&36&&Yi(t,Z.alternate,Z);if(K&128){q=void 0;var Q=Z.ref;if(null!==Q){var L=Z.stateNode;switch(Z.tag){case 5:q=L;break;default:q=L}\"function\"===typeof Q?Q(q):Q.current=q}}Z=Z.nextEffect}}catch(va){if(null===Z)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);Z=null;$f();X=e}else a.current=c;if(xj)xj=!1,yj=a,zj=b;else for(Z=d;null!==Z;)b=\nZ.nextEffect,Z.nextEffect=null,Z.flags&8&&(K=Z,K.sibling=null,K.stateNode=null),Z=b;d=a.pendingLanes;0===d&&(Ti=null);1===d?a===Ej?Dj++:(Dj=0,Ej=a):Dj=0;c=c.stateNode;if(Mf&&\"function\"===typeof Mf.onCommitFiberRoot)try{Mf.onCommitFiberRoot(Lf,c,void 0,64===(c.current.flags&64))}catch(va){}Mj(a,O());if(Qi)throw Qi=!1,a=Ri,Ri=null,a;if(0!==(X&8))return null;ig();return null}\nfunction ek(){for(;null!==Z;){var a=Z.alternate;Jj||null===Ij||(0!==(Z.flags&8)?dc(Z,Ij)&&(Jj=!0):13===Z.tag&&mj(a,Z)&&dc(Z,Ij)&&(Jj=!0));var b=Z.flags;0!==(b&256)&&Xi(a,Z);0===(b&512)||xj||(xj=!0,hg(97,function(){Oj();return null}));Z=Z.nextEffect}}function Oj(){if(90!==zj){var a=97<zj?97:zj;zj=90;return gg(a,fk)}return!1}function $i(a,b){Aj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}))}function Zi(a,b){Bj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}))}\nfunction fk(){if(null===yj)return!1;var a=yj;yj=null;if(0!==(X&48))throw Error(y(331));var b=X;X|=32;var c=Bj;Bj=[];for(var d=0;d<c.length;d+=2){var e=c[d],f=c[d+1],g=e.destroy;e.destroy=void 0;if(\"function\"===typeof g)try{g()}catch(k){if(null===f)throw Error(y(330));Wi(f,k)}}c=Aj;Aj=[];for(d=0;d<c.length;d+=2){e=c[d];f=c[d+1];try{var h=e.create;e.destroy=h()}catch(k){if(null===f)throw Error(y(330));Wi(f,k)}}for(h=a.current.firstEffect;null!==h;)a=h.nextEffect,h.nextEffect=null,h.flags&8&&(h.sibling=\nnull,h.stateNode=null),h=a;X=b;ig();return!0}function gk(a,b,c){b=Mi(c,b);b=Pi(a,b,1);Ag(a,b);b=Hg();a=Kj(a,1);null!==a&&($c(a,1,b),Mj(a,b))}\nfunction Wi(a,b){if(3===a.tag)gk(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){gk(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if(\"function\"===typeof c.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d))){a=Mi(b,a);var e=Si(c,a,1);Ag(c,e);e=Hg();c=Kj(c,1);if(null!==c)$c(c,1,e),Mj(c,e);else if(\"function\"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d)))try{d.componentDidCatch(b,a)}catch(f){}break}}c=c.return}}\nfunction Yj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=Hg();a.pingedLanes|=a.suspendedLanes&c;U===a&&(W&c)===c&&(4===V||3===V&&(W&62914560)===W&&500>O()-jj?Qj(a,0):uj|=c);Mj(a,b)}function lj(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=a.mode,0===(b&2)?b=1:0===(b&4)?b=99===eg()?1:2:(0===Gj&&(Gj=tj),b=Yc(62914560&~Gj),0===b&&(b=4194304)));c=Hg();a=Kj(a,b);null!==a&&($c(a,b,c),Mj(a,c))}var ck;\nck=function(a,b,c){var d=b.lanes;if(null!==a)if(a.memoizedProps!==b.pendingProps||N.current)ug=!0;else if(0!==(c&d))ug=0!==(a.flags&16384)?!0:!1;else{ug=!1;switch(b.tag){case 3:ri(b);sh();break;case 5:gh(b);break;case 1:Ff(b.type)&&Jf(b);break;case 4:eh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;var e=b.type._context;I(mg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){if(0!==(c&b.child.childLanes))return ti(a,b,c);I(P,P.current&1);b=hi(a,b,c);return null!==\nb?b.sibling:null}I(P,P.current&1);break;case 19:d=0!==(c&b.childLanes);if(0!==(a.flags&64)){if(d)return Ai(a,b,c);b.flags|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);I(P,P.current);if(d)break;else return null;case 23:case 24:return b.lanes=0,mi(a,b,c)}return hi(a,b,c)}else ug=!1;b.lanes=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);a=b.pendingProps;e=Ef(b,M.current);tg(b,c);e=Ch(null,b,d,a,e,c);b.flags|=1;if(\"object\"===\ntypeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(Ff(d)){var f=!0;Jf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;xg(b);var g=d.getDerivedStateFromProps;\"function\"===typeof g&&Gg(b,d,g,a);e.updater=Kg;b.stateNode=e;e._reactInternals=b;Og(b,d,a,c);b=qi(null,b,d,!0,f,c)}else b.tag=0,fi(null,b,e,c),b=b.child;return b;case 16:e=b.elementType;a:{null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);\na=b.pendingProps;f=e._init;e=f(e._payload);b.type=e;f=b.tag=hk(e);a=lg(e,a);switch(f){case 0:b=li(null,b,e,a,c);break a;case 1:b=pi(null,b,e,a,c);break a;case 11:b=gi(null,b,e,a,c);break a;case 14:b=ii(null,b,e,lg(e.type,a),d,c);break a}throw Error(y(306,e,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),li(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),pi(a,b,d,e,c);case 3:ri(b);d=b.updateQueue;if(null===a||null===d)throw Error(y(282));\nd=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;yg(a,b);Cg(b,d,null,c);d=b.memoizedState.element;if(d===e)sh(),b=hi(a,b,c);else{e=b.stateNode;if(f=e.hydrate)kh=rf(b.stateNode.containerInfo.firstChild),jh=b,f=lh=!0;if(f){a=e.mutableSourceEagerHydrationData;if(null!=a)for(e=0;e<a.length;e+=2)f=a[e],f._workInProgressVersionPrimary=a[e+1],th.push(f);c=Zg(b,null,d,c);for(b.child=c;c;)c.flags=c.flags&-3|1024,c=c.sibling}else fi(a,b,d,c),sh();b=b.child}return b;case 5:return gh(b),null===a&&\nph(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,nf(d,e)?g=null:null!==f&&nf(d,f)&&(b.flags|=16),oi(a,b),fi(a,b,g,c),b.child;case 6:return null===a&&ph(b),null;case 13:return ti(a,b,c);case 4:return eh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Yg(b,null,d,c):fi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),gi(a,b,d,e,c);case 7:return fi(a,b,b.pendingProps,c),b.child;case 8:return fi(a,b,b.pendingProps.children,\nc),b.child;case 12:return fi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(mg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=He(h,f)?0:(\"function\"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!N.current){b=hi(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==k){g=h.child;for(var l=\nk.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=zg(-1,c&-c),l.tag=2,Ag(h,l));h.lanes|=c;l=h.alternate;null!==l&&(l.lanes|=c);sg(h.return,c);k.lanes|=c;break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=g}fi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,tg(b,c),e=vg(e,\nf.unstable_observedBits),d=d(e),b.flags|=1,fi(a,b,d,c),b.child;case 14:return e=b.type,f=lg(e,b.pendingProps),f=lg(e.type,f),ii(a,b,e,f,d,c);case 15:return ki(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),b.tag=1,Ff(d)?(a=!0,Jf(b)):a=!1,tg(b,c),Mg(b,d,e),Og(b,d,e,c),qi(null,b,d,!0,a,c);case 19:return Ai(a,b,c);case 23:return mi(a,b,c);case 24:return mi(a,b,c)}throw Error(y(156,b.tag));\n};function ik(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.flags=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childLanes=this.lanes=0;this.alternate=null}function nh(a,b,c,d){return new ik(a,b,c,d)}function ji(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction hk(a){if(\"function\"===typeof a)return ji(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Aa)return 11;if(a===Da)return 14}return 2}\nfunction Tg(a,b){var c=a.alternate;null===c?(c=nh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction Vg(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)ji(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ua:return Xg(c.children,e,f,b);case Ha:g=8;e|=16;break;case wa:g=8;e|=1;break;case xa:return a=nh(12,c,b,e|8),a.elementType=xa,a.type=xa,a.lanes=f,a;case Ba:return a=nh(13,c,b,e),a.type=Ba,a.elementType=Ba,a.lanes=f,a;case Ca:return a=nh(19,c,b,e),a.elementType=Ca,a.lanes=f,a;case Ia:return vi(c,e,f,b);case Ja:return a=nh(24,c,b,e),a.elementType=Ja,a.lanes=f,a;default:if(\"object\"===\ntypeof a&&null!==a)switch(a.$$typeof){case ya:g=10;break a;case za:g=9;break a;case Aa:g=11;break a;case Da:g=14;break a;case Ea:g=16;d=null;break a;case Fa:g=22;break a}throw Error(y(130,null==a?a:typeof a,\"\"));}b=nh(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Xg(a,b,c,d){a=nh(7,a,d,b);a.lanes=c;return a}function vi(a,b,c,d){a=nh(23,a,d,b);a.elementType=Ia;a.lanes=c;return a}function Ug(a,b,c){a=nh(6,a,null,b);a.lanes=c;return a}\nfunction Wg(a,b,c){b=nh(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction jk(a,b,c){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=0;this.eventTimes=Zc(0);this.expirationTimes=Zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=Zc(0);this.mutableSourceEagerHydrationData=null}\nfunction kk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ta,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction lk(a,b,c,d){var e=b.current,f=Hg(),g=Ig(e);a:if(c){c=c._reactInternals;b:{if(Zb(c)!==c||1!==c.tag)throw Error(y(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(Ff(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(y(171));}if(1===c.tag){var k=c.type;if(Ff(k)){c=If(c,k,h);break a}}c=h}else c=Cf;null===b.context?b.context=c:b.pendingContext=c;b=zg(f,g);b.payload={element:a};d=void 0===d?null:d;null!==\nd&&(b.callback=d);Ag(e,b);Jg(e,g,f);return g}function mk(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function nk(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function ok(a,b){nk(a,b);(a=a.alternate)&&nk(a,b)}function pk(){return null}\nfunction qk(a,b,c){var d=null!=c&&null!=c.hydrationOptions&&c.hydrationOptions.mutableSources||null;c=new jk(a,b,null!=c&&!0===c.hydrate);b=nh(3,null,null,2===b?7:1===b?3:0);c.current=b;b.stateNode=c;xg(b);a[ff]=c.current;cf(8===a.nodeType?a.parentNode:a);if(d)for(a=0;a<d.length;a++){b=d[a];var e=b._getVersion;e=e(b._source);null==c.mutableSourceEagerHydrationData?c.mutableSourceEagerHydrationData=[b,e]:c.mutableSourceEagerHydrationData.push(b,e)}this._internalRoot=c}\nqk.prototype.render=function(a){lk(a,this._internalRoot,null,null)};qk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;lk(null,a,null,function(){b[ff]=null})};function rk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}\nfunction sk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute(\"data-reactroot\")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new qk(a,0,b?{hydrate:!0}:void 0)}\nfunction tk(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if(\"function\"===typeof e){var h=e;e=function(){var a=mk(g);h.call(a)}}lk(b,g,a,e)}else{f=c._reactRootContainer=sk(c,d);g=f._internalRoot;if(\"function\"===typeof e){var k=e;e=function(){var a=mk(g);k.call(a)}}Xj(function(){lk(b,g,a,e)})}return mk(g)}ec=function(a){if(13===a.tag){var b=Hg();Jg(a,4,b);ok(a,4)}};fc=function(a){if(13===a.tag){var b=Hg();Jg(a,67108864,b);ok(a,67108864)}};\ngc=function(a){if(13===a.tag){var b=Hg(),c=Ig(a);Jg(a,c,b);ok(a,c)}};hc=function(a,b){return b()};\nyb=function(a,b,c){switch(b){case \"input\":ab(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(y(90));Wa(d);ab(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Wj;\nHb=function(a,b,c,d,e){var f=X;X|=4;try{return gg(98,a.bind(null,b,c,d,e))}finally{X=f,0===X&&(wj(),ig())}};Ib=function(){0===(X&49)&&(Vj(),Oj())};Jb=function(a,b){var c=X;X|=2;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}};function uk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rk(b))throw Error(y(200));return kk(a,b,null,c)}var vk={Events:[Cb,ue,Db,Eb,Fb,Oj,{current:!1}]},wk={findFiberByHostInstance:wc,bundleType:0,version:\"17.0.2\",rendererPackageName:\"react-dom\"};\nvar xk={bundleType:wk.bundleType,version:wk.version,rendererPackageName:wk.rendererPackageName,rendererConfig:wk.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ra.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=cc(a);return null===a?null:a.stateNode},findFiberByHostInstance:wk.findFiberByHostInstance||\npk,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yk=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yk.isDisabled&&yk.supportsFiber)try{Lf=yk.inject(xk),Mf=yk}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=vk;exports.createPortal=uk;\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(y(188));throw Error(y(268,Object.keys(a)));}a=cc(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a,b){var c=X;if(0!==(c&48))return a(b);X|=1;try{if(a)return gg(99,a.bind(null,b))}finally{X=c,ig()}};exports.hydrate=function(a,b,c){if(!rk(b))throw Error(y(200));return tk(null,a,b,!0,c)};\nexports.render=function(a,b,c){if(!rk(b))throw Error(y(200));return tk(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!rk(a))throw Error(y(40));return a._reactRootContainer?(Xj(function(){tk(null,null,a,!1,function(){a._reactRootContainer=null;a[ff]=null})}),!0):!1};exports.unstable_batchedUpdates=Wj;exports.unstable_createPortal=function(a,b){return uk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!rk(c))throw Error(y(200));if(null==a||void 0===a._reactInternals)throw Error(y(38));return tk(a,b,c,!1,d)};exports.version=\"17.0.2\";\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","/** @license React v17.0.2\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';require(\"object-assign\");var f=require(\"react\"),g=60103;exports.Fragment=60107;if(\"function\"===typeof Symbol&&Symbol.for){var h=Symbol.for;g=h(\"react.element\");exports.Fragment=h(\"react.fragment\")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=\"\"+k);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;\n","/** @license React v17.0.2\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=require(\"object-assign\"),n=60103,p=60106;exports.Fragment=60107;exports.StrictMode=60108;exports.Profiler=60114;var q=60109,r=60110,t=60112;exports.Suspense=60113;var u=60115,v=60116;\nif(\"function\"===typeof Symbol&&Symbol.for){var w=Symbol.for;n=w(\"react.element\");p=w(\"react.portal\");exports.Fragment=w(\"react.fragment\");exports.StrictMode=w(\"react.strict_mode\");exports.Profiler=w(\"react.profiler\");q=w(\"react.provider\");r=w(\"react.context\");t=w(\"react.forward_ref\");exports.Suspense=w(\"react.suspense\");u=w(\"react.memo\");v=w(\"react.lazy\")}var x=\"function\"===typeof Symbol&&Symbol.iterator;\nfunction y(a){if(null===a||\"object\"!==typeof a)return null;a=x&&a[x]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}function z(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar A={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},B={};function C(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}C.prototype.isReactComponent={};C.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(z(85));this.updater.enqueueSetState(this,a,b,\"setState\")};C.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction D(){}D.prototype=C.prototype;function E(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}var F=E.prototype=new D;F.constructor=E;l(F,C.prototype);F.isPureReactComponent=!0;var G={current:null},H=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};\nfunction J(a,b,c){var e,d={},k=null,h=null;if(null!=b)for(e in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)H.call(b,e)&&!I.hasOwnProperty(e)&&(d[e]=b[e]);var g=arguments.length-2;if(1===g)d.children=c;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];d.children=f}if(a&&a.defaultProps)for(e in g=a.defaultProps,g)void 0===d[e]&&(d[e]=g[e]);return{$$typeof:n,type:a,key:k,ref:h,props:d,_owner:G.current}}\nfunction K(a,b){return{$$typeof:n,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function L(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===n}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var M=/\\/+/g;function N(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction O(a,b,c,e,d){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case n:case p:h=!0}}if(h)return h=a,d=d(h),a=\"\"===e?\".\"+N(h,0):e,Array.isArray(d)?(c=\"\",null!=a&&(c=a.replace(M,\"$&/\")+\"/\"),O(d,b,c,\"\",function(a){return a})):null!=d&&(L(d)&&(d=K(d,c+(!d.key||h&&h.key===d.key?\"\":(\"\"+d.key).replace(M,\"$&/\")+\"/\")+a)),b.push(d)),1;h=0;e=\"\"===e?\".\":e+\":\";if(Array.isArray(a))for(var g=\n0;g<a.length;g++){k=a[g];var f=e+N(k,g);h+=O(k,b,c,f,d)}else if(f=y(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=e+N(k,g++),h+=O(k,b,c,f,d);else if(\"object\"===k)throw b=\"\"+a,Error(z(31,\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b));return h}function P(a,b,c){if(null==a)return a;var e=[],d=0;O(a,e,\"\",\"\",function(a){return b.call(c,a,d++)});return e}\nfunction Q(a){if(-1===a._status){var b=a._result;b=b();a._status=0;a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}if(1===a._status)return a._result;throw a._result;}var R={current:null};function S(){var a=R.current;if(null===a)throw Error(z(321));return a}var T={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:G,IsSomeRendererActing:{current:!1},assign:l};\nexports.Children={map:P,forEach:function(a,b,c){P(a,function(){b.apply(this,arguments)},c)},count:function(a){var b=0;P(a,function(){b++});return b},toArray:function(a){return P(a,function(a){return a})||[]},only:function(a){if(!L(a))throw Error(z(143));return a}};exports.Component=C;exports.PureComponent=E;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(z(267,a));var e=l({},a.props),d=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=G.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)H.call(b,f)&&!I.hasOwnProperty(f)&&(e[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)e.children=c;else if(1<f){g=Array(f);for(var m=0;m<f;m++)g[m]=arguments[m+2];e.children=g}return{$$typeof:n,type:a.type,\nkey:d,ref:k,props:e,_owner:h}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:r,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:q,_context:a};return a.Consumer=a};exports.createElement=J;exports.createFactory=function(a){var b=J.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:t,render:a}};exports.isValidElement=L;\nexports.lazy=function(a){return{$$typeof:v,_payload:{_status:-1,_result:a},_init:Q}};exports.memo=function(a,b){return{$$typeof:u,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return S().useCallback(a,b)};exports.useContext=function(a,b){return S().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return S().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return S().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return S().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return S().useMemo(a,b)};exports.useReducer=function(a,b,c){return S().useReducer(a,b,c)};exports.useRef=function(a){return S().useRef(a)};exports.useState=function(a){return S().useState(a)};exports.version=\"17.0.2\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","/** @license React v0.20.2\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f,g,h,k;if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}\nif(\"undefined\"===typeof window||\"function\"!==typeof MessageChannel){var t=null,u=null,w=function(){if(null!==t)try{var a=exports.unstable_now();t(!0,a);t=null}catch(b){throw setTimeout(w,0),b;}};f=function(a){null!==t?setTimeout(f,0,a):(t=a,setTimeout(w,0))};g=function(a,b){u=setTimeout(a,b)};h=function(){clearTimeout(u)};exports.unstable_shouldYield=function(){return!1};k=exports.unstable_forceFrameRate=function(){}}else{var x=window.setTimeout,y=window.clearTimeout;if(\"undefined\"!==typeof console){var z=\nwindow.cancelAnimationFrame;\"function\"!==typeof window.requestAnimationFrame&&console.error(\"This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills\");\"function\"!==typeof z&&console.error(\"This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills\")}var A=!1,B=null,C=-1,D=5,E=0;exports.unstable_shouldYield=function(){return exports.unstable_now()>=\nE};k=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):D=0<a?Math.floor(1E3/a):5};var F=new MessageChannel,G=F.port2;F.port1.onmessage=function(){if(null!==B){var a=exports.unstable_now();E=a+D;try{B(!0,a)?G.postMessage(null):(A=!1,B=null)}catch(b){throw G.postMessage(null),b;}}else A=!1};f=function(a){B=a;A||(A=!0,G.postMessage(null))};g=function(a,b){C=\nx(function(){a(exports.unstable_now())},b)};h=function(){y(C);C=-1}}function H(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<I(e,b))a[d]=b,a[c]=e,c=d;else break a}}function J(a){a=a[0];return void 0===a?null:a}\nfunction K(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>I(n,c))void 0!==r&&0>I(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>I(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function I(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var L=[],M=[],N=1,O=null,P=3,Q=!1,R=!1,S=!1;\nfunction T(a){for(var b=J(M);null!==b;){if(null===b.callback)K(M);else if(b.startTime<=a)K(M),b.sortIndex=b.expirationTime,H(L,b);else break;b=J(M)}}function U(a){S=!1;T(a);if(!R)if(null!==J(L))R=!0,f(V);else{var b=J(M);null!==b&&g(U,b.startTime-a)}}\nfunction V(a,b){R=!1;S&&(S=!1,h());Q=!0;var c=P;try{T(b);for(O=J(L);null!==O&&(!(O.expirationTime>b)||a&&!exports.unstable_shouldYield());){var d=O.callback;if(\"function\"===typeof d){O.callback=null;P=O.priorityLevel;var e=d(O.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?O.callback=e:O===J(L)&&K(L);T(b)}else K(L);O=J(L)}if(null!==O)var m=!0;else{var n=J(M);null!==n&&g(U,n.startTime-b);m=!1}return m}finally{O=null,P=c,Q=!1}}var W=k;exports.unstable_IdlePriority=5;\nexports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){R||Q||(R=!0,f(V))};exports.unstable_getCurrentPriorityLevel=function(){return P};exports.unstable_getFirstCallbackNode=function(){return J(L)};\nexports.unstable_next=function(a){switch(P){case 1:case 2:case 3:var b=3;break;default:b=P}var c=P;P=b;try{return a()}finally{P=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=W;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=P;P=a;try{return b()}finally{P=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:N++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,H(M,a),null===J(L)&&a===J(M)&&(S?h():S=!0,g(U,c-d))):(a.sortIndex=e,H(L,a),R||Q||(R=!0,f(V)));return a};\nexports.unstable_wrapCallback=function(a){var b=P;return function(){var c=P;P=b;try{return a.apply(this,arguments)}finally{P=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(\n  condition: any,\n  message?: string | number,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nconst verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"] as const;\nexport type VerbosityLevel = (typeof verbosityLevels)[number];\nexport type ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(name: M) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      const method = console[name] || console.log;\n      return method.apply(console, arguments as any);\n    }\n  } as (typeof console)[M];\n}\n\nexport namespace invariant {\n  export const debug = wrapConsoleMethod(\"debug\");\n  export const log = wrapConsoleMethod(\"log\");\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\nexport default invariant;\n","export function maybe<T>(thunk: () => T): T | undefined {\n  try { return thunk() } catch {}\n}\n","import { maybe } from \"./maybe\";\n\ndeclare global {\n  // Despite our attempts to reuse the React Native __DEV__ constant instead of\n  // inventing something new and Apollo-specific, declaring a useful type for\n  // __DEV__ unfortunately conflicts (TS2451) with the global declaration in\n  // @types/react-native/index.d.ts.\n  //\n  // To hide that harmless conflict, we @ts-ignore this line, which should\n  // continue to provide a type for __DEV__ elsewhere in the Apollo Client\n  // codebase, even when @types/react-native is not in use.\n  //\n  // However, because TypeScript drops @ts-ignore comments when generating .d.ts\n  // files (https://github.com/microsoft/TypeScript/issues/38628), we also\n  // sanitize the dist/utilities/globals/global.d.ts file to avoid declaring\n  // __DEV__ globally altogether when @apollo/client is installed in the\n  // node_modules directory of an application.\n  //\n  // @ts-ignore\n  const __DEV__: boolean | undefined;\n}\n\nexport default (\n  maybe(() => globalThis) ||\n  maybe(() => window) ||\n  maybe(() => self) ||\n  maybe(() => global) ||\n  // We don't expect the Function constructor ever to be invoked at runtime, as\n  // long as at least one of globalThis, window, self, or global is defined, so\n  // we are under no obligation to make it easy for static analysis tools to\n  // detect syntactic usage of the Function constructor. If you think you can\n  // improve your static analysis to detect this obfuscation, think again. This\n  // is an arms race you cannot win, at least not in JavaScript.\n  maybe(function() { return maybe.constructor(\"return this\")() })\n) as typeof globalThis & {\n  __DEV__: typeof __DEV__;\n};\n","import global from \"./global\";\nimport { maybe } from \"./maybe\";\n\n// To keep string-based find/replace minifiers from messing with __DEV__ inside\n// string literals or properties like global.__DEV__, we construct the \"__DEV__\"\n// string in a roundabout way that won't be altered by find/replace strategies.\nconst __ = \"__\";\nconst GLOBAL_KEY = [__, __].join(\"DEV\");\n\nfunction getDEV() {\n  try {\n    return Boolean(__DEV__);\n  } catch {\n    Object.defineProperty(global, GLOBAL_KEY, {\n      // In a buildless browser environment, maybe(() => process.env.NODE_ENV)\n      // evaluates as undefined, so __DEV__ becomes true by default, but can be\n      // initialized to false instead by a script/module that runs earlier.\n      value: maybe(() => process.env.NODE_ENV) !== \"production\",\n      enumerable: false,\n      configurable: true,\n      writable: true,\n    });\n    // Using computed property access rather than global.__DEV__ here prevents\n    // string-based find/replace strategies from munging this to global.false:\n    return (global as any)[GLOBAL_KEY];\n  }\n}\n\nexport default getDEV();\n","function maybe(thunk) {\n  try { return thunk() } catch (_) {}\n}\n\nvar safeGlobal = (\n  maybe(function() { return globalThis }) ||\n  maybe(function() { return window }) ||\n  maybe(function() { return self }) ||\n  maybe(function() { return global }) ||\n  // We don't expect the Function constructor ever to be invoked at runtime, as\n  // long as at least one of globalThis, window, self, or global is defined, so\n  // we are under no obligation to make it easy for static analysis tools to\n  // detect syntactic usage of the Function constructor. If you think you can\n  // improve your static analysis to detect this obfuscation, think again. This\n  // is an arms race you cannot win, at least not in JavaScript.\n  maybe(function() { return maybe.constructor(\"return this\")() })\n);\n\nvar needToRemove = false;\n\nexport function install() {\n  if (safeGlobal &&\n      !maybe(function() { return process.env.NODE_ENV }) &&\n      !maybe(function() { return process })) {\n    Object.defineProperty(safeGlobal, \"process\", {\n      value: {\n        env: {\n          // This default needs to be \"production\" instead of \"development\", to\n          // avoid the problem https://github.com/graphql/graphql-js/pull/2894\n          // will eventually solve, once merged and released.\n          NODE_ENV: \"production\",\n        },\n      },\n      // Let anyone else change global.process as they see fit, but hide it from\n      // Object.keys(global) enumeration.\n      configurable: true,\n      enumerable: false,\n      writable: true,\n    });\n    needToRemove = true;\n  }\n}\n\n// Call install() at least once, when this module is imported.\ninstall();\n\nexport function remove() {\n  if (needToRemove) {\n    delete safeGlobal.process;\n    needToRemove = false;\n  }\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n","import { inspect } from './inspect.mjs';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 5 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  process.env.NODE_ENV === 'production'\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n","import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n","// The ordering of these imports is important, because it ensures the temporary\n// process.env.NODE_ENV polyfill is defined globally (if necessary) before we\n// import { Source } from 'graphql'. The instanceOf function that we really care\n// about (the one that uses process.env.NODE_ENV) is not exported from the\n// top-level graphql package, but graphql/language/source uses instanceOf, and\n// has relatively few dependencies, so importing it here should not increase\n// bundle sizes as much as other options.\nimport { remove } from 'ts-invariant/process';\nimport { Source } from 'graphql';\n\nexport function removeTemporaryGlobals() {\n  // Using Source here here just to make sure it won't be tree-shaken away.\n  return typeof Source === \"function\" ? remove() : remove();\n}\n","import { invariant, InvariantError } from \"ts-invariant\";\n\n// Just in case the graphql package switches from process.env.NODE_ENV to\n// __DEV__, make sure __DEV__ is polyfilled before importing graphql.\nimport DEV from \"./DEV\";\nexport { DEV }\nexport function checkDEV() {\n  invariant(\"boolean\" === typeof DEV, DEV);\n}\n\n// Import graphql/jsutils/instanceOf safely, working around its unchecked usage\n// of process.env.NODE_ENV and https://github.com/graphql/graphql-js/pull/2894.\nimport { removeTemporaryGlobals } from \"./fix-graphql\";\n\n// Synchronously undo the global process.env.NODE_ENV polyfill that we created\n// temporarily while importing the offending graphql/jsutils/instanceOf module.\nremoveTemporaryGlobals();\n\nexport { maybe } from \"./maybe\";\nexport { default as global } from \"./global\";\nexport { invariant, InvariantError }\n\n// Ensure __DEV__ was properly initialized, and prevent tree-shaking bundlers\n// from mistakenly pruning the ./DEV module (see issue #8674).\ncheckDEV();\n","export const canUseWeakMap = typeof WeakMap === 'function' && !(\n  typeof navigator === 'object' &&\n  navigator.product === 'ReactNative'\n);\n\nexport const canUseWeakSet = typeof WeakSet === 'function';\n\nexport const canUseSymbol =\n  typeof Symbol === 'function' &&\n  typeof Symbol.for === 'function';\n","import * as React from 'react';\nimport { ApolloClient } from '../../core';\nimport { canUseSymbol } from '../../utilities';\nimport type { RenderPromises } from '../ssr';\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: RenderPromises;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey = canUseSymbol\n  ? Symbol.for('__APOLLO_CONTEXT__')\n  : '__APOLLO_CONTEXT__';\n\nexport function getApolloContext(): React.Context<ApolloContextValue> {\n  let context = (React.createContext as any)[contextKey] as React.Context<ApolloContextValue>;\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: context = React.createContext<ApolloContextValue>({}),\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n    context.displayName = 'ApolloContext';\n  }\n  return context;\n}\n\nexport { getApolloContext as resetApolloContext }\n","import { invariant } from '../../utilities/globals';\n\nimport * as React from 'react';\n\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from './ApolloContext';\n\nexport interface ApolloProviderProps<TCache> {\n  client: ApolloClient<TCache>;\n  children: React.ReactNode | React.ReactNode[] | null;\n}\n\nexport const ApolloProvider: React.FC<ApolloProviderProps<any>> = ({\n  client,\n  children\n}) => {\n  const ApolloContext = getApolloContext();\n  return (\n    <ApolloContext.Consumer>\n      {(context: any = {}) => {\n        if (client && context.client !== client) {\n          context = Object.assign({}, context, { client });\n        }\n\n        invariant(\n          context.client,\n          'ApolloProvider was not passed a client instance. Make ' +\n            'sure you pass in your client via the \"client\" prop.'\n        );\n\n        return (\n          <ApolloContext.Provider value={context}>\n            {children}\n          </ApolloContext.Provider>\n        );\n      }}\n    </ApolloContext.Consumer>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { ReactiveVar } from '../../core';\n\nexport function useReactiveVar<T>(rv: ReactiveVar<T>): T {\n  const value = rv();\n\n  // We don't actually care what useState thinks the value of the variable\n  // is, so we take only the update function from the returned array.\n  const setValue = useState(value)[1];\n\n  // We subscribe to variable updates on initial mount and when the value has\n  // changed. This avoids a subtle bug in React.StrictMode where multiple\n  // listeners are added, leading to inconsistent updates.\n  useEffect(() => {\n    const probablySameValue = rv();\n    if (value !== probablySameValue) {\n      // If the value of rv has already changed, we don't need to listen for the\n      // next change, because we can report this change immediately.\n      setValue(probablySameValue);\n    } else {\n      return rv.onNextChange(setValue);\n    }\n  }, [value]);\n\n  return value;\n}\n","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// === Symbol Support ===\nvar hasSymbols = function () {\n  return typeof Symbol === 'function';\n};\n\nvar hasSymbol = function (name) {\n  return hasSymbols() && Boolean(Symbol[name]);\n};\n\nvar getSymbol = function (name) {\n  return hasSymbol(name) ? Symbol[name] : '@@' + name;\n};\n\nif (hasSymbols() && !hasSymbol('observable')) {\n  Symbol.observable = Symbol('observable');\n}\n\nvar SymbolIterator = getSymbol('iterator');\nvar SymbolObservable = getSymbol('observable');\nvar SymbolSpecies = getSymbol('species'); // === Abstract Operations ===\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n  if (value == null) return undefined;\n  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n\n  if (ctor !== undefined) {\n    ctor = ctor[SymbolSpecies];\n\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction isObservable(x) {\n  return x instanceof Observable; // SPEC: Brand check\n}\n\nfunction hostReportError(e) {\n  if (hostReportError.log) {\n    hostReportError.log(e);\n  } else {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nfunction enqueue(fn) {\n  Promise.resolve().then(function () {\n    try {\n      fn();\n    } catch (e) {\n      hostReportError(e);\n    }\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  var cleanup = subscription._cleanup;\n  if (cleanup === undefined) return;\n  subscription._cleanup = undefined;\n\n  if (!cleanup) {\n    return;\n  }\n\n  try {\n    if (typeof cleanup === 'function') {\n      cleanup();\n    } else {\n      var unsubscribe = getMethod(cleanup, 'unsubscribe');\n\n      if (unsubscribe) {\n        unsubscribe.call(cleanup);\n      }\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n}\n\nfunction closeSubscription(subscription) {\n  subscription._observer = undefined;\n  subscription._queue = undefined;\n  subscription._state = 'closed';\n}\n\nfunction flushSubscription(subscription) {\n  var queue = subscription._queue;\n\n  if (!queue) {\n    return;\n  }\n\n  subscription._queue = undefined;\n  subscription._state = 'ready';\n\n  for (var i = 0; i < queue.length; ++i) {\n    notifySubscription(subscription, queue[i].type, queue[i].value);\n    if (subscription._state === 'closed') break;\n  }\n}\n\nfunction notifySubscription(subscription, type, value) {\n  subscription._state = 'running';\n  var observer = subscription._observer;\n\n  try {\n    var m = getMethod(observer, type);\n\n    switch (type) {\n      case 'next':\n        if (m) m.call(observer, value);\n        break;\n\n      case 'error':\n        closeSubscription(subscription);\n        if (m) m.call(observer, value);else throw value;\n        break;\n\n      case 'complete':\n        closeSubscription(subscription);\n        if (m) m.call(observer);\n        break;\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';\n}\n\nfunction onNotify(subscription, type, value) {\n  if (subscription._state === 'closed') return;\n\n  if (subscription._state === 'buffering') {\n    subscription._queue.push({\n      type: type,\n      value: value\n    });\n\n    return;\n  }\n\n  if (subscription._state !== 'ready') {\n    subscription._state = 'buffering';\n    subscription._queue = [{\n      type: type,\n      value: value\n    }];\n    enqueue(function () {\n      return flushSubscription(subscription);\n    });\n    return;\n  }\n\n  notifySubscription(subscription, type, value);\n}\n\nvar Subscription = /*#__PURE__*/function () {\n  function Subscription(observer, subscriber) {\n    // ASSERT: observer is an object\n    // ASSERT: subscriber is callable\n    this._cleanup = undefined;\n    this._observer = observer;\n    this._queue = undefined;\n    this._state = 'initializing';\n    var subscriptionObserver = new SubscriptionObserver(this);\n\n    try {\n      this._cleanup = subscriber.call(undefined, subscriptionObserver);\n    } catch (e) {\n      subscriptionObserver.error(e);\n    }\n\n    if (this._state === 'initializing') this._state = 'ready';\n  }\n\n  var _proto = Subscription.prototype;\n\n  _proto.unsubscribe = function unsubscribe() {\n    if (this._state !== 'closed') {\n      closeSubscription(this);\n      cleanupSubscription(this);\n    }\n  };\n\n  _createClass(Subscription, [{\n    key: \"closed\",\n    get: function () {\n      return this._state === 'closed';\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar SubscriptionObserver = /*#__PURE__*/function () {\n  function SubscriptionObserver(subscription) {\n    this._subscription = subscription;\n  }\n\n  var _proto2 = SubscriptionObserver.prototype;\n\n  _proto2.next = function next(value) {\n    onNotify(this._subscription, 'next', value);\n  };\n\n  _proto2.error = function error(value) {\n    onNotify(this._subscription, 'error', value);\n  };\n\n  _proto2.complete = function complete() {\n    onNotify(this._subscription, 'complete');\n  };\n\n  _createClass(SubscriptionObserver, [{\n    key: \"closed\",\n    get: function () {\n      return this._subscription._state === 'closed';\n    }\n  }]);\n\n  return SubscriptionObserver;\n}();\n\nvar Observable = /*#__PURE__*/function () {\n  function Observable(subscriber) {\n    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');\n    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');\n    this._subscriber = subscriber;\n  }\n\n  var _proto3 = Observable.prototype;\n\n  _proto3.subscribe = function subscribe(observer) {\n    if (typeof observer !== 'object' || observer === null) {\n      observer = {\n        next: observer,\n        error: arguments[1],\n        complete: arguments[2]\n      };\n    }\n\n    return new Subscription(observer, this._subscriber);\n  };\n\n  _proto3.forEach = function forEach(fn) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (typeof fn !== 'function') {\n        reject(new TypeError(fn + ' is not a function'));\n        return;\n      }\n\n      function done() {\n        subscription.unsubscribe();\n        resolve();\n      }\n\n      var subscription = _this.subscribe({\n        next: function (value) {\n          try {\n            fn(value, done);\n          } catch (e) {\n            reject(e);\n            subscription.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve\n      });\n    });\n  };\n\n  _proto3.map = function map(fn) {\n    var _this2 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      return _this2.subscribe({\n        next: function (value) {\n          try {\n            value = fn(value);\n          } catch (e) {\n            return observer.error(e);\n          }\n\n          observer.next(value);\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          observer.complete();\n        }\n      });\n    });\n  };\n\n  _proto3.filter = function filter(fn) {\n    var _this3 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      return _this3.subscribe({\n        next: function (value) {\n          try {\n            if (!fn(value)) return;\n          } catch (e) {\n            return observer.error(e);\n          }\n\n          observer.next(value);\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          observer.complete();\n        }\n      });\n    });\n  };\n\n  _proto3.reduce = function reduce(fn) {\n    var _this4 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    var hasSeed = arguments.length > 1;\n    var hasValue = false;\n    var seed = arguments[1];\n    var acc = seed;\n    return new C(function (observer) {\n      return _this4.subscribe({\n        next: function (value) {\n          var first = !hasValue;\n          hasValue = true;\n\n          if (!first || hasSeed) {\n            try {\n              acc = fn(acc, value);\n            } catch (e) {\n              return observer.error(e);\n            }\n          } else {\n            acc = value;\n          }\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));\n          observer.next(acc);\n          observer.complete();\n        }\n      });\n    });\n  };\n\n  _proto3.concat = function concat() {\n    var _this5 = this;\n\n    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n      sources[_key] = arguments[_key];\n    }\n\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      var subscription;\n      var index = 0;\n\n      function startNext(next) {\n        subscription = next.subscribe({\n          next: function (v) {\n            observer.next(v);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            if (index === sources.length) {\n              subscription = undefined;\n              observer.complete();\n            } else {\n              startNext(C.from(sources[index++]));\n            }\n          }\n        });\n      }\n\n      startNext(_this5);\n      return function () {\n        if (subscription) {\n          subscription.unsubscribe();\n          subscription = undefined;\n        }\n      };\n    });\n  };\n\n  _proto3.flatMap = function flatMap(fn) {\n    var _this6 = this;\n\n    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n    var C = getSpecies(this);\n    return new C(function (observer) {\n      var subscriptions = [];\n\n      var outer = _this6.subscribe({\n        next: function (value) {\n          if (fn) {\n            try {\n              value = fn(value);\n            } catch (e) {\n              return observer.error(e);\n            }\n          }\n\n          var inner = C.from(value).subscribe({\n            next: function (value) {\n              observer.next(value);\n            },\n            error: function (e) {\n              observer.error(e);\n            },\n            complete: function () {\n              var i = subscriptions.indexOf(inner);\n              if (i >= 0) subscriptions.splice(i, 1);\n              completeIfDone();\n            }\n          });\n          subscriptions.push(inner);\n        },\n        error: function (e) {\n          observer.error(e);\n        },\n        complete: function () {\n          completeIfDone();\n        }\n      });\n\n      function completeIfDone() {\n        if (outer.closed && subscriptions.length === 0) observer.complete();\n      }\n\n      return function () {\n        subscriptions.forEach(function (s) {\n          return s.unsubscribe();\n        });\n        outer.unsubscribe();\n      };\n    });\n  };\n\n  _proto3[SymbolObservable] = function () {\n    return this;\n  };\n\n  Observable.from = function from(x) {\n    var C = typeof this === 'function' ? this : Observable;\n    if (x == null) throw new TypeError(x + ' is not an object');\n    var method = getMethod(x, SymbolObservable);\n\n    if (method) {\n      var observable = method.call(x);\n      if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');\n      if (isObservable(observable) && observable.constructor === C) return observable;\n      return new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n\n    if (hasSymbol('iterator')) {\n      method = getMethod(x, SymbolIterator);\n\n      if (method) {\n        return new C(function (observer) {\n          enqueue(function () {\n            if (observer.closed) return;\n\n            for (var _iterator = _createForOfIteratorHelperLoose(method.call(x)), _step; !(_step = _iterator()).done;) {\n              var item = _step.value;\n              observer.next(item);\n              if (observer.closed) return;\n            }\n\n            observer.complete();\n          });\n        });\n      }\n    }\n\n    if (Array.isArray(x)) {\n      return new C(function (observer) {\n        enqueue(function () {\n          if (observer.closed) return;\n\n          for (var i = 0; i < x.length; ++i) {\n            observer.next(x[i]);\n            if (observer.closed) return;\n          }\n\n          observer.complete();\n        });\n      });\n    }\n\n    throw new TypeError(x + ' is not observable');\n  };\n\n  Observable.of = function of() {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n\n    var C = typeof this === 'function' ? this : Observable;\n    return new C(function (observer) {\n      enqueue(function () {\n        if (observer.closed) return;\n\n        for (var i = 0; i < items.length; ++i) {\n          observer.next(items[i]);\n          if (observer.closed) return;\n        }\n\n        observer.complete();\n      });\n    });\n  };\n\n  _createClass(Observable, null, [{\n    key: SymbolSpecies,\n    get: function () {\n      return this;\n    }\n  }]);\n\n  return Observable;\n}();\n\nif (hasSymbols()) {\n  Object.defineProperty(Observable, Symbol('extensions'), {\n    value: {\n      symbol: SymbolObservable,\n      hostReportError: hostReportError\n    },\n    configurable: true\n  });\n}\n\nexport { Observable };\n","export function isNonNullObject(obj: any): obj is Record<string | number, any> {\n  return obj !== null && typeof obj === 'object';\n}\n","import { invariant, InvariantError } from '../globals';\n\nimport {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionNode,\n} from 'graphql';\n\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype Kind = any;\ntype OperationTypeNode = any;\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string,\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach(definition => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === 'OperationDefinition') {\n      throw new InvariantError(\n        `Found a ${definition.operation} operation${\n          definition.name ? ` named '${definition.name.value}'` : ''\n        }. ` +\n          'No operations are allowed when using a fragment as a query. Only fragments are allowed.',\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === 'undefined') {\n    invariant(\n      fragments.length === 1,\n      `Found ${\n        fragments.length\n      } fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: 'OperationDefinition' as Kind,\n        // OperationTypeNode is an enum\n        operation: 'query' as OperationTypeNode,\n        selectionSet: {\n          kind: 'SelectionSet' as Kind,\n          selections: [\n            {\n              kind: 'FragmentSpread' as Kind,\n              name: {\n                kind: 'Name' as Kind,\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = [],\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach(fragment => {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nexport function getFragmentFromSelection(\n  selection: SelectionNode,\n  fragmentMap?: FragmentMap,\n): InlineFragmentNode | FragmentDefinitionNode | null {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n    case 'FragmentSpread': {\n      const fragment = fragmentMap && fragmentMap[selection.name.value];\n      invariant(fragment, `No fragment named ${selection.name.value}.`);\n      return fragment!;\n    }\n    default:\n      return null;\n  }\n}\n","import { InvariantError } from '../globals';\n\nimport {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n  SelectionSetNode,\n  DocumentNode,\n} from 'graphql';\n\nimport { isNonNullObject } from '../common/objects';\nimport { FragmentMap, getFragmentFromSelection } from './fragments';\n\nexport interface Reference {\n  readonly __ref: string;\n}\n\nexport function makeReference(id: string): Reference {\n  return { __ref: String(id) };\n}\n\nexport function isReference(obj: any): obj is Reference {\n  return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | Reference\n  | Reference[]\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport interface StoreObject {\n  __typename?: string;\n  [storeFieldName: string]: StoreValue;\n}\n\nexport function isDocumentNode(value: any): value is DocumentNode {\n  return (\n    isNonNullObject(value) &&\n    (value as DocumentNode).kind === \"Document\" &&\n    Array.isArray((value as DocumentNode).definitions)\n  );\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object,\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map(obj =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables),\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables,\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new InvariantError(\n      `The inline argument \"${name.value}\" of kind \"${(value as any).kind}\"` +\n        'is not supported. Use variables instead of inline arguments to ' +\n        'overcome this limitation.',\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object,\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables,\n          ),\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  'connection',\n  'include',\n  'skip',\n  'client',\n  'rest',\n  'export',\n];\n\nexport const getStoreKeyName = Object.assign(function (\n  fieldName: string,\n  args?: Record<string, any> | null,\n  directives?: Directives,\n): string {\n  if (\n    args &&\n    directives &&\n    directives['connection'] &&\n    directives['connection']['key']\n  ) {\n    if (\n      directives['connection']['filter'] &&\n      (directives['connection']['filter'] as string[]).length > 0\n    ) {\n      const filterKeys = directives['connection']['filter']\n        ? (directives['connection']['filter'] as string[])\n        : [];\n      filterKeys.sort();\n\n      const filteredArgs = {} as { [key: string]: any };\n      filterKeys.forEach(key => {\n        filteredArgs[key] = args[key];\n      });\n\n      return `${directives['connection']['key']}(${stringify(\n        filteredArgs,\n      )})`;\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  let completeFieldName: string = fieldName;\n\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    const stringifiedArgs: string = stringify(args);\n    completeFieldName += `(${stringifiedArgs})`;\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(key => {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += `@${key}(${stringify(directives[key])})`;\n      } else {\n        completeFieldName += `@${key}`;\n      }\n    });\n  }\n\n  return completeFieldName;\n}, {\n  setStringify(s: typeof stringify) {\n    const previous = stringify;\n    stringify = s;\n    return previous;\n  },\n});\n\n// Default stable JSON.stringify implementation. Can be updated/replaced with\n// something better by calling getStoreKeyName.setStringify.\nlet stringify = function defaultStringify(value: any): string {\n  return JSON.stringify(value, stringifyReplacer);\n};\n\nfunction stringifyReplacer(_key: string, value: any): any {\n  if (isNonNullObject(value) && !Array.isArray(value)) {\n    value = Object.keys(value).sort().reduce((copy, key) => {\n      copy[key] = value[key];\n      return copy;\n    }, {} as Record<string, any>);\n  }\n  return value;\n}\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables?: Record<string, any>,\n): Object | null {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n    return argObj;\n  }\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap,\n): string | undefined {\n  if (typeof result.__typename === 'string') {\n    return result.__typename;\n  }\n\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === '__typename') {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap,\n      );\n      if (typeof typename === 'string') {\n        return typename;\n      }\n    }\n  }\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode,\n): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n","import { invariant, InvariantError } from '../globals';\n\nimport {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from 'graphql';\n\nimport { valueToObjectRepresentation } from './storeUtils';\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  const operations = doc.definitions\n    .filter(d => d.kind !== 'FragmentDefinition')\n    .map(definition => {\n      if (definition.kind !== 'OperationDefinition') {\n        throw new InvariantError(\n          `Schema type definitions not allowed in queries. Found: \"${\n            definition.kind\n          }\"`,\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains ${operations.length} operations`,\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    definition => definition.kind === 'OperationDefinition',\n  )[0] as OperationDefinitionNode;\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        definition =>\n          definition.kind === 'OperationDefinition' && definition.name,\n      )\n      .map((x: OperationDefinitionNode) => x!.name!.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode,\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    definition => definition.kind === 'FragmentDefinition',\n  ) as FragmentDefinitionNode[];\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc) as OperationDefinitionNode;\n\n  invariant(\n    queryDef && queryDef.operation === 'query',\n    'Must contain a query definition.',\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode,\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    'Fragment must have exactly one definition.',\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === 'FragmentDefinition',\n    'Must be a fragment definition.',\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode,\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === 'OperationDefinition') {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === 'query' ||\n        operation === 'mutation' ||\n        operation === 'subscription'\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new InvariantError(\n    'Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.',\n  );\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined,\n): Record<string, any> {\n  const defaultValues = Object.create(null);\n  const defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach(def => {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(\n          defaultValues,\n          def.variable.name,\n          def.defaultValue as ValueNode,\n        );\n      }\n    });\n  }\n  return defaultValues;\n}\n","import { InvariantError, invariant } from '../../utilities/globals';\n\nimport { Observable, Observer } from '../../utilities';\nimport {\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n  GraphQLRequest\n} from './types';\nimport {\n  validateOperation,\n  createOperation,\n  transformOperation,\n} from '../utils';\n\nfunction passthrough(op: Operation, forward: NextLink) {\n  return (forward ? forward(op) : Observable.of()) as Observable<FetchResult>;\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nclass LinkError extends Error {\n  public link?: ApolloLink;\n  constructor(message?: string, link?: ApolloLink) {\n    super(message);\n    this.link = link;\n  }\n}\n\nexport class ApolloLink {\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => Observable.of());\n  }\n\n  public static from(links: (ApolloLink | RequestHandler)[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce((x, y) => x.concat(y)) as ApolloLink;\n  }\n\n  public static split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    const leftLink = toLink(left);\n    const rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(operation => {\n        return test(operation)\n          ? leftLink.request(operation) || Observable.of()\n          : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return test(operation)\n          ? leftLink.request(operation, forward) || Observable.of()\n          : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  }\n\n  public static execute(\n    link: ApolloLink,\n    operation: GraphQLRequest,\n  ): Observable<FetchResult> {\n    return (\n      link.request(\n        createOperation(\n          operation.context,\n          transformOperation(validateOperation(operation)),\n        ),\n      ) || Observable.of()\n    );\n  }\n\n  public static concat(\n    first: ApolloLink | RequestHandler,\n    second: ApolloLink | RequestHandler,\n  ) {\n    const firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      invariant.warn(\n        new LinkError(\n          `You are calling concat on a terminating link, which will have no effect`,\n          firstLink,\n        ),\n      );\n      return firstLink;\n    }\n    const nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(\n        operation =>\n          firstLink.request(\n            operation,\n            op => nextLink.request(op) || Observable.of(),\n          ) || Observable.of(),\n      );\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return (\n          firstLink.request(operation, op => {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of()\n        );\n      });\n    }\n  }\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    return this.concat(\n      ApolloLink.split(test, left, right || new ApolloLink(passthrough))\n    );\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return ApolloLink.concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink,\n  ): Observable<FetchResult> | null {\n    throw new InvariantError('request is not implemented');\n  }\n\n  protected onError(\n    error: any,\n    observer?: Observer<FetchResult>,\n  ): false | void {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  }\n\n  public setOnError(fn: ApolloLink[\"onError\"]): this {\n    this.onError = fn;\n    return this;\n  }\n}\n","import { GraphQLRequest, Operation } from '../core';\n\nexport function createOperation(\n  starting: any,\n  operation: GraphQLRequest,\n): Operation {\n  let context = { ...starting };\n  const setContext = (next: any) => {\n    if (typeof next === 'function') {\n      context = { ...context, ...next(context) };\n    } else {\n      context = { ...context, ...next };\n    }\n  };\n  const getContext = () => ({ ...context });\n\n  Object.defineProperty(operation, 'setContext', {\n    enumerable: false,\n    value: setContext,\n  });\n\n  Object.defineProperty(operation, 'getContext', {\n    enumerable: false,\n    value: getContext,\n  });\n\n  return operation as Operation;\n}\n","import { GraphQLRequest, Operation } from '../core';\nimport { getOperationName } from '../../utilities';\n\nexport function transformOperation(operation: GraphQLRequest): GraphQLRequest {\n  const transformedOperation: GraphQLRequest = {\n    variables: operation.variables || {},\n    extensions: operation.extensions || {},\n    operationName: operation.operationName,\n    query: operation.query,\n  };\n\n  // Best guess at an operation name\n  if (!transformedOperation.operationName) {\n    transformedOperation.operationName =\n      typeof transformedOperation.query !== 'string'\n        ? getOperationName(transformedOperation.query) || undefined\n        : '';\n  }\n\n  return transformedOperation as Operation;\n}\n","import { InvariantError } from '../../utilities/globals'\nimport { GraphQLRequest } from '../core';\n\nexport function validateOperation(operation: GraphQLRequest): GraphQLRequest {\n  const OPERATION_FIELDS = [\n    'query',\n    'operationName',\n    'variables',\n    'extensions',\n    'context',\n  ];\n  for (let key of Object.keys(operation)) {\n    if (OPERATION_FIELDS.indexOf(key) < 0) {\n      throw new InvariantError(`illegal argument: ${key}`);\n    }\n  }\n\n  return operation;\n}\n","import { ApolloLink } from './ApolloLink';\n\nexport const execute = ApolloLink.execute;\n","import { TupleToIntersection } from './mergeDeep';\n\n/**\n * Merges the provided objects shallowly and removes\n * all properties with an `undefined` value\n */\nexport function compact<TArgs extends any[]>(\n  ...objects: TArgs\n): TupleToIntersection<TArgs> {\n  const result = Object.create(null);\n\n  objects.forEach(obj => {\n    if (!obj) return;\n    Object.keys(obj).forEach(key => {\n      const value = (obj as any)[key];\n      if (value !== void 0) {\n        result[key] = value;\n      }\n    });\n  });\n\n  return result;\n}\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nexport let OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n","/**\n * The set of allowed kind values for AST nodes.\n */\nexport let Kind;\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n","import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n","import { InvariantError } from '../../utilities/globals';\n\nexport type ClientParseError = InvariantError & {\n  parseError: Error;\n};\n\nexport const serializeFetchParameter = (p: any, label: string) => {\n  let serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    const parseError = new InvariantError(\n      `Network request failed. ${label} is not serializable: ${e.message}`,\n    ) as ClientParseError;\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};\n","export type ServerError = Error & {\n  response: Response;\n  result: Record<string, any>;\n  statusCode: number;\n};\n\nexport const throwServerError = (\n  response: Response,\n  result: any,\n  message: string\n) => {\n  const error = new Error(message) as ServerError;\n  error.name = 'ServerError';\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\n","import { Operation } from '../core';\nimport { throwServerError } from '../utils';\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport function parseAndCheckHttpResponse(\n  operations: Operation | Operation[],\n) {\n  return (response: Response) => response\n    .text()\n    .then(bodyText => {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        const parseError = err as ServerParseError;\n        parseError.name = 'ServerParseError';\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n      }\n    })\n    .then((result: any) => {\n      if (response.status >= 300) {\n        // Network error\n        throwServerError(\n          response,\n          result,\n          `Response not successful: Received status code ${response.status}`,\n        );\n      }\n\n      if (\n        !Array.isArray(result) &&\n        !hasOwnProperty.call(result, 'data') &&\n        !hasOwnProperty.call(result, 'errors')\n      ) {\n        // Data error\n        throwServerError(\n          response,\n          result,\n          `Server response was missing for query '${\n            Array.isArray(operations)\n              ? operations.map(op => op.operationName)\n              : operations.operationName\n          }'.`,\n        );\n      }\n      return result;\n    });\n}\n","/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n","import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n","/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n","import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n","import { ASTNode, print } from 'graphql';\n\nimport { Operation } from '../core';\n\nexport interface Printer {\n  (node: ASTNode, originalPrint: typeof print): string\n};\n\nexport interface UriFunction {\n  (operation: Operation): string;\n}\n\nexport interface Body {\n  query?: string;\n  operationName?: string;\n  variables?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface HttpOptions {\n  /**\n   * The URI to use when fetching operations.\n   *\n   * Defaults to '/graphql'.\n   */\n  uri?: string | UriFunction;\n\n  /**\n   * Passes the extensions field to your graphql server.\n   *\n   * Defaults to false.\n   */\n  includeExtensions?: boolean;\n\n  /**\n   * A `fetch`-compatible API to use when making requests.\n   */\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n\n  /**\n   * An object representing values to be sent as headers on the request.\n   */\n  headers?: any;\n\n  /**\n   * The credentials policy you want to use for the fetch call.\n   */\n  credentials?: string;\n\n  /**\n   * Any overrides of the fetch options argument to pass to the fetch call.\n   */\n  fetchOptions?: any;\n\n  /**\n   * If set to true, use the HTTP GET method for query operations. Mutations\n   * will still use the method specified in fetchOptions.method (which defaults\n   * to POST).\n   */\n  useGETForQueries?: boolean;\n\n  /**\n   * If set to true, the default behavior of stripping unused variables\n   * from the request will be disabled.\n   *\n   * Unused variables are likely to trigger server-side validation errors,\n   * per https://spec.graphql.org/draft/#sec-All-Variables-Used, but this\n   * includeUnusedVariables option can be useful if your server deviates\n   * from the GraphQL specification by not strictly enforcing that rule.\n   */\n  includeUnusedVariables?: boolean;\n  /**\n   * A function to substitute for the default query print function. Can be\n   * used to apply changes to the results of the print function.\n   */\n   print?: Printer;\n}\n\nexport interface HttpQueryOptions {\n  includeQuery?: boolean;\n  includeExtensions?: boolean;\n}\n\nexport interface HttpConfig {\n  http?: HttpQueryOptions;\n  options?: any;\n  headers?: any;\n  credentials?: any;\n}\n\nconst defaultHttpOptions: HttpQueryOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: '*/*',\n  'content-type': 'application/json',\n};\n\nconst defaultOptions = {\n  method: 'POST',\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const defaultPrinter: Printer = (ast, printer) => printer(ast);\n\nexport function selectHttpOptionsAndBody(\n  operation: Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) {\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal(\n    operation,\n    defaultPrinter,\n    ...configs,\n  );\n}\n\nexport function selectHttpOptionsAndBodyInternal(\n  operation: Operation,\n  printer: Printer,\n  ...configs: HttpConfig[]\n) {\n  let options = {} as HttpConfig & Record<string, any>;\n  let http = {} as HttpQueryOptions;\n\n  configs.forEach(config => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...headersToLowerCase(config.headers),\n      },\n    };\n\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: Body = { operationName, variables };\n\n  if (http.includeExtensions) (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = printer(query, print);\n\n  return {\n    options,\n    body,\n  };\n};\n\nfunction headersToLowerCase(\n  headers: Record<string, string> | undefined\n): typeof headers {\n  if (headers) {\n    const normalized = Object.create(null);\n    Object.keys(Object(headers)).forEach(name => {\n      normalized[name.toLowerCase()] = headers[name];\n    });\n    return normalized;\n  }\n  return headers;\n}\n","import { Observable } from '../../utilities';\n\nexport function fromError<T>(errorValue: any): Observable<T> {\n  return new Observable<T>(observer => {\n    observer.error(errorValue);\n  });\n}\n","import '../../utilities/globals';\n\nimport { visit, DefinitionNode, VariableDefinitionNode } from 'graphql';\n\nimport { ApolloLink } from '../core';\nimport { Observable } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport { parseAndCheckHttpResponse } from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\nimport { maybe } from '../../utilities';\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      currentFetch!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(result => {\n          // we have data and can send it to back up the link chain\n          observer.next(result);\n          observer.complete();\n          return result;\n        })\n        .catch(err => {\n          // fetch was cancelled so it's already been cleaned up in the unsubscribe\n          if (err.name === 'AbortError') return;\n          // if it is a network error, BUT there is graphql result info\n          // fire the next observer before calling error\n          // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n          // to pass to UI\n          // this should only happen if we *also* have data as part of the response key per\n          // the spec\n          if (err.result && err.result.errors && err.result.data) {\n            // if we don't call next, the UI can only show networkError because AC didn't\n            // get any graphqlErrors\n            // this is graphql execution result info (i.e errors and possibly data)\n            // this is because there is no formal spec how errors should translate to\n            // http status codes. So an auth error (401) could have both data\n            // from a public field, errors from a private field, and a status of 401\n            // {\n            //  user { // this will have errors\n            //    firstName\n            //  }\n            //  products { // this is public so will have data\n            //    cost\n            //  }\n            // }\n            //\n            // the result of above *could* look like this:\n            // {\n            //   data: { products: [{ cost: \"$10\" }] },\n            //   errors: [{\n            //      message: 'your session has timed out',\n            //      path: []\n            //   }]\n            // }\n            // status code of above would be a 401\n            // in the UI you want to show data where you can, errors as data where you can\n            // and use correct http status codes\n            observer.next(err.result);\n          }\n          observer.error(err);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n","import { InvariantError } from '../../utilities/globals';\n\nexport const checkFetcher = (fetcher: WindowOrWorkerGlobalScope['fetch'] | undefined) => {\n  if (!fetcher && typeof fetch === 'undefined') {\n    throw new InvariantError(`\n\"fetch\" has not been found globally and no fetcher has been \\\nconfigured. To fix this, install a fetch package (like \\\nhttps://www.npmjs.com/package/cross-fetch), instantiate the \\\nfetcher, and pass it into your HttpLink constructor. For example:\n\nimport fetch from 'cross-fetch';\nimport { ApolloClient, HttpLink } from '@apollo/client';\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: '/graphql', fetch })\n});\n    `);\n  }\n};\n","import { Operation } from '../core';\n\nexport const selectURI = (\n  operation: Operation,\n  fallbackURI?: string | ((operation: Operation) => string),\n) => {\n  const context = operation.getContext();\n  const contextURI = context.uri;\n\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === 'function') {\n    return fallbackURI(operation);\n  } else {\n    return (fallbackURI as string) || '/graphql';\n  }\n};\n","export const createSignalIfSupported = () => {\n  if (typeof AbortController === 'undefined')\n    return { controller: false, signal: false };\n\n  const controller = new AbortController();\n  const signal = controller.signal;\n  return { controller, signal };\n};\n","import { serializeFetchParameter } from './serializeFetchParameter';\nimport { Body } from './selectHttpOptionsAndBody';\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI: string, body: Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams: string[] = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query!);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = serializeFetchParameter(\n        body.variables,\n        'Variables map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = serializeFetchParameter(\n        body.extensions,\n        'Extensions map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = '',\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return { newURI };\n}\n","import { ApolloLink, RequestHandler } from '../core';\nimport { HttpOptions } from './selectHttpOptionsAndBody';\nimport { createHttpLink } from './createHttpLink';\n\nexport class HttpLink extends ApolloLink {\n  public requester: RequestHandler;\n  constructor(public options: HttpOptions = {}) {\n    super(createHttpLink(options).request);\n  }\n}\n","const { toString, hasOwnProperty } = Object.prototype;\nconst fnToStr = Function.prototype.toString;\nconst previousComparisons = new Map<object, Set<object>>();\n\n/**\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\n */\nexport function equal(a: any, b: any): boolean {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\n\n// Allow default imports as well.\nexport default equal;\n\nfunction check(a: any, b: any): boolean {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  }\n\n  // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n  const aTag = toString.call(a);\n  const bTag = toString.call(b);\n\n  // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n  if (aTag !== bTag) {\n    return false;\n  }\n\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n      // Fall through to object case...\n    case '[object Object]': {\n      if (previouslyCompared(a, b)) return true;\n\n      const aKeys = definedKeys(a);\n      const bKeys = definedKeys(b);\n\n      // If `a` and `b` have a different number of enumerable keys, they\n      // must be different.\n      const keyCount = aKeys.length;\n      if (keyCount !== bKeys.length) return false;\n\n      // Now make sure they have the same keys.\n      for (let k = 0; k < keyCount; ++k) {\n        if (!hasOwnProperty.call(b, aKeys[k])) {\n          return false;\n        }\n      }\n\n      // Finally, check deep equality of all child properties.\n      for (let k = 0; k < keyCount; ++k) {\n        const key = aKeys[k];\n        if (!check(a[key], b[key])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n      // Fall through to shared +a === +b case...\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n\n    case '[object RegExp]':\n    case '[object String]':\n      return a == `${b}`;\n\n    case '[object Map]':\n    case '[object Set]': {\n      if (a.size !== b.size) return false;\n      if (previouslyCompared(a, b)) return true;\n\n      const aIterator = a.entries();\n      const isMap = aTag === '[object Map]';\n\n      while (true) {\n        const info = aIterator.next();\n        if (info.done) break;\n\n        // If a instanceof Set, aValue === aKey.\n        const [aKey, aValue] = info.value;\n\n        // So this works the same way for both Set and Map.\n        if (!b.has(aKey)) {\n          return false;\n        }\n\n        // However, we care about deep equality of values only when dealing\n        // with Map structures.\n        if (isMap && !check(aValue, b.get(aKey))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Uint16Array]':\n    case '[object Uint8Array]': // Buffer, in Node.js.\n    case '[object Uint32Array]':\n    case '[object Int32Array]':\n    case '[object Int8Array]':\n    case '[object Int16Array]':\n    case '[object ArrayBuffer]':\n      // DataView doesn't need these conversions, but the equality check is\n      // otherwise the same.\n      a = new Uint8Array(a);\n      b = new Uint8Array(b);\n      // Fall through...\n    case '[object DataView]': {\n      let len = a.byteLength;\n      if (len === b.byteLength) {\n        while (len-- && a[len] === b[len]) {\n          // Keep looping as long as the bytes are equal.\n        }\n      }\n      return len === -1;\n    }\n\n    case '[object AsyncFunction]':\n    case '[object GeneratorFunction]':\n    case '[object AsyncGeneratorFunction]':\n    case '[object Function]': {\n      const aCode = fnToStr.call(a);\n      if (aCode !== fnToStr.call(b)) {\n        return false;\n      }\n\n      // We consider non-native functions equal if they have the same code\n      // (native functions require === because their code is censored).\n      // Note that this behavior is not entirely sound, since !== function\n      // objects with the same code can behave differently depending on\n      // their closure scope. However, any function can behave differently\n      // depending on the values of its input arguments (including this)\n      // and its calling context (including its closure scope), even\n      // though the function object is === to itself; and it is entirely\n      // possible for functions that are not === to behave exactly the\n      // same under all conceivable circumstances. Because none of these\n      // factors are statically decidable in JavaScript, JS function\n      // equality is not well-defined. This ambiguity allows us to\n      // consider the best possible heuristic among various imperfect\n      // options, and equating non-native functions that have the same\n      // code has enormous practical benefits, such as when comparing\n      // functions that are repeatedly passed as fresh function\n      // expressions within objects that are otherwise deeply equal. Since\n      // any function created from the same syntactic expression (in the\n      // same code location) will always stringify to the same code\n      // according to fnToStr.call, we can reasonably expect these\n      // repeatedly passed function expressions to have the same code, and\n      // thus behave \"the same\" (with all the caveats mentioned above),\n      // even though the runtime function objects are !== to one another.\n      return !endsWith(aCode, nativeCodeSuffix);\n    }\n  }\n\n  // Otherwise the values are not equal.\n  return false;\n}\n\nfunction definedKeys<TObject extends object>(obj: TObject) {\n  // Remember that the second argument to Array.prototype.filter will be\n  // used as `this` within the callback function.\n  return Object.keys(obj).filter(isDefinedKey, obj);\n}\nfunction isDefinedKey<TObject extends object>(\n  this: TObject,\n  key: keyof TObject,\n) {\n  return this[key] !== void 0;\n}\n\nconst nativeCodeSuffix = \"{ [native code] }\";\n\nfunction endsWith(full: string, suffix: string) {\n  const fromIndex = full.length - suffix.length;\n  return fromIndex >= 0 &&\n    full.indexOf(suffix, fromIndex) === fromIndex;\n}\n\nfunction previouslyCompared(a: object, b: object): boolean {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  let bSet = previousComparisons.get(a);\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set);\n  }\n  bSet.add(b);\n  return false;\n}\n","// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\n\nexport class Trie<Data> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, Trie<Data>>;\n  private strong?: Map<any, Trie<Data>>;\n  private data?: Data;\n\n  constructor(\n    private weakness = true,\n    private makeData: (array: any[]) => Data = defaultMakeData,\n  ) {}\n\n  public lookup<T extends any[]>(...array: T): Data {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends IArguments | any[]>(array: T): Data {\n    let node: Trie<Data> = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return node.data || (node.data = this.makeData(slice.call(array)));\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, Trie<Data>>())\n      : this.strong || (this.strong = new Map<any, Trie<Data>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie<Data>(this.weakness, this.makeData));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n","import { invariant } from '../globals';\n\n// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n  visit,\n} from 'graphql';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>,\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(\n    directives\n  ).every(({ directive, ifArgument }) => {\n    let evaledValue: boolean = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[(ifArgument.value as VariableNode).name.value];\n      invariant(\n        evaledValue !== void 0,\n        `Invalid variable referenced in @${directive.name.value} directive.`,\n      );\n    } else {\n      evaledValue = (ifArgument.value as BooleanValueNode).value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport function hasDirectives(names: string[], root: ASTNode) {\n  return getDirectiveNames(root).some(\n    (name: string) => names.indexOf(name) > -1,\n  );\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return (\n    document &&\n    hasDirectives(['client'], document) &&\n    hasDirectives(['export'], document)\n  );\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>,\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach(directive => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @${directiveName} directive.`,\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === 'if',\n        `Invalid argument for the @${directiveName} directive.`,\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'),\n        `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n\n","import { isNonNullObject } from \"./objects\";\n\nconst { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A :\n  T extends [infer A, infer B] ? A & B :\n  T extends [infer A, infer B, infer C] ? A & B & C :\n  T extends [infer A, infer B, infer C, infer D] ? A & B & C & D :\n  T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E :\n  T extends (infer U)[] ? U : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || ({} as T);\n  const count = sources.length;\n  if (count > 1) {\n    const merger = new DeepMerger();\n    for (let i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\n\nexport type ReconcilerFunction<TContextArgs extends any[]> = (\n  this: DeepMerger<TContextArgs>,\n  target: Record<string | number, any>,\n  source: Record<string | number, any>,\n  property: string | number,\n  ...context: TContextArgs\n) => any;\n\nconst defaultReconciler: ReconcilerFunction<any[]> =\n  function (target, source, property) {\n    return this.merge(target[property], source[property]);\n  };\n\nexport class DeepMerger<TContextArgs extends any[]> {\n  constructor(\n    private reconciler: ReconcilerFunction<TContextArgs> = defaultReconciler,\n  ) {}\n\n  public merge(target: any, source: any, ...context: TContextArgs): any {\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach(sourceKey => {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          const targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            const result = this.reconciler(target, source, sourceKey, ...context);\n            // A well-implemented reconciler may return targetValue to indicate\n            // the merge changed nothing about the structure of the target.\n            if (result !== targetValue) {\n              target = this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          // If there is no collision, the target can safely share memory with\n          // the source, and the recursion can terminate here.\n          target = this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n\n      return target;\n    }\n\n    // If source (or target) is not an object, let source replace target.\n    return source;\n  }\n\n  public isObject = isNonNullObject;\n\n  private pastCopies = new Set<any>();\n\n  public shallowCopyForMerge<T>(value: T): T {\n    if (isNonNullObject(value)) {\n      if (this.pastCopies.has(value)) {\n        // In order to reuse a past copy, it must be mutable, but copied objects\n        // can sometimes be frozen while this DeepMerger is still active.\n        if (!Object.isFrozen(value)) return value;\n        this.pastCopies.delete(value);\n      }\n      if (Array.isArray(value)) {\n        value = (value as any).slice(0);\n      } else {\n        value = {\n          __proto__: Object.getPrototypeOf(value),\n          ...value,\n        };\n      }\n      this.pastCopies.add(value);\n    }\n    return value;\n  }\n}\n","import { SelectionSetNode } from 'graphql';\n\nimport {\n  NormalizedCache,\n  InMemoryCacheConfig,\n} from './types';\n\nimport { KeyFieldsContext } from './policies';\n\nimport {\n  Reference,\n  isReference,\n  StoreValue,\n  StoreObject,\n  isField,\n  DeepMerger,\n  resultKeyNameFromField,\n  shouldInclude,\n  isNonNullObject,\n  compact,\n} from '../../utilities';\n\nexport const {\n  hasOwnProperty: hasOwn,\n} = Object.prototype;\n\nexport function defaultDataIdFromObject(\n  { __typename, id, _id }: Readonly<StoreObject>,\n  context?: KeyFieldsContext,\n): string | undefined {\n  if (typeof __typename === \"string\") {\n    if (context) {\n      context.keyObject =\n         id !== void 0 ? {  id } :\n        _id !== void 0 ? { _id } :\n        void 0;\n    }\n    // If there is no object.id, fall back to object._id.\n    if (id === void 0) id = _id;\n    if (id !== void 0) {\n      return `${__typename}:${(\n        typeof id === \"number\" ||\n        typeof id === \"string\"\n      ) ? id : JSON.stringify(id)}`;\n    }\n  }\n}\n\nconst defaultConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  // Thanks to the shouldCanonizeResults helper, this should be the only line\n  // you have to change to reenable canonization by default in the future.\n  canonizeResults: false,\n};\n\nexport function normalizeConfig(config: InMemoryCacheConfig) {\n  return compact(defaultConfig, config);\n}\n\nexport function shouldCanonizeResults(\n  config: Pick<InMemoryCacheConfig, \"canonizeResults\">,\n): boolean {\n  const value = config.canonizeResults;\n  return value === void 0 ? defaultConfig.canonizeResults : value;\n}\n\nexport function getTypenameFromStoreObject(\n  store: NormalizedCache,\n  objectOrReference: StoreObject | Reference,\n): string | undefined {\n  return isReference(objectOrReference)\n    ? store.get(objectOrReference.__ref, \"__typename\") as string\n    : objectOrReference && objectOrReference.__typename;\n}\n\nexport const TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\n\nexport function fieldNameFromStoreName(storeFieldName: string): string {\n  const match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\n\nexport function selectionSetMatchesResult(\n  selectionSet: SelectionSetNode,\n  result: Record<string, any>,\n  variables?: Record<string, any>,\n): boolean {\n  if (isNonNullObject(result)) {\n    return isArray(result)\n      ? result.every(item => selectionSetMatchesResult(selectionSet, item, variables))\n      : selectionSet.selections.every(field => {\n        if (isField(field) && shouldInclude(field, variables)) {\n          const key = resultKeyNameFromField(field);\n          return hasOwn.call(result, key) &&\n            (!field.selectionSet ||\n             selectionSetMatchesResult(field.selectionSet, result[key], variables));\n        }\n        // If the selection has been skipped with @skip(true) or\n        // @include(false), it should not count against the matching. If\n        // the selection is not a field, it must be a fragment (inline or\n        // named). We will determine if selectionSetMatchesResult for that\n        // fragment when we get to it, so for now we return true.\n        return true;\n      });\n  }\n  return false;\n}\n\nexport function storeValueIsStoreObject(\n  value: StoreValue,\n): value is StoreObject {\n  return isNonNullObject(value) &&\n    !isReference(value) &&\n    !isArray(value);\n}\n\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger;\n}\n\nexport const isArray = (a: any): a is any[] | readonly any[] => Array.isArray(a)\n","import \"../../utilities/globals\";\n\nimport { Trie } from \"@wry/trie\";\nimport {\n  canUseWeakMap,\n  canUseWeakSet,\n  isNonNullObject as isObjectOrArray,\n} from \"../../utilities\";\nimport { isArray } from \"./helpers\";\n\nfunction shallowCopy<T>(value: T): T {\n  if (isObjectOrArray(value)) {\n    return isArray(value)\n      ? value.slice(0) as any as T\n      : { __proto__: Object.getPrototypeOf(value), ...value };\n  }\n  return value;\n}\n\n// When programmers talk about the \"canonical form\" of an object, they\n// usually have the following meaning in mind, which I've copied from\n// https://en.wiktionary.org/wiki/canonical_form:\n//\n// 1. A standard or normal presentation of a mathematical entity [or\n//    object]. A canonical form is an element of a set of representatives\n//    of equivalence classes of forms such that there is a function or\n//    procedure which projects every element of each equivalence class\n//    onto that one element, the canonical form of that equivalence\n//    class. The canonical form is expected to be simpler than the rest of\n//    the forms in some way.\n//\n// That's a long-winded way of saying any two objects that have the same\n// canonical form may be considered equivalent, even if they are !==,\n// which usually means the objects are structurally equivalent (deeply\n// equal), but don't necessarily use the same memory.\n//\n// Like a literary or musical canon, this ObjectCanon class represents a\n// collection of unique canonical items (JavaScript objects), with the\n// important property that canon.admit(a) === canon.admit(b) if a and b\n// are deeply equal to each other. In terms of the definition above, the\n// canon.admit method is the \"function or procedure which projects every\"\n// object \"onto that one element, the canonical form.\"\n//\n// In the worst case, the canonicalization process may involve looking at\n// every property in the provided object tree, so it takes the same order\n// of time as deep equality checking. Fortunately, already-canonicalized\n// objects are returned immediately from canon.admit, so the presence of\n// canonical subtrees tends to speed up canonicalization.\n//\n// Since consumers of canonical objects can check for deep equality in\n// constant time, canonicalizing cache results can massively improve the\n// performance of application code that skips re-rendering unchanged\n// results, such as \"pure\" UI components in a framework like React.\n//\n// Of course, since canonical objects may be shared widely between\n// unrelated consumers, it's important to think of them as immutable, even\n// though they are not actually frozen with Object.freeze in production,\n// due to the extra performance overhead that comes with frozen objects.\n//\n// Custom scalar objects whose internal class name is neither Array nor\n// Object can be included safely in the admitted tree, but they will not\n// be replaced with a canonical version (to put it another way, they are\n// assumed to be canonical already).\n//\n// If we ignore custom objects, no detection of cycles or repeated object\n// references is currently required by the StoreReader class, since\n// GraphQL result objects are JSON-serializable trees (and thus contain\n// neither cycles nor repeated subtrees), so we can avoid the complexity\n// of keeping track of objects we've already seen during the recursion of\n// the admit method.\n//\n// In the future, we may consider adding additional cases to the switch\n// statement to handle other common object types, such as \"[object Date]\"\n// objects, as needed.\nexport class ObjectCanon {\n  // Set of all canonical objects this ObjectCanon has admitted, allowing\n  // canon.admit to return previously-canonicalized objects immediately.\n  private known = new (canUseWeakSet ? WeakSet : Set)<object>();\n\n  // Efficient storage/lookup structure for canonical objects.\n  private pool = new Trie<{\n    array?: any[];\n    object?: Record<string, any>;\n    keys?: SortedKeysInfo;\n  }>(canUseWeakMap);\n\n  public isKnown(value: any): boolean {\n    return isObjectOrArray(value) && this.known.has(value);\n  }\n\n  // Make the ObjectCanon assume this value has already been\n  // canonicalized.\n  private passes = new WeakMap<object, object>();\n  public pass<T>(value: T): T;\n  public pass(value: any) {\n    if (isObjectOrArray(value)) {\n      const copy = shallowCopy(value);\n      this.passes.set(copy, value);\n      return copy;\n    }\n    return value;\n  }\n\n  // Returns the canonical version of value.\n  public admit<T>(value: T): T;\n  public admit(value: any) {\n    if (isObjectOrArray(value)) {\n      const original = this.passes.get(value);\n      if (original) return original;\n\n      const proto = Object.getPrototypeOf(value);\n      switch (proto) {\n        case Array.prototype: {\n          if (this.known.has(value)) return value;\n          const array: any[] = (value as any[]).map(this.admit, this);\n          // Arrays are looked up in the Trie using their recursively\n          // canonicalized elements, and the known version of the array is\n          // preserved as node.array.\n          const node = this.pool.lookupArray(array);\n          if (!node.array) {\n            this.known.add(node.array = array);\n            // Since canonical arrays may be shared widely between\n            // unrelated consumers, it's important to regard them as\n            // immutable, even if they are not frozen in production.\n            if (__DEV__) {\n              Object.freeze(array);\n            }\n          }\n          return node.array;\n        }\n\n        case null:\n        case Object.prototype: {\n          if (this.known.has(value)) return value;\n          const proto = Object.getPrototypeOf(value);\n          const array = [proto];\n          const keys = this.sortedKeys(value);\n          array.push(keys.json);\n          const firstValueIndex = array.length;\n          keys.sorted.forEach(key => {\n            array.push(this.admit((value as any)[key]));\n          });\n          // Objects are looked up in the Trie by their prototype (which\n          // is *not* recursively canonicalized), followed by a JSON\n          // representation of their (sorted) keys, followed by the\n          // sequence of recursively canonicalized values corresponding to\n          // those keys. To keep the final results unambiguous with other\n          // sequences (such as arrays that just happen to contain [proto,\n          // keys.json, value1, value2, ...]), the known version of the\n          // object is stored as node.object.\n          const node = this.pool.lookupArray(array);\n          if (!node.object) {\n            const obj = node.object = Object.create(proto);\n            this.known.add(obj);\n            keys.sorted.forEach((key, i) => {\n              obj[key] = array[firstValueIndex + i];\n            });\n            // Since canonical objects may be shared widely between\n            // unrelated consumers, it's important to regard them as\n            // immutable, even if they are not frozen in production.\n            if (__DEV__) {\n              Object.freeze(obj);\n            }\n          }\n          return node.object;\n        }\n      }\n    }\n    return value;\n  }\n\n  // It's worthwhile to cache the sorting of arrays of strings, since the\n  // same initial unsorted arrays tend to be encountered many times.\n  // Fortunately, we can reuse the Trie machinery to look up the sorted\n  // arrays in linear time (which is faster than sorting large arrays).\n  private sortedKeys(obj: object) {\n    const keys = Object.keys(obj);\n    const node = this.pool.lookupArray(keys);\n    if (!node.keys) {\n      keys.sort();\n      const json = JSON.stringify(keys);\n      if (!(node.keys = this.keysByJSON.get(json))) {\n        this.keysByJSON.set(json, node.keys = { sorted: keys, json });\n      }\n    }\n    return node.keys;\n  }\n  // Arrays that contain the same elements in a different order can share\n  // the same SortedKeysInfo object, to save memory.\n  private keysByJSON = new Map<string, SortedKeysInfo>();\n\n  // This has to come last because it depends on keysByJSON.\n  public readonly empty = this.admit({});\n}\n\ntype SortedKeysInfo = {\n  sorted: string[];\n  json: string;\n};\n\n// Since the keys of canonical objects are always created in lexicographically\n// sorted order, we can use the ObjectCanon to implement a fast and stable\n// version of JSON.stringify, which automatically sorts object keys.\nexport const canonicalStringify = Object.assign(function (value: any): string {\n  if (isObjectOrArray(value)) {\n    if (stringifyCanon === void 0) {\n      resetCanonicalStringify();\n    }\n    const canonical = stringifyCanon.admit(value);\n    let json = stringifyCache.get(canonical);\n    if (json === void 0) {\n      stringifyCache.set(\n        canonical,\n        json = JSON.stringify(canonical),\n      );\n    }\n    return json;\n  }\n  return JSON.stringify(value);\n}, {\n  reset: resetCanonicalStringify,\n});\n\n// Can be reset by calling canonicalStringify.reset().\nlet stringifyCanon: ObjectCanon;\nlet stringifyCache: WeakMap<object, string>;\n\nfunction resetCanonicalStringify() {\n  stringifyCanon = new ObjectCanon;\n  stringifyCache = new (canUseWeakMap ? WeakMap : Map)();\n}\n","import { Observable, Observer } from \"./Observable\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeCallbackCount = 0;\n    let completed = false;\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise(resolve => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      delegate: typeof next | typeof error,\n    ): (arg: any) => void {\n      if (examiner) {\n        return arg => {\n          ++activeCallbackCount;\n          const both = () => examiner(arg);\n          promiseQueue = promiseQueue.then(both, both).then(\n            result => {\n              --activeCallbackCount;\n              next && next.call(observer, result);\n              if (completed) {\n                handler.complete!();\n              }\n            },\n            error => {\n              --activeCallbackCount;\n              throw error;\n            },\n          ).catch(caught => {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return arg => delegate && delegate.call(observer, arg);\n      }\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete() {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n","import { ExecutionResult } from 'graphql';\n\nexport function graphQLResultHasError(result: ExecutionResult<unknown>): boolean {\n  return (result.errors && result.errors.length > 0) || false;\n}\n","export function filterInPlace<T>(\n  array: T[],\n  test: (elem: T) => boolean,\n  context?: any,\n): T[] {\n  let target = 0;\n  array.forEach(function (elem, i) {\n    if (test.call(this, elem, i, array)) {\n      array[target++] = elem;\n    }\n  }, context);\n  array.length = target;\n  return array;\n}\n","import { invariant } from '../globals';\n\nimport {\n  DocumentNode,\n  SelectionNode,\n  SelectionSetNode,\n  OperationDefinitionNode,\n  FieldNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n  ArgumentNode,\n  FragmentSpreadNode,\n  VariableDefinitionNode,\n  VariableNode,\n  visit,\n} from 'graphql';\n\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype Kind = any;\n\nimport {\n  checkDocument,\n  getOperationDefinition,\n  getFragmentDefinition,\n  getFragmentDefinitions,\n  getMainDefinition,\n} from './getFromAST';\nimport { filterInPlace } from '../common/filterInPlace';\nimport { isField, isInlineFragment } from './storeUtils';\nimport {\n  createFragmentMap,\n  FragmentMap,\n} from './fragments';\n\nexport type RemoveNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n  remove?: boolean;\n};\n\nexport type GetNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n};\n\nexport type RemoveDirectiveConfig = RemoveNodeConfig<DirectiveNode>;\nexport type GetDirectiveConfig = GetNodeConfig<DirectiveNode>;\nexport type RemoveArgumentsConfig = RemoveNodeConfig<ArgumentNode>;\nexport type GetFragmentSpreadConfig = GetNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentSpreadConfig = RemoveNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentDefinitionConfig = RemoveNodeConfig<\n  FragmentDefinitionNode\n>;\nexport type RemoveVariableDefinitionConfig = RemoveNodeConfig<\n  VariableDefinitionNode\n>;\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: 'Field' as Kind,\n  name: {\n    kind: 'Name' as Kind,\n    value: '__typename',\n  },\n};\n\nfunction isEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragments: FragmentMap,\n): boolean {\n  return op.selectionSet.selections.every(\n    selection =>\n      selection.kind === 'FragmentSpread' &&\n      isEmpty(fragments[selection.name.value], fragments),\n  );\n}\n\nfunction nullIfDocIsEmpty(doc: DocumentNode) {\n  return isEmpty(\n    getOperationDefinition(doc) || getFragmentDefinition(doc),\n    createFragmentMap(getFragmentDefinitions(doc)),\n  )\n    ? null\n    : doc;\n}\n\nfunction getDirectiveMatcher(\n  directives: (RemoveDirectiveConfig | GetDirectiveConfig)[],\n) {\n  return function directiveMatcher(directive: DirectiveNode) {\n    return directives.some(\n      dir =>\n        (dir.name && dir.name === directive.name.value) ||\n        (dir.test && dir.test(directive)),\n    );\n  };\n}\n\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const variablesInUse: Record<string, boolean> = Object.create(null);\n  let variablesToRemove: RemoveArgumentsConfig[] = [];\n\n  const fragmentSpreadsInUse: Record<string, boolean> = Object.create(null);\n  let fragmentSpreadsToRemove: RemoveFragmentSpreadConfig[] = [];\n\n  let modifiedDoc = nullIfDocIsEmpty(\n    visit(doc, {\n      Variable: {\n        enter(node, _key, parent) {\n          // Store each variable that's referenced as part of an argument\n          // (excluding operation definition variables), so we know which\n          // variables are being used. If we later want to remove a variable\n          // we'll first check to see if it's being used, before continuing with\n          // the removal.\n          if (\n            (parent as VariableDefinitionNode).kind !== 'VariableDefinition'\n          ) {\n            variablesInUse[node.name.value] = true;\n          }\n        },\n      },\n\n      Field: {\n        enter(node) {\n          if (directives && node.directives) {\n            // If `remove` is set to true for a directive, and a directive match\n            // is found for a field, remove the field as well.\n            const shouldRemoveField = directives.some(\n              directive => directive.remove,\n            );\n\n            if (\n              shouldRemoveField &&\n              node.directives &&\n              node.directives.some(getDirectiveMatcher(directives))\n            ) {\n              if (node.arguments) {\n                // Store field argument variables so they can be removed\n                // from the operation definition.\n                node.arguments.forEach(arg => {\n                  if (arg.value.kind === 'Variable') {\n                    variablesToRemove.push({\n                      name: (arg.value as VariableNode).name.value,\n                    });\n                  }\n                });\n              }\n\n              if (node.selectionSet) {\n                // Store fragment spread names so they can be removed from the\n                // document.\n                getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(\n                  frag => {\n                    fragmentSpreadsToRemove.push({\n                      name: frag.name.value,\n                    });\n                  },\n                );\n              }\n\n              // Remove the field.\n              return null;\n            }\n          }\n        },\n      },\n\n      FragmentSpread: {\n        enter(node) {\n          // Keep track of referenced fragment spreads. This is used to\n          // determine if top level fragment definitions should be removed.\n          fragmentSpreadsInUse[node.name.value] = true;\n        },\n      },\n\n      Directive: {\n        enter(node) {\n          // If a matching directive is found, remove it.\n          if (getDirectiveMatcher(directives)(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n\n  // If we've removed fields with arguments, make sure the associated\n  // variables are also removed from the rest of the document, as long as they\n  // aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(variablesToRemove, v => !!v.name && !variablesInUse[v.name]).length\n  ) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n\n  // If we've removed selection sets with fragment spreads, make sure the\n  // associated fragment definitions are also removed from the rest of the\n  // document, as long as they aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(fragmentSpreadsToRemove, fs => !!fs.name && !fragmentSpreadsInUse[fs.name])\n      .length\n  ) {\n    modifiedDoc = removeFragmentSpreadFromDocument(\n      fragmentSpreadsToRemove,\n      modifiedDoc,\n    );\n  }\n\n  return modifiedDoc;\n}\n\nexport const addTypenameToDocument = Object.assign(function (\n  doc: DocumentNode\n): DocumentNode {\n  return visit(checkDocument(doc), {\n    SelectionSet: {\n      enter(node, _key, parent) {\n        // Don't add __typename to OperationDefinitions.\n        if (\n          parent &&\n          (parent as OperationDefinitionNode).kind === 'OperationDefinition'\n        ) {\n          return;\n        }\n\n        // No changes if no selections.\n        const { selections } = node;\n        if (!selections) {\n          return;\n        }\n\n        // If selections already have a __typename, or are part of an\n        // introspection query, do nothing.\n        const skip = selections.some(selection => {\n          return (\n            isField(selection) &&\n            (selection.name.value === '__typename' ||\n              selection.name.value.lastIndexOf('__', 0) === 0)\n          );\n        });\n        if (skip) {\n          return;\n        }\n\n        // If this SelectionSet is @export-ed as an input variable, it should\n        // not have a __typename field (see issue #4691).\n        const field = parent as FieldNode;\n        if (\n          isField(field) &&\n          field.directives &&\n          field.directives.some(d => d.name.value === 'export')\n        ) {\n          return;\n        }\n\n        // Create and return a new SelectionSet with a __typename Field.\n        return {\n          ...node,\n          selections: [...selections, TYPENAME_FIELD],\n        };\n      },\n    },\n  });\n}, {\n  added(field: FieldNode): boolean {\n    return field === TYPENAME_FIELD;\n  },\n});\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => {\n    const willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (\n        !directive.arguments ||\n        !directive.arguments.some(arg => arg.name.value === 'key')\n      ) {\n        invariant.warn(\n          'Removing an @connection directive even though it does not have a key. ' +\n            'You may want to use the key parameter to specify a store key.',\n        );\n      }\n    }\n\n    return willRemove;\n  },\n};\n\nexport function removeConnectionDirectiveFromDocument(doc: DocumentNode) {\n  return removeDirectivesFromDocument(\n    [connectionRemoveConfig],\n    checkDocument(doc),\n  );\n}\n\nfunction hasDirectivesInSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode | undefined,\n  nestedCheck = true,\n): boolean {\n  return (\n    !!selectionSet &&\n    selectionSet.selections &&\n    selectionSet.selections.some(selection =>\n      hasDirectivesInSelection(directives, selection, nestedCheck),\n    )\n  );\n}\n\nfunction hasDirectivesInSelection(\n  directives: GetDirectiveConfig[],\n  selection: SelectionNode,\n  nestedCheck = true,\n): boolean {\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return (\n    selection.directives.some(getDirectiveMatcher(directives)) ||\n    (nestedCheck &&\n      hasDirectivesInSelectionSet(\n        directives,\n        selection.selectionSet,\n        nestedCheck,\n      ))\n  );\n}\n\nfunction getArgumentMatcher(config: RemoveArgumentsConfig[]) {\n  return function argumentMatcher(argument: ArgumentNode) {\n    return config.some(\n      (aConfig: RemoveArgumentsConfig) =>\n        argument.value &&\n        argument.value.kind === 'Variable' &&\n        argument.value.name &&\n        (aConfig.name === argument.value.name.value ||\n          (aConfig.test && aConfig.test(argument))),\n    );\n  };\n}\n\nexport function removeArgumentsFromDocument(\n  config: RemoveArgumentsConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const argMatcher = getArgumentMatcher(config);\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      OperationDefinition: {\n        enter(node) {\n          return {\n            ...node,\n            // Remove matching top level variables definitions.\n            variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(\n              varDef =>\n                !config.some(arg => arg.name === varDef.variable.name.value),\n            ) : [],\n          };\n        },\n      },\n\n      Field: {\n        enter(node) {\n          // If `remove` is set to true for an argument, and an argument match\n          // is found for a field, remove the field as well.\n          const shouldRemoveField = config.some(argConfig => argConfig.remove);\n\n          if (shouldRemoveField) {\n            let argMatchCount = 0;\n            if (node.arguments) {\n              node.arguments.forEach(arg => {\n                if (argMatcher(arg)) {\n                  argMatchCount += 1;\n                }\n              });\n            }\n\n            if (argMatchCount === 1) {\n              return null;\n            }\n          }\n        },\n      },\n\n      Argument: {\n        enter(node) {\n          // Remove all matching arguments.\n          if (argMatcher(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n}\n\nexport function removeFragmentSpreadFromDocument(\n  config: RemoveFragmentSpreadConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  function enter(\n    node: FragmentSpreadNode | FragmentDefinitionNode,\n  ): null | void {\n    if (config.some(def => def.name === node.name.value)) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      FragmentSpread: { enter },\n      FragmentDefinition: { enter },\n    }),\n  );\n}\n\nfunction getAllFragmentSpreadsFromSelectionSet(\n  selectionSet: SelectionSetNode,\n): FragmentSpreadNode[] {\n  const allFragments: FragmentSpreadNode[] = [];\n\n  selectionSet.selections.forEach(selection => {\n    if (\n      (isField(selection) || isInlineFragment(selection)) &&\n      selection.selectionSet\n    ) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(\n        frag => allFragments.push(frag),\n      );\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n\n  return allFragments;\n}\n\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nexport function buildQueryFromSelectionSet(\n  document: DocumentNode,\n): DocumentNode {\n  const definition = getMainDefinition(document);\n  const definitionOperation = (<OperationDefinitionNode>definition).operation;\n\n  if (definitionOperation === 'query') {\n    // Already a query, so return the existing document.\n    return document;\n  }\n\n  // Build a new query using the selection set of the main operation.\n  const modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter(node) {\n        return {\n          ...node,\n          operation: 'query',\n        };\n      },\n    },\n  });\n  return modifiedDoc;\n}\n\n// Remove fields / selection sets that include an @client directive.\nexport function removeClientSetsFromDocument(\n  document: DocumentNode,\n): DocumentNode | null {\n  checkDocument(document);\n\n  let modifiedDoc = removeDirectivesFromDocument(\n    [\n      {\n        test: (directive: DirectiveNode) => directive.name.value === 'client',\n        remove: true,\n      },\n    ],\n    document,\n  );\n\n  // After a fragment definition has had its @client related document\n  // sets removed, if the only field it has left is a __typename field,\n  // remove the entire fragment operation to prevent it from being fired\n  // on the server.\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter(node) {\n          if (node.selectionSet) {\n            const isTypenameOnly = node.selectionSet.selections.every(\n              selection =>\n                isField(selection) && selection.name.value === '__typename',\n            );\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        },\n      },\n    });\n  }\n\n  return modifiedDoc;\n}\n","const prefixCounts = new Map<string, number>();\n\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nexport function makeUniqueId(prefix: string) {\n  const count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return `${prefix}:${count}:${Math.random().toString(36).slice(2)}`;\n}\n","import { Observer } from \"./Observable\";\n\nexport function iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A,\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach(obs => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach(obs => (obs as any)[method](argument));\n}\n","import { Observable } from \"./Observable\";\nimport { canUseSymbol } from \"../common/canUse\";\n\n// Generic implementations of Observable.prototype methods like map and\n// filter need to know how to create a new Observable from an Observable\n// subclass (like Concast or ObservableQuery). Those methods assume\n// (perhaps unwisely?) that they can call the subtype's constructor with a\n// Subscriber function, even though the subclass constructor might expect\n// different parameters. Defining this static Symbol.species property on\n// the subclass is a hint to generic Observable code to use the default\n// constructor instead of trying to do `new Subclass(observer => ...)`.\nexport function fixObservableSubclass<\n  S extends new (...args: any[]) => Observable<any>,\n>(subclass: S): S {\n  function set(key: symbol | string) {\n    // Object.defineProperty is necessary because the Symbol.species\n    // property is a getter by default in modern JS environments, so we\n    // can't assign to it with a normal assignment expression.\n    Object.defineProperty(subclass, key, { value: Observable });\n  }\n  if (canUseSymbol && Symbol.species) {\n    set(Symbol.species);\n  }\n  // The \"@@species\" string is used as a fake Symbol.species value in some\n  // polyfill systems (including the SymbolSpecies variable used by\n  // zen-observable), so we should set it as well, to be safe.\n  set(\"@@species\");\n  return subclass;\n}\n","import { Observable, Observer, ObservableSubscription, Subscriber } from \"./Observable\";\nimport { iterateObserversSafely } from \"./iteration\";\nimport { fixObservableSubclass } from \"./subclassing\";\n\ntype MaybeAsync<T> = T | PromiseLike<T>;\n\nfunction isPromiseLike<T>(value: MaybeAsync<T>): value is PromiseLike<T> {\n  return value && typeof (value as any).then === \"function\";\n}\n\n// Any individual Source<T> can be an Observable<T> or a promise for one.\ntype Source<T> = MaybeAsync<Observable<T>>;\n\nexport type ConcastSourcesIterable<T> = Iterable<Source<T>>;\n\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nexport class Concast<T> extends Observable<T> {\n  // Active observers receiving broadcast messages. Thanks to this.latest,\n  // we can assume all observers in this Set have received the same most\n  // recent message, though possibly at different times in the past.\n  private observers = new Set<Observer<T>>();\n\n  // This property starts off undefined to indicate the initial\n  // subscription has not yet begun, then points to each source\n  // subscription in turn, and finally becomes null after the sources have\n  // been exhausted. After that, it stays null.\n  private sub?: ObservableSubscription | null;\n\n  // Not only can the individual elements of the iterable be promises, but\n  // also the iterable itself can be wrapped in a promise.\n  constructor(sources: MaybeAsync<ConcastSourcesIterable<T>> | Subscriber<T>) {\n    super(observer => {\n      this.addObserver(observer);\n      return () => this.removeObserver(observer);\n    });\n\n    // Suppress rejection warnings for this.promise, since it's perfectly\n    // acceptable to pay no attention to this.promise if you're consuming\n    // the results through the normal observable API.\n    this.promise.catch(_ => {});\n\n    // If someone accidentally tries to create a Concast using a subscriber\n    // function, recover by creating an Observable from that subscriber and\n    // using it as the source.\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then(\n        iterable => this.start(iterable),\n        this.handlers.error,\n      );\n    } else {\n      this.start(sources);\n    }\n  }\n\n  // A consumable array of source observables, incrementally consumed\n  // each time this.handlers.complete is called.\n  private sources: Source<T>[];\n\n  private start(sources: ConcastSourcesIterable<T>) {\n    if (this.sub !== void 0) return;\n\n    // In practice, sources is most often simply an Array of observables.\n    // TODO Consider using sources[Symbol.iterator]() to take advantage\n    // of the laziness of non-Array iterables.\n    this.sources = Array.from(sources);\n\n    // Calling this.handlers.complete() kicks off consumption of the first\n    // source observable. It's tempting to do this step lazily in\n    // addObserver, but this.promise can be accessed without calling\n    // addObserver, so consumption needs to begin eagerly.\n    this.handlers.complete();\n  }\n\n  private deliverLastMessage(observer: Observer<T>) {\n    if (this.latest) {\n      const nextOrError = this.latest[0];\n      const method = observer[nextOrError];\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n      // If the subscription is already closed, and the last message was\n      // a 'next' message, simulate delivery of the final 'complete'\n      // message again.\n      if (this.sub === null &&\n          nextOrError === \"next\" &&\n          observer.complete) {\n        observer.complete();\n      }\n    }\n  }\n\n  // Note: cleanup observers do not count towards this total.\n  private addCount = 0;\n\n  public addObserver(observer: Observer<T>) {\n    if (!this.observers.has(observer)) {\n      // Immediately deliver the most recent message, so we can always\n      // be sure all observers have the latest information.\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n      ++this.addCount;\n    }\n  }\n\n  public removeObserver(\n    observer: Observer<T>,\n    quietly?: boolean,\n  ) {\n    if (this.observers.delete(observer) &&\n        --this.addCount < 1 &&\n        !quietly) {\n      // In case there are still any cleanup observers in this.observers,\n      // and no error or completion has been broadcast yet, make sure\n      // those observers receive an error that terminates them.\n      this.handlers.error(new Error(\"Observable cancelled prematurely\"));\n    }\n  }\n\n  // Any Concast object can be trivially converted to a Promise, without\n  // having to create a new wrapper Observable. This promise provides an\n  // easy way to observe the final state of the Concast.\n  private resolve: (result?: T | PromiseLike<T>) => void;\n  private reject: (reason: any) => void;\n  public readonly promise = new Promise<T>((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n\n  // Name and argument of the most recently invoked observer method, used\n  // to deliver latest results immediately to new observers.\n  private latest?: [\"next\" | \"error\", any];\n\n  // Bound handler functions that can be reused for every internal\n  // subscription.\n  private handlers = {\n    next: (result: T) => {\n      if (this.sub !== null) {\n        this.latest = [\"next\", result];\n        iterateObserversSafely(this.observers, \"next\", result);\n      }\n    },\n\n    error: (error: any) => {\n      const { sub } = this;\n      if (sub !== null) {\n        // Delay unsubscribing from the underlying subscription slightly,\n        // so that immediately subscribing another observer can keep the\n        // subscription active.\n        if (sub) setTimeout(() => sub.unsubscribe());\n        this.sub = null;\n        this.latest = [\"error\", error];\n        this.reject(error);\n        iterateObserversSafely(this.observers, \"error\", error);\n      }\n    },\n\n    complete: () => {\n      if (this.sub !== null) {\n        const value = this.sources.shift();\n        if (!value) {\n          this.sub = null;\n          if (this.latest &&\n              this.latest[0] === \"next\") {\n            this.resolve(this.latest[1]);\n          } else {\n            this.resolve();\n          }\n          // We do not store this.latest = [\"complete\"], because doing so\n          // discards useful information about the previous next (or\n          // error) message. Instead, if new observers subscribe after\n          // this Concast has completed, they will receive the final\n          // 'next' message (unless there was an error) immediately\n          // followed by a 'complete' message (see addObserver).\n          iterateObserversSafely(this.observers, \"complete\");\n        } else if (isPromiseLike(value)) {\n          value.then(obs => this.sub = obs.subscribe(this.handlers));\n        } else {\n          this.sub = value.subscribe(this.handlers);\n        }\n      }\n    },\n  };\n\n  public cleanup(callback: () => any) {\n    let called = false;\n    const once = () => {\n      if (!called) {\n        called = true;\n        // Removing a cleanup observer should not unsubscribe from the\n        // underlying Observable, so the only removeObserver behavior we\n        // need here is to delete observer from this.observers.\n        this.observers.delete(observer);\n        callback();\n      }\n    }\n    const observer = {\n      next: once,\n      error: once,\n      complete: once,\n    };\n    const count = this.addCount;\n    this.addObserver(observer);\n    // Normally addObserver increments this.addCount, but we can \"hide\"\n    // cleanup observers by restoring this.addCount to its previous value\n    // after adding any cleanup observer.\n    this.addCount = count;\n  }\n\n  // A public way to abort observation and broadcast.\n  public cancel = (reason: any) => {\n    this.reject(reason);\n    this.sources = [];\n    this.handlers.complete();\n  }\n}\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\nfixObservableSubclass(Concast);\n","export function isNonEmptyArray<T>(value?: ArrayLike<T>): value is Array<T> {\n  return Array.isArray(value) && value.length > 0;\n}\n","import '../utilities/globals';\n\nimport { GraphQLError } from 'graphql';\n\nimport { isNonEmptyArray } from '../utilities';\nimport { ServerParseError } from '../link/http';\nimport { ServerError } from '../link/utils';\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  let message = '';\n  // If we have GraphQL errors present, add that to the error message.\n  if (isNonEmptyArray(err.graphQLErrors) || isNonEmptyArray(err.clientErrors)) {\n    const errors = ((err.graphQLErrors || []) as readonly Error[])\n      .concat(err.clientErrors || []);\n    errors.forEach((error: Error) => {\n      const errorMessage = error\n        ? error.message\n        : 'Error message not found.';\n      message += `${errorMessage}\\n`;\n    });\n  }\n\n  if (err.networkError) {\n    message += `${err.networkError.message}\\n`;\n  }\n\n  // strip newline from the end of the message\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nexport type GraphQLErrors = ReadonlyArray<GraphQLError>;\n\nexport type NetworkError = Error | ServerParseError | ServerError | null;\n\nexport class ApolloError extends Error {\n  public message: string;\n  public graphQLErrors: GraphQLErrors;\n  public clientErrors: ReadonlyArray<Error>;\n  public networkError: Error | ServerParseError | ServerError | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    clientErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: {\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\n    clientErrors?: ReadonlyArray<Error>;\n    networkError?: Error | ServerParseError | ServerError | null;\n    errorMessage?: string;\n    extraInfo?: any;\n  }) {\n    super(errorMessage);\n    this.graphQLErrors = graphQLErrors || [];\n    this.clientErrors = clientErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n","/**\n * The current status of a query’s execution in our system.\n */\nexport enum NetworkStatus {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  loading = 1,\n\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n  setVariables = 2,\n\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n  fetchMore = 3,\n\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n  refetch = 4,\n\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n  poll = 6,\n\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n  ready = 7,\n\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n  error = 8,\n}\n\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(\n  networkStatus?: NetworkStatus,\n): boolean {\n  return networkStatus ? networkStatus < 7 : false;\n}\n","const { toString } = Object.prototype;\n\n/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep<T>(value: T): T {\n  return cloneDeepHelper(value);\n}\n\nfunction cloneDeepHelper<T>(val: T, seen?: Map<any, any>): T {\n  switch (toString.call(val)) {\n  case \"[object Array]\": {\n    seen = seen || new Map;\n    if (seen.has(val)) return seen.get(val);\n    const copy: T & any[] = (val as any).slice(0);\n    seen.set(val, copy);\n    copy.forEach(function (child, i) {\n      copy[i] = cloneDeepHelper(child, seen);\n    });\n    return copy;\n  }\n\n  case \"[object Object]\": {\n    seen = seen || new Map;\n    if (seen.has(val)) return seen.get(val);\n    // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n    // possible in all JS environments, so we will assume they exist/work.\n    const copy = Object.create(Object.getPrototypeOf(val));\n    seen.set(val, copy);\n    Object.keys(val).forEach(key => {\n      copy[key] = cloneDeepHelper((val as any)[key], seen);\n    });\n    return copy;\n  }\n\n  default:\n    return val;\n  }\n}\n","import { invariant } from '../utilities/globals';\n\nimport { equal } from '@wry/equality';\n\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  Concast,\n  compact,\n  cloneDeep,\n  getOperationDefinition,\n  Observable,\n  Observer,\n  ObservableSubscription,\n  iterateObserversSafely,\n  isNonEmptyArray,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from '../utilities';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\nimport { ApolloQueryResult, OperationVariables } from './types';\nimport {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  WatchQueryFetchPolicy,\n} from './watchQueryOptions';\nimport { QueryInfo } from './QueryInfo';\nimport { MissingFieldError } from '../cache';\nimport { MissingTree } from '../cache/core/types/common';\n\nconst {\n  assign,\n  hasOwnProperty,\n} = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\nlet warnedAboutUpdateQuery = false;\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  // Original value of this.options.fetchPolicy (defaulting to \"cache-first\"),\n  // from whenever the ObservableQuery was first created.\n  private initialFetchPolicy: WatchQueryFetchPolicy;\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private last?: Last<TData, TVariables>;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // active state\n    this.isTornDown = false;\n\n    // query information\n    this.options = options;\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(options.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n\n    this.initialFetchPolicy = options.fetchPolicy || \"cache-first\";\n\n    // related classes\n    this.queryManager = queryManager;\n    this.queryInfo = queryInfo;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn’t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache' ||\n      fetchPolicy === 'standby' ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.transform(this.options.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === 'cache-first' ||\n          fetchPolicy === 'cache-only')\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(newResult: ApolloQueryResult<TData>) {\n    return !this.last || !equal(this.last.result, newResult);\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean,\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(variablesMustMatch?: boolean): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.options.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(v => v.variable.name.value === \"variables\")) {\n        invariant.warn(`Called refetch(${\n          JSON.stringify(variables)\n        }) for query ${\n          queryDef.name?.value || JSON.stringify(queryDef)\n        }, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`);\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  public fetchMore(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>,\n  ): Promise<ApolloQueryResult<TData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.options.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions;\n\n    const qid = this.queryManager.generateQueryId();\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.queryInfo.networkStatus = NetworkStatus.fetchMore;\n      this.observe();\n    }\n\n    return this.queryManager.fetchQuery(\n      qid,\n      combinedOptions,\n      NetworkStatus.fetchMore,\n    ).then(fetchMoreResult => {\n      const data = fetchMoreResult.data as TData;\n      const { updateQuery } = fetchMoreOptions;\n\n      if (updateQuery) {\n        if (__DEV__ &&\n            !warnedAboutUpdateQuery) {\n          invariant.warn(\n`The updateQuery callback for fetchMore is deprecated, and will be removed\nin the next major version of Apollo Client.\n\nPlease convert updateQuery functions to field policies with appropriate\nread and merge functions, or use/adapt a helper function (such as\nconcatPagination, offsetLimitPagination, or relayStylePagination) from\n@apollo/client/utilities.\n\nThe field policy system handles pagination more effectively than a\nhand-written updateQuery function, and you only need to define the policy\nonce, rather than every time you call fetchMore.`);\n          warnedAboutUpdateQuery = true;\n        }\n        this.updateQuery(previous => updateQuery(previous, {\n          fetchMoreResult: data,\n          variables: combinedOptions.variables as TVariables,\n        }));\n      } else {\n        // If we're using a field policy instead of updateQuery, the only\n        // thing we need to do is write the new data to the cache using\n        // combinedOptions.variables (instead of this.variables, which is\n        // what this.updateQuery uses, because it works by abusing the\n        // original field value, keyed by the original variables).\n        this.queryManager.cache.writeQuery({\n          query: combinedOptions.query,\n          variables: combinedOptions.variables,\n          data,\n        });\n      }\n\n      return fetchMoreResult as ApolloQueryResult<TData>;\n\n    }).finally(() => {\n      this.queryManager.stopQuery(qid);\n      this.reobserve();\n    });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  /**\n   * This is for *internal* use only. Most users should instead use `refetch`\n   * in order to be properly notified of results even when they come from cache.\n   *\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.initialFetchPolicy,\n      variables,\n    }, NetworkStatus.setVariables);\n  }\n\n  public updateQuery<TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n  ): Concast<ApolloQueryResult<TData>> {\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager.fetchQueryObservable(\n      this.queryId,\n      options,\n      newNetworkStatus,\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: {\n        pollInterval,\n      },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo &&\n        pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (!isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n          this.reobserve({\n            fetchPolicy: \"network-only\",\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      };\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables,\n  ) {\n    this.last = {\n      ...this.last,\n      result: this.queryManager.assumeImmutableResults\n        ? newResult\n        : cloneDeep(newResult),\n      variables,\n    };\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n    return this.last;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n\n    const options = useDisposableConcast\n      // Disposable Concast fetches receive a shallow copy of this.options\n      // (merged with newOptions), leaving this.options unmodified.\n      ? compact(this.options, newOptions)\n      : assign(this.options, compact(newOptions));\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !newOptions.fetchPolicy &&\n        !equal(newOptions.variables, oldVariables)\n      ) {\n        options.fetchPolicy = this.initialFetchPolicy;\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    const variables = options.variables && { ...options.variables };\n    const concast = this.fetch(options, newNetworkStatus);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: result => {\n        this.reportResult(result, variables);\n      },\n      error: error => {\n        this.reportError(error, variables);\n      },\n    };\n\n    if (!useDisposableConcast) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object, in part so\n      // that we can remove it here without triggering any unsubscriptions,\n      // because we just want to ignore the old observable, not prematurely shut\n      // it down, since other consumers may be awaiting this.concast.promise.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer, true);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast.promise;\n  }\n\n  // Pass the current result to this.observer.next without applying any\n  // fetch policies.\n  private observe() {\n    // Passing false is important so that this.getCurrentResult doesn't\n    // save the fetchMore result as this.lastResult, causing it to be\n    // ignored due to the this.isDifferentFromLastResult check in\n    // this.observer.next.\n    this.reportResult(\n      this.getCurrentResult(false),\n      this.variables,\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined,\n  ) {\n    const lastError = this.getLastError();\n    if (lastError || this.isDifferentFromLastResult(result)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  }\n\n  private reportError(\n    error: ApolloError,\n    variables: TVariables | undefined,\n  ) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, 'error', this.last!.error = error);\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined,\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: ${\n      JSON.stringify(missing)\n    }`, missing);\n  }\n}\n\n// Adopt options.nextFetchPolicy (if defined) as a replacement for\n// options.fetchPolicy. Since this method also removes options.nextFetchPolicy\n// from options, the adoption tends to be idempotent, unless nextFetchPolicy\n// is a function that keeps setting options.nextFetchPolicy (uncommon).\nexport function applyNextFetchPolicy<TData, TVars>(\n  options: Pick<\n    WatchQueryOptions<TVars, TData>,\n    | \"fetchPolicy\"\n    | \"nextFetchPolicy\"\n  >,\n) {\n  const {\n    fetchPolicy = \"cache-first\",\n    nextFetchPolicy,\n  } = options;\n\n  if (nextFetchPolicy) {\n    // When someone chooses \"cache-and-network\" or \"network-only\" as their\n    // initial FetchPolicy, they often do not want future cache updates to\n    // trigger unconditional network requests, which is what repeatedly\n    // applying the \"cache-and-network\" or \"network-only\" policies would seem\n    // to imply. Instead, when the cache reports an update after the initial\n    // network request, it may be desirable for subsequent network requests to\n    // be triggered only if the cache result is incomplete. To that end, the\n    // options.nextFetchPolicy option provides an easy way to update\n    // options.fetchPolicy after the initial network request, without having to\n    // call observableQuery.setOptions.\n    options.fetchPolicy = typeof nextFetchPolicy === \"function\"\n      ? nextFetchPolicy.call(options, fetchPolicy)\n      : nextFetchPolicy;\n  }\n}\n","type Context = {\n  parent: Context | null;\n  slots: { [slotId: string]: any };\n}\n\n// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nlet currentContext: Context | null = null;\n\n// This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\nconst MISSING_VALUE: any = {};\n\nlet idCounter = 1;\n\n// Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\nconst makeSlotClass = () => class Slot<TValue> {\n  // If you have a Slot object, you can find out its slot.id, but you cannot\n  // guess the slot.id of a Slot you don't have access to, thanks to the\n  // randomized suffix.\n  public readonly id = [\n    \"slot\",\n    idCounter++,\n    Date.now(),\n    Math.random().toString(36).slice(2),\n  ].join(\":\");\n\n  public hasValue() {\n    for (let context = currentContext; context; context = context.parent) {\n      // We use the Slot object iself as a key to its value, which means the\n      // value cannot be obtained without a reference to the Slot object.\n      if (this.id in context.slots) {\n        const value = context.slots[this.id];\n        if (value === MISSING_VALUE) break;\n        if (context !== currentContext) {\n          // Cache the value in currentContext.slots so the next lookup will\n          // be faster. This caching is safe because the tree of contexts and\n          // the values of the slots are logically immutable.\n          currentContext!.slots[this.id] = value;\n        }\n        return true;\n      }\n    }\n    if (currentContext) {\n      // If a value was not found for this Slot, it's never going to be found\n      // no matter how many times we look it up, so we might as well cache\n      // the absence of the value, too.\n      currentContext.slots[this.id] = MISSING_VALUE;\n    }\n    return false;\n  }\n\n  public getValue(): TValue | undefined {\n    if (this.hasValue()) {\n      return currentContext!.slots[this.id] as TValue;\n    }\n  }\n\n  public withValue<TResult, TArgs extends any[], TThis = any>(\n    value: TValue,\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ): TResult {\n    const slots = {\n      __proto__: null,\n      [this.id]: value,\n    };\n    const parent = currentContext;\n    currentContext = { parent, slots };\n    try {\n      // Function.prototype.apply allows the arguments array argument to be\n      // omitted or undefined, so args! is fine here.\n      return callback.apply(thisArg!, args!);\n    } finally {\n      currentContext = parent;\n    }\n  }\n\n  // Capture the current context and wrap a callback function so that it\n  // reestablishes the captured context when called.\n  static bind<TArgs extends any[], TResult, TThis = any>(\n    callback: (this: TThis, ...args: TArgs) => TResult,\n  ) {\n    const context = currentContext;\n    return function (this: TThis) {\n      const saved = currentContext;\n      try {\n        currentContext = context;\n        return callback.apply(this, arguments as any);\n      } finally {\n        currentContext = saved;\n      }\n    } as typeof callback;\n  }\n\n  // Immediately run a callback function without any captured context.\n  static noContext<TResult, TArgs extends any[], TThis = any>(\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ) {\n    if (currentContext) {\n      const saved = currentContext;\n      try {\n        currentContext = null;\n        // Function.prototype.apply allows the arguments array argument to be\n        // omitted or undefined, so args! is fine here.\n        return callback.apply(thisArg!, args!);\n      } finally {\n        currentContext = saved;\n      }\n    } else {\n      return callback.apply(thisArg!, args!);\n    }\n  }\n};\n\n// We store a single global implementation of the Slot class as a permanent\n// non-enumerable symbol property of the Array constructor. This obfuscation\n// does nothing to prevent access to the Slot class, but at least it ensures\n// the implementation (i.e. currentContext) cannot be tampered with, and all\n// copies of the @wry/context package (hopefully just one) will share the\n// same Slot implementation. Since the first copy of the @wry/context package\n// to be imported wins, this technique imposes a very high cost for any\n// future breaking changes to the Slot class.\nconst globalKey = \"@wry/context:Slot\";\nconst host = Array as any;\n\nexport const Slot: ReturnType<typeof makeSlotClass> = host[globalKey] || function () {\n  const Slot = makeSlotClass();\n  try {\n    Object.defineProperty(host, globalKey, {\n      value: host[globalKey] = Slot,\n      enumerable: false,\n      writable: false,\n      configurable: false,\n    });\n  } finally {\n    return Slot;\n  }\n}();\n","import { Slot } from \"./slot\";\nexport { Slot }\nexport const { bind, noContext } = Slot;\n\n// Relying on the @types/node declaration of global.setTimeout can make\n// things tricky for dowstream projects (see PR #7).\ndeclare function setTimeout(\n  callback: (...args: any[]) => any,\n  ms?: number,\n  ...args: any[]\n): any;\n\n// Like global.setTimeout, except the callback runs with captured context.\nexport { setTimeoutWithContext as setTimeout };\nfunction setTimeoutWithContext(callback: () => any, delay: number) {\n  return setTimeout(bind(callback), delay);\n}\n\n// Turn any generator function into an async function (using yield instead\n// of await), with context automatically preserved across yields.\nexport function asyncFromGen<\n  TArgs extends any[],\n  TYield = any,\n  TReturn = any,\n  TNext = any,\n>(\n  genFn: (...args: TArgs) => Generator<TYield, TReturn, TNext>\n) {\n  return function (this: any) {\n    const gen = genFn.apply(this, arguments as any);\n\n    type Method = (\n      this: Generator<TYield, TReturn, TNext>,\n      arg: any,\n    ) => IteratorResult<TYield, TReturn>;\n\n    const boundNext: Method = bind(gen.next);\n    const boundThrow: Method = bind(gen.throw!);\n\n    return new Promise((resolve, reject) => {\n      function invoke(method: Method, argument: any) {\n        try {\n          var result: any = method.call(gen, argument);\n        } catch (error) {\n          return reject(error);\n        }\n        const next = result.done ? resolve : invokeNext;\n        if (isPromiseLike(result.value)) {\n          result.value.then(next, result.done ? reject : invokeThrow);\n        } else {\n          next(result.value);\n        }\n      }\n      const invokeNext = (value?: any) => invoke(boundNext, value);\n      const invokeThrow = (error: any) => invoke(boundThrow, error);\n      invokeNext();\n    });\n  } as (...args: TArgs) => Promise<any>;\n}\n\nfunction isPromiseLike(value: any): value is PromiseLike<any> {\n  return value && typeof value.then === \"function\";\n}\n\n// If you use the fibers npm package to implement coroutines in Node.js,\n// you should call this function at least once to ensure context management\n// remains coherent across any yields.\nconst wrappedFibers: Function[] = [];\nexport function wrapYieldingFiberMethods<F extends Function>(Fiber: F): F {\n  // There can be only one implementation of Fiber per process, so this array\n  // should never grow longer than one element.\n  if (wrappedFibers.indexOf(Fiber) < 0) {\n    const wrap = (obj: any, method: string) => {\n      const fn = obj[method];\n      obj[method] = function () {\n        return noContext(fn, arguments as any, this);\n      };\n    }\n    // These methods can yield, according to\n    // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\n    wrap(Fiber, \"yield\");\n    wrap(Fiber.prototype, \"run\");\n    wrap(Fiber.prototype, \"throwInto\");\n    wrappedFibers.push(Fiber);\n  }\n  return Fiber;\n}\n","interface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class Cache<K = any, V = any> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  public get(key: K): V | undefined {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  private getNode(key: K): Node<K, V> | undefined {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const { older, newer } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older!.newer = node;\n\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  public set(key: K, value: V): V {\n    let node = this.getNode(key);\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n\n    this.map.set(key, node);\n\n    return node.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K): boolean {\n    const node = this.map.get(key);\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { AnyEntry } from \"./entry\";\nimport { Slot } from \"@wry/context\";\n\nexport const parentEntrySlot = new Slot<AnyEntry>();\n\nexport {\n  bind as bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"@wry/context\";\n","export const {\n  hasOwnProperty,\n} = Object.prototype;\n\nexport const {\n  // This Array.from polyfill is restricted to working with Set<any> for now,\n  // but we can improve the polyfill and add other input types, as needed. Note\n  // that this fallback implementation will only be used if the host environment\n  // does not support a native Array.from function. In most modern JS runtimes,\n  // the toArray function exported here will be === Array.from.\n  from: toArray = (collection: Set<any>) => {\n    const array: any[] = [];\n    collection.forEach(item => array.push(item));\n    return array;\n  },\n} = Array;\n\nexport type Unsubscribable = {\n  unsubscribe?: void | (() => any);\n}\n\nexport function maybeUnsubscribe(entryOrDep: Unsubscribable) {\n  const { unsubscribe } = entryOrDep;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n","import { parentEntrySlot } from \"./context\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { Dep } from \"./dep\";\nimport { maybeUnsubscribe, toArray, Unsubscribable } from \"./helpers\";\n\nconst emptySetPool: Set<any>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe: Unsubscribable[\"unsubscribe\"];\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n  ) {\n    ++Entry.count;\n  }\n\n  public peek(): TValue | undefined {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(args: TArgs): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this)\n      ? reallyRecompute(this, args)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    this.setDirty();\n\n    // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n    forgetChildren(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    eachParent(this, (parent, child) => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  public forget() {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  }\n\n  private deps: Set<Dep<any>> | null = null;\n\n  public dependOn(dep: Dep<any>) {\n    dep.add(this);\n    if (! this.deps) {\n      this.deps = emptySetPool.pop() || new Set<Set<AnyEntry>>();\n    }\n    this.deps.add(dep);\n  }\n\n  public forgetDeps() {\n    if (this.deps) {\n      toArray(this.deps).forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry, args: any[]) {\n  forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry, args: any[]) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  eachParent(child, reportDirtyChild);\n}\n\nfunction reportClean(child: AnyEntry) {\n  eachParent(child, reportCleanChild);\n}\n\nfunction eachParent(\n  child: AnyEntry,\n  callback: (parent: AnyEntry, child: AnyEntry) => any,\n) {\n  const parentCount = child.parents.size;\n  if (parentCount) {\n    const parents = toArray(child.parents);\n    for (let i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  const parentWasClean = !mightBeDirty(parent);\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n\n  // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry, args: any[]) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n","import { AnyEntry } from \"./entry\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { parentEntrySlot } from \"./context\";\nimport { hasOwnProperty, Unsubscribable, maybeUnsubscribe, toArray } from \"./helpers\";\n\ntype EntryMethodName = keyof typeof EntryMethods;\nconst EntryMethods = {\n  setDirty: true, // Mark parent Entry as needing to be recomputed (default)\n  dispose: true,  // Detach parent Entry from parents and children, but leave in LRU cache\n  forget: true,   // Fully remove parent Entry from LRU cache and computation graph\n};\n\nexport type OptimisticDependencyFunction<TKey> =\n  ((key: TKey) => void) & {\n    dirty: (key: TKey, entryMethodName?: EntryMethodName) => void;\n  };\n\nexport type Dep<TKey> = Set<AnyEntry> & {\n  subscribe: OptimisticWrapOptions<[TKey]>[\"subscribe\"];\n} & Unsubscribable;\n\nexport function dep<TKey>(options?: {\n  subscribe: Dep<TKey>[\"subscribe\"];\n}) {\n  const depsByKey = new Map<TKey, Dep<TKey>>();\n  const subscribe = options && options.subscribe;\n\n  function depend(key: TKey) {\n    const parent = parentEntrySlot.getValue();\n    if (parent) {\n      let dep = depsByKey.get(key);\n      if (!dep) {\n        depsByKey.set(key, dep = new Set as Dep<TKey>);\n      }\n      parent.dependOn(dep);\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep);\n        dep.unsubscribe = subscribe(key);\n      }\n    }\n  }\n\n  depend.dirty = function dirty(\n    key: TKey,\n    entryMethodName?: EntryMethodName,\n  ) {\n    const dep = depsByKey.get(key);\n    if (dep) {\n      const m: EntryMethodName = (\n        entryMethodName &&\n        hasOwnProperty.call(EntryMethods, entryMethodName)\n      ) ? entryMethodName : \"setDirty\";\n      // We have to use toArray(dep).forEach instead of dep.forEach, because\n      // modifying a Set while iterating over it can cause elements in the Set\n      // to be removed from the Set before they've been iterated over.\n      toArray(dep).forEach(entry => entry[m]());\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n\n  return depend as OptimisticDependencyFunction<TKey>;\n}\n","import { Trie } from \"@wry/trie\";\n\nimport { Cache } from \"./cache\";\nimport { Entry, AnyEntry } from \"./entry\";\nimport { parentEntrySlot } from \"./context\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"./context\";\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep, OptimisticDependencyFunction } from \"./dep\";\n\nfunction makeDefaultMakeCacheKeyFunction<\n  TKeyArgs extends any[],\n  TCacheKey = any,\n>(): (...args: TKeyArgs) => TCacheKey {\n  const keyTrie = new Trie<TCacheKey>(typeof WeakMap === \"function\");\n  return function () {\n    return keyTrie.lookupArray(arguments);\n  };\n}\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nexport const defaultMakeCacheKey = makeDefaultMakeCacheKeyFunction();\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n> = ((...args: TArgs) => TResult) & {\n  // Get the current number of Entry objects in the LRU cache.\n  readonly size: number;\n\n  // \"Dirty\" any cached Entry stored for the given arguments, marking that Entry\n  // and its ancestors as potentially needing to be recomputed. The .dirty(...)\n  // method of an optimistic function takes the same parameter types as the\n  // original function by default, unless a keyArgs function is configured, and\n  // then it matters that .dirty takes TKeyArgs instead of TArgs.\n  dirty: (...args: TKeyArgs) => void;\n  // A version of .dirty that accepts a key returned by .getKey.\n  dirtyKey: (key: TCacheKey) => void;\n\n  // Examine the current value without recomputing it.\n  peek: (...args: TKeyArgs) => TResult | undefined;\n  // A version of .peek that accepts a key returned by .getKey.\n  peekKey: (key: TCacheKey) => TResult | undefined;\n\n  // Completely remove the entry from the cache, dirtying any parent entries.\n  forget: (...args: TKeyArgs) => boolean;\n  // A version of .forget that accepts a key returned by .getKey.\n  forgetKey: (key: TCacheKey) => boolean;\n\n  // In order to use the -Key version of the above functions, you need a key\n  // rather than the arguments used to compute the key. These two functions take\n  // TArgs or TKeyArgs and return the corresponding TCacheKey. If no keyArgs\n  // function has been configured, TArgs will be the same as TKeyArgs, and thus\n  // getKey and makeCacheKey will be synonymous.\n  getKey: (...args: TArgs) => TCacheKey;\n\n  // This property is equivalent to the makeCacheKey function provided in the\n  // OptimisticWrapOptions, or (if no options.makeCacheKey function is provided)\n  // a default implementation of makeCacheKey.\n  makeCacheKey: (...args: TKeyArgs) => TCacheKey;\n};\n\nexport type OptimisticWrapOptions<\n  TArgs extends any[],\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // Transform the raw arguments to some other type of array, which will then\n  // be passed to makeCacheKey.\n  keyArgs?: (...args: TArgs) => TKeyArgs;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: TKeyArgs) => TCacheKey;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => void | (() => any);\n};\n\nconst caches = new Set<Cache<any, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n  TCacheKey = any,\n>(\n  originalFunction: (...args: TArgs) => TResult,\n  options: OptimisticWrapOptions<TArgs, TKeyArgs> = Object.create(null),\n) {\n  const cache = new Cache<TCacheKey, Entry<TArgs, TResult>>(\n    options.max || Math.pow(2, 16),\n    entry => entry.dispose(),\n  );\n\n  const keyArgs = options.keyArgs;\n  const makeCacheKey = options.makeCacheKey ||\n    makeDefaultMakeCacheKeyFunction<TKeyArgs, TCacheKey>();\n\n  const optimistic = function (): TResult {\n    const key = makeCacheKey.apply(\n      null,\n      keyArgs ? keyArgs.apply(null, arguments as any) : arguments as any\n    );\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    let entry = cache.get(key)!;\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.subscribe = options.subscribe;\n      // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n      entry.forget = () => cache.delete(key);\n    }\n\n    const value = entry.recompute(\n      Array.prototype.slice.call(arguments) as TArgs,\n    );\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    return value;\n  } as OptimisticWrapperFunction<TArgs, TResult, TKeyArgs, TCacheKey>;\n\n  Object.defineProperty(optimistic, \"size\", {\n    get() {\n      return cache[\"map\"].size;\n    },\n    configurable: false,\n    enumerable: false,\n  });\n\n  function dirtyKey(key: TCacheKey) {\n    const entry = cache.get(key);\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n  optimistic.dirtyKey = dirtyKey;\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function peekKey(key: TCacheKey) {\n    const entry = cache.get(key);\n    if (entry) {\n      return entry.peek();\n    }\n  }\n  optimistic.peekKey = peekKey;\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  function forgetKey(key: TCacheKey) {\n    return cache.delete(key);\n  }\n  optimistic.forgetKey = forgetKey;\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments as any));\n  };\n\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments as any));\n  } : makeCacheKey as (...args: any[]) => TCacheKey;\n\n  return Object.freeze(optimistic);\n}\n","import { dep, OptimisticDependencyFunction } from \"optimism\";\nimport { Slot } from \"@wry/context\";\nimport { InMemoryCache } from \"./inMemoryCache\";\nimport { ApolloCache } from '../../core';\n\nexport interface ReactiveVar<T> {\n  (newValue?: T): T;\n  onNextChange(listener: ReactiveListener<T>): () => void;\n  attachCache(cache: ApolloCache<any>): this;\n  forgetCache(cache: ApolloCache<any>): boolean;\n}\n\nexport type ReactiveListener<T> = (value: T) => any;\n\n// Contextual Slot that acquires its value when custom read functions are\n// called in Policies#readField.\nexport const cacheSlot = new Slot<ApolloCache<any>>();\n\nconst cacheInfoMap = new WeakMap<ApolloCache<any>, {\n  vars: Set<ReactiveVar<any>>;\n  dep: OptimisticDependencyFunction<ReactiveVar<any>>;\n}>();\n\nfunction getCacheInfo(cache: ApolloCache<any>) {\n  let info = cacheInfoMap.get(cache)!;\n  if (!info) {\n    cacheInfoMap.set(cache, info = {\n      vars: new Set,\n      dep: dep(),\n    });\n  }\n  return info;\n}\n\nexport function forgetCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach(rv => rv.forgetCache(cache));\n}\n\n// Calling forgetCache(cache) serves to silence broadcasts and allows the\n// cache to be garbage collected. However, the varsByCache WeakMap\n// preserves the set of reactive variables that were previously associated\n// with this cache, which makes it possible to \"recall\" the cache at a\n// later time, by reattaching it to those variables. If the cache has been\n// garbage collected in the meantime, because it is no longer reachable,\n// you won't be able to call recallCache(cache), and the cache will\n// automatically disappear from the varsByCache WeakMap.\nexport function recallCache(cache: ApolloCache<any>) {\n  getCacheInfo(cache).vars.forEach(rv => rv.attachCache(cache));\n}\n\nexport function makeVar<T>(value: T): ReactiveVar<T> {\n  const caches = new Set<ApolloCache<any>>();\n  const listeners = new Set<ReactiveListener<T>>();\n\n  const rv: ReactiveVar<T> = function (newValue) {\n    if (arguments.length > 0) {\n      if (value !== newValue) {\n        value = newValue!;\n        caches.forEach(cache => {\n          // Invalidate any fields with custom read functions that\n          // consumed this variable, so query results involving those\n          // fields will be recomputed the next time we read them.\n          getCacheInfo(cache).dep.dirty(rv);\n          // Broadcast changes to any caches that have previously read\n          // from this variable.\n          broadcast(cache);\n        });\n        // Finally, notify any listeners added via rv.onNextChange.\n        const oldListeners = Array.from(listeners);\n        listeners.clear();\n        oldListeners.forEach(listener => listener(value));\n      }\n    } else {\n      // When reading from the variable, obtain the current cache from\n      // context via cacheSlot. This isn't entirely foolproof, but it's\n      // the same system that powers varDep.\n      const cache = cacheSlot.getValue();\n      if (cache) {\n        attach(cache);\n        getCacheInfo(cache).dep(rv);\n      }\n    }\n\n    return value;\n  };\n\n  rv.onNextChange = listener => {\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n    };\n  };\n\n  const attach = rv.attachCache = cache => {\n    caches.add(cache);\n    getCacheInfo(cache).vars.add(rv);\n    return rv;\n  };\n\n  rv.forgetCache = cache => caches.delete(cache);\n\n  return rv;\n}\n\ntype Broadcastable = ApolloCache<any> & {\n  // This method is protected in InMemoryCache, which we are ignoring, but\n  // we still want some semblance of type safety when we call it.\n  broadcastWatches?: InMemoryCache[\"broadcastWatches\"];\n};\n\nfunction broadcast(cache: Broadcastable) {\n  if (cache.broadcastWatches) {\n    cache.broadcastWatches();\n  }\n}\n","import { invariant } from '../utilities/globals';\n\nimport {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n  visit,\n  BREAK,\n} from 'graphql';\n\nimport { ApolloCache } from '../cache';\nimport {\n  FragmentMap,\n  StoreObject,\n  argumentsObjectFromField,\n  buildQueryFromSelectionSet,\n  createFragmentMap,\n  getFragmentDefinitions,\n  getMainDefinition,\n  hasDirectives,\n  isField,\n  isInlineFragment,\n  mergeDeep,\n  mergeDeepArray,\n  removeClientSetsFromDocument,\n  resultKeyNameFromField,\n  shouldInclude,\n} from '../utilities';\nimport { ApolloClient } from './ApolloClient';\nimport { Resolvers, OperationVariables } from './types';\nimport { FetchResult } from '../link/core';\nimport { cacheSlot } from '../cache';\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  },\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any,\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher: FragmentMatcher;\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(resolverGroup => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers,\n      ).then(localResult => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return removeClientSetsFromDocument(document);\n  }\n\n  public prepareContext(context?: Record<string, any>) {\n    const { cache } = this;\n    return {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey(obj: StoreObject) {\n        return cache.identify(obj);\n      },\n    };\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables(\n    document: DocumentNode,\n    variables: OperationVariables = {},\n    context = {},\n  ) {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables,\n      ).then(data => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(\n              arg =>\n                arg.name.value === 'always' &&\n                arg.value.kind === 'BooleanValue' &&\n                arg.value.value === true,\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>,\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false,\n  ) {\n    const mainDefinition = getMainDefinition(document);\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n\n    const definitionOperation = (mainDefinition as OperationDefinitionNode)\n      .operation;\n\n    const defaultOperationType = definitionOperation\n      ? definitionOperation.charAt(0).toUpperCase() +\n        definitionOperation.slice(1)\n      : 'Query';\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      onlyRunForcedResolvers,\n    };\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    ).then(result => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    rootValue: TData,\n    execContext: ExecContext,\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(selection, rootValue, execContext).then(\n          fieldResult => {\n            if (typeof fieldResult !== 'undefined') {\n              resultsToMerge.push({\n                [resultKeyNameFromField(selection)]: fieldResult,\n              } as TData);\n            }\n          },\n        );\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named ${selection.name.value}`);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            rootValue,\n            execContext,\n          ).then(fragmentResult => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function() {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    rootValue: any,\n    execContext: ExecContext,\n  ): Promise<any> {\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(\n            // In case the resolve function accesses reactive variables,\n            // set cacheSlot to the current cache instance.\n            cacheSlot.withValue(this.cache, resolve, [\n              rootValue,\n              argumentsObjectFromField(field, variables),\n              execContext.context,\n              { field, fragmentMap: execContext.fragmentMap },\n            ])\n          );\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach(directive => {\n          if (directive.name.value === 'export' && directive.arguments) {\n            directive.arguments.forEach(arg => {\n              if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(field, result, execContext);\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          result,\n          execContext,\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    result: any[],\n    execContext: ExecContext,\n  ): any {\n    return Promise.all(\n      result.map(item => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(field, item, execContext);\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(field.selectionSet, item, execContext);\n        }\n      }),\n    );\n  }\n}\n","import { DocumentNode, GraphQLError } from 'graphql';\nimport { equal } from \"@wry/equality\";\n\nimport { Cache, ApolloCache } from '../cache';\nimport { WatchQueryOptions, ErrorPolicy } from './watchQueryOptions';\nimport { ObservableQuery } from './ObservableQuery';\nimport { QueryListener } from './types';\nimport { FetchResult } from '../link/core';\nimport {\n  ObservableSubscription,\n  isNonEmptyArray,\n  graphQLResultHasError,\n  canUseWeakMap,\n} from '../utilities';\nimport {\n  NetworkStatus,\n  isNetworkRequestInFlight,\n} from './networkStatus';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\n\nexport type QueryStoreValue = Pick<QueryInfo,\n  | \"variables\"\n  | \"networkStatus\"\n  | \"networkError\"\n  | \"graphQLErrors\"\n  >;\n\nexport const enum CacheWriteBehavior {\n  FORBID,\n  OVERWRITE,\n  MERGE,\n};\n\nconst destructiveMethodCounts = new (\n  canUseWeakMap ? WeakMap : Map\n)<ApolloCache<any>, number>();\n\nfunction wrapDestructiveCacheMethod(\n  cache: ApolloCache<any>,\n  methodName: keyof ApolloCache<any>,\n) {\n  const original = cache[methodName];\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(\n        cache,\n        // The %1e15 allows the count to wrap around to 0 safely every\n        // quadrillion evictions, so there's no risk of overflow. To be\n        // clear, this is more of a pedantic principle than something\n        // that matters in any conceivable practical scenario.\n        (destructiveMethodCounts.get(cache)! + 1) % 1e15,\n      );\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info: QueryInfo) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nexport class QueryInfo {\n  listeners = new Set<QueryListener>();\n  document: DocumentNode | null = null;\n  lastRequestId = 1;\n  subscriptions = new Set<ObservableSubscription>();\n  variables?: Record<string, any>;\n  networkStatus?: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  stopped = false;\n\n  private cache: ApolloCache<any>;\n\n  constructor(\n    queryManager: QueryManager<any>,\n    public readonly queryId = queryManager.generateQueryId(),\n  ) {\n    const cache = this.cache = queryManager.cache;\n\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  public init(query: {\n    document: DocumentNode;\n    variables: Record<string, any> | undefined,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus?: NetworkStatus,\n    observableQuery?: ObservableQuery<any>;\n    lastRequestId?: number;\n  }): this {\n    let networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (this.variables &&\n        this.networkStatus !== NetworkStatus.loading &&\n        !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus,\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  reset() {\n    cancelNotifyTimeout(this);\n    this.lastDiff = void 0;\n    this.dirty = false;\n  }\n\n  getDiff(variables = this.variables): Cache.DiffResult<any> {\n    const options = this.getDiffOptions(variables);\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return { complete: false };\n    }\n\n    const diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  }\n\n  private lastDiff?: {\n    diff: Cache.DiffResult<any>,\n    options: Cache.DiffOptions,\n  };\n\n  private updateLastDiff(\n    diff: Cache.DiffResult<any> | null,\n    options?: Cache.DiffOptions,\n  ) {\n    this.lastDiff = diff ? {\n      diff,\n      options: options || this.getDiffOptions(),\n    } : void 0;\n  }\n\n  private getDiffOptions(variables = this.variables): Cache.DiffOptions {\n    return {\n      query: this.document!,\n      variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: this.observableQuery?.options.canonizeResults,\n    };\n  }\n\n  setDiff(diff: Cache.DiffResult<any> | null) {\n    const oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n    if (!this.dirty &&\n        !equal(oldDiff && oldDiff.result,\n               diff && diff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(() => this.notify(), 0);\n      }\n    }\n  }\n\n  public readonly observableQuery: ObservableQuery<any> | null = null;\n  private oqListener?: QueryListener;\n\n  setObservableQuery(oq: ObservableQuery<any> | null) {\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    (this as any).observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = () => {\n        // If this.diff came from an optimistic transaction, deliver the\n        // current cache data to the ObservableQuery, but don't perform a\n        // full reobservation, since oq.reobserve might make a network\n        // request, and we don't want to trigger network requests for\n        // optimistic updates.\n        if (this.getDiff().fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          oq.reobserve();\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  }\n\n  notify() {\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(listener => listener(this));\n    }\n\n    this.dirty = false;\n  }\n\n  private shouldNotify() {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) &&\n        this.observableQuery) {\n      const { fetchPolicy } = this.observableQuery.options;\n      if (fetchPolicy !== \"cache-only\" &&\n          fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public stop() {\n    if (!this.stopped) {\n      this.stopped = true;\n\n      // Cancel the pending notify timeout\n      this.reset();\n\n      this.cancel();\n      // Revert back to the no-op version of cancel inherited from\n      // QueryInfo.prototype.\n      this.cancel = QueryInfo.prototype.cancel;\n\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n\n      const oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  }\n\n  // This method is a no-op by default, until/unless overridden by the\n  // updateWatch method.\n  private cancel() {}\n\n  private lastWatch?: Cache.WatchOptions;\n\n  private updateWatch(variables = this.variables) {\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    const watchOptions: Cache.WatchOptions = {\n      // Although this.getDiffOptions returns Cache.DiffOptions instead of\n      // Cache.WatchOptions, all the overlapping options should be the same, so\n      // we can reuse getDiffOptions here, for consistency.\n      ...this.getDiffOptions(variables),\n      watcher: this,\n      callback: diff => this.setDiff(diff),\n    };\n\n    if (!this.lastWatch ||\n        !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  }\n\n  private lastWrite?: {\n    result: FetchResult<any>;\n    variables: WatchQueryOptions[\"variables\"];\n    dmCount: number | undefined;\n  };\n\n  public resetLastWrite() {\n    this.lastWrite = void 0;\n  }\n\n  private shouldWrite(\n    result: FetchResult<any>,\n    variables: WatchQueryOptions[\"variables\"],\n  ) {\n    const { lastWrite } = this;\n    return !(\n      lastWrite &&\n      // If cache.evict has been called since the last time we wrote this\n      // data into the cache, there's a chance writing this result into\n      // the cache will repair what was evicted.\n      lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n      equal(variables, lastWrite.variables) &&\n      equal(result.data, lastWrite.result.data)\n    );\n  }\n\n  public markResult<T>(\n    result: FetchResult<T>,\n    options: Pick<WatchQueryOptions,\n      | \"variables\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n    cacheWriteBehavior: CacheWriteBehavior,\n  ) {\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    this.reset();\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff(\n        { result: result.data, complete: true },\n        this.getDiffOptions(options.variables),\n      );\n\n    } else if (cacheWriteBehavior !== CacheWriteBehavior.FORBID) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        // Using a transaction here so we have a chance to read the result\n        // back from the cache before the watch callback fires as a result\n        // of writeQuery, so we can store the new diff quietly and ignore\n        // it when we receive it redundantly from the watch callback.\n        this.cache.performTransaction(cache => {\n          if (this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: this.document!,\n              data: result.data as T,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === CacheWriteBehavior.OVERWRITE,\n            });\n\n            this.lastWrite = {\n              result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(this.cache),\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (this.lastDiff &&\n                this.lastDiff.diff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result.data = this.lastDiff.diff.result;\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n\n          const diffOptions = this.getDiffOptions(options.variables);\n          const diff = cache.diff<T>(diffOptions);\n\n          // In case the QueryManager stops this QueryInfo before its\n          // results are delivered, it's important to avoid restarting the\n          // cache watch when markResult is called.\n          if (!this.stopped) {\n            // Any time we're about to update this.diff, we need to make\n            // sure we've started watching the cache.\n            this.updateWatch(options.variables);\n          }\n\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  }\n\n  public markReady() {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  }\n\n  public markError(error: ApolloError) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  }\n}\n\nexport function shouldWriteResult<T>(\n  result: FetchResult<T>,\n  errorPolicy: ErrorPolicy = \"none\",\n) {\n  const ignoreErrors =\n    errorPolicy === \"ignore\" ||\n    errorPolicy === \"all\";\n  let writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}\n","import { invariant, InvariantError } from '../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from '@wry/equality';\n\nimport { ApolloLink, execute, FetchResult } from '../link/core';\nimport { Cache, ApolloCache, canonicalStringify } from '../cache';\n\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  removeConnectionDirectiveFromDocument,\n  canUseWeakMap,\n  ObservableSubscription,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  ConcastSourcesIterable,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n} from '../utilities';\nimport { ApolloError, isApolloError } from '../errors';\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  WatchQueryFetchPolicy,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from './watchQueryOptions';\nimport { ObservableQuery, applyNextFetchPolicy, logMissingFieldErrors } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n} from './types';\nimport { LocalState } from './LocalState';\n\nimport {\n  QueryInfo,\n  QueryStoreValue,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from './QueryInfo';\n\nconst { hasOwnProperty } = Object.prototype;\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  document: DocumentNode;\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public readonly assumeImmutableResults: boolean;\n  public readonly ssrMode: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  private fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor({\n    cache,\n    link,\n    queryDeduplication = false,\n    onBroadcast,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults,\n  }: {\n    cache: ApolloCache<TStore>;\n    link: ApolloLink;\n    queryDeduplication?: boolean;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    this.cache = cache;\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n    if ((this.onBroadcast = onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      new InvariantError('QueryManager stopped while query was in flight'),\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach(cancel => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    errorPolicy = 'none',\n    fetchPolicy = 'network-only',\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<FetchResult<TData>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache',\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n    mutation = this.transform(mutation).document;\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n\n    if (this.transform(mutation).hasClientExports) {\n      variables = await this.localState.addExportedVariables(mutation, variables, context) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    if (optimisticResponse) {\n      this.markMutationOptimistic<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      >(optimisticResponse, {\n        mutationId,\n        document: mutation,\n        variables,\n        fetchPolicy,\n        errorPolicy,\n        context,\n        updateQueries,\n        update: updateWithProxyFn,\n        keepRootFields,\n      });\n    }\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse,\n          },\n          variables,\n          false,\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            throw new ApolloError({\n              graphQLErrors: result.errors,\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === 'ignore' &&\n              graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<\n            TData,\n            TVariables,\n            TContext,\n            TCache\n          >({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: optimisticResponse ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        },\n\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // At the moment, a mutation can have only one result, so we can\n          // immediately resolve upon receiving the first result. In the future,\n          // mutations containing @defer or @stream directives might receive\n          // multiple FetchResult payloads from the ApolloLink chain, so we will\n          // probably need to collect those results in this next method and call\n          // resolve only later, in an observer.complete function.\n          resolve(storeResult);\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (optimisticResponse) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError ? err : new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache,\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables,\n      });\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      mutation.refetchQueries ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache: TCache) => {\n          if (!skipCache) {\n            cacheWrites.forEach(write => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete) {\n                result = { ...result, data: diff.result };\n              }\n            }\n\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables,\n            });\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n\n      }).forEach(result => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<TData, TVariables, TContext, TCache extends ApolloCache<any>>(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>,\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean,\n    },\n  ) {\n    const data = typeof optimisticResponse === \"function\"\n      ? optimisticResponse(mutation.variables)\n      : optimisticResponse;\n\n    return this.cache.recordOptimisticTransaction(cache => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>({\n          ...mutation,\n          result: { data },\n        }, cache);\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n  }\n\n  public fetchQuery<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchQueryObservable<TData, TVars>(\n      queryId,\n      options,\n      networkStatus,\n    ).promise;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  private transformCache = new (\n    canUseWeakMap ? WeakMap : Map\n  )<DocumentNode, TransformCacheEntry>();\n\n  public transform(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const transformed = this.cache.transformDocument(document);\n      const forLink = removeConnectionDirectiveFromDocument(\n        this.cache.transformForLink(transformed));\n\n      const clientQuery = this.localState.clientQuery(transformed);\n      const serverQuery = forLink && this.localState.serverQuery(forLink);\n\n      const cacheEntry: TransformCacheEntry = {\n        document: transformed,\n        // TODO These two calls (hasClientExports and shouldForceResolvers)\n        // could probably be merged into a single traversal.\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery,\n        serverQuery,\n        defaultVars: getDefaultValues(\n          getOperationDefinition(transformed)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...transformed,\n          definitions: transformed.definitions.map(def => {\n            if (def.kind === \"OperationDefinition\" &&\n                def.operation !== \"query\") {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        }\n      };\n\n      const add = (doc: DocumentNode | null) => {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry);\n        }\n      }\n      // Add cacheEntry to the transformCache using several different keys,\n      // since any one of these documents could end up getting passed to the\n      // transform method again in the future.\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables,\n  ): OperationVariables {\n    return {\n      ...this.transform(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<T, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    // assign variable default values if supplied\n    options = {\n      ...options,\n      variables: this.getVariables(\n        options.query,\n        options.variables,\n      ) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    queryInfo.init({\n      document: options.query,\n      observableQuery: observable,\n      variables: options.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId(),\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    return this.fetchQuery<TData, TVars>(\n      queryId,\n      options,\n    ).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(options: Cache.ResetOptions = {\n    discardWatches: true,\n  }): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(new InvariantError(\n      'Store reset while query was in flight (not completed in link chain)',\n    ));\n\n    this.queries.forEach(queryInfo => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\",\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach(desc => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(`Unknown query ${\n            typeof nameOrDoc === \"string\" ? \"named \" : \"\"\n          }${\n            JSON.stringify(nameOrDoc, null, 2)\n          } requested in refetchQueries options.include array`);\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(\n      includeStandby ? \"all\" : \"active\"\n    ).forEach((observableQuery, queryId) => {\n      const { fetchPolicy } = observableQuery.options;\n      observableQuery.resetLastResults();\n      if (includeStandby ||\n          (fetchPolicy !== \"standby\" &&\n           fetchPolicy !== \"cache-only\")) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      this.getQuery(queryId).setDiff(null);\n    });\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy,\n    variables,\n    context = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(\n        query,\n        context,\n        variables,\n      ).map(result => {\n        if (fetchPolicy !== 'no-cache') {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            this.cache.write({\n              query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables,\n            });\n          }\n\n          this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors,\n          });\n        }\n\n        return result;\n      });\n\n    if (this.transform(query).hasClientExports) {\n      const observablePromise = this.localState.addExportedVariables(\n        query,\n        variables,\n        context,\n      ).then(makeObservable);\n\n      return new Observable<FetchResult<T>>(observer => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          observable => sub = observable.subscribe(observer),\n          observer.error,\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    this.getQuery(queryId).stop();\n    this.queries.delete(queryId);\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(info => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private inFlightLinkObservables = new Map<\n    DocumentNode,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    deduplication: boolean =\n      // Prefer context.queryDeduplication if specified.\n      context?.queryDeduplication ??\n      this.queryDeduplication,\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery } = this.transform(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const byVariables = inFlightLinkObservables.get(serverQuery) || new Map();\n        inFlightLinkObservables.set(serverQuery, byVariables);\n\n        const varJson = canonicalStringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>\n          ]);\n\n          byVariables.set(varJson, observable = concast);\n\n          concast.cleanup(() => {\n            if (byVariables.delete(varJson) &&\n                byVariables.size < 1) {\n              inFlightLinkObservables.delete(serverQuery);\n            }\n          });\n        }\n\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>\n        ]);\n      }\n    } else {\n      observable = new Concast([\n        Observable.of({ data: {} } as FetchResult<T>)\n      ]);\n      context = this.prepareContext(context);\n    }\n\n    const { clientQuery } = this.transform(query);\n    if (clientQuery) {\n      observable = asyncMap(observable, result => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<WatchQueryOptions<TVars, TData>,\n      | \"variables\"\n      | \"context\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = queryInfo.lastRequestId = this.generateRequestId();\n\n    return asyncMap(\n      this.getObservableFromLink(\n        queryInfo.document!,\n        options.context,\n        options.variables,\n      ),\n\n      result => {\n        const hasErrors = isNonEmptyArray(result.errors);\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(new ApolloError({\n              graphQLErrors: result.errors,\n            }));\n          }\n          queryInfo.markResult(result, options, cacheWriteBehavior);\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: queryInfo.networkStatus || NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = result.errors;\n        }\n\n        return aqr;\n      },\n\n      networkError => {\n        const error = isApolloError(networkError)\n          ? networkError\n          : new ApolloError({ networkError });\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      },\n    );\n  }\n\n  public fetchQueryObservable<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n  ): Concast<ApolloQueryResult<TData>> {\n    const query = this.transform(options.query).document;\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    let {\n      fetchPolicy = \"cache-first\" as WatchQueryFetchPolicy,\n      errorPolicy = \"none\" as ErrorPolicy,\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n      return this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus,\n      );\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    this.fetchCancelFns.set(queryId, reason => {\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    // A Concast<T> can be created either from an Iterable<Observable<T>>\n    // or from a PromiseLike<Iterable<Observable<T>>>, where T in this\n    // case is ApolloQueryResult<TData>.\n    const concast = new Concast(\n      // If the query has @export(as: ...) directives, then we need to\n      // process those directives asynchronously. When there are no\n      // @export directives (the common case), we deliberately avoid\n      // wrapping the result of this.fetchQueryByPolicy in a Promise,\n      // since the timing of result delivery is (unfortunately) important\n      // for backwards compatibility. TODO This code could be simpler if\n      // we deprecated and removed LocalState.\n      this.transform(normalized.query).hasClientExports\n        ? this.localState.addExportedVariables(\n          normalized.query,\n          normalized.variables,\n          normalized.context,\n        ).then(fromVariables)\n        : fromVariables(normalized.variables!)\n    );\n\n    concast.cleanup(() => {\n      this.fetchCancelFns.delete(queryId);\n      applyNextFetchPolicy(options);\n    });\n\n    return concast;\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<ApolloCache<TStore>, TResult>\n  ): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<string, {\n      oq: ObservableQuery<any>;\n      lastDiff?: Cache.DiffResult<any>;\n      diff?: Cache.DiffResult<any>;\n    }>();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map;\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: optimistic && removeOptimistic || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo &&\n            watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result: TResult | boolean | Promise<ApolloQueryResult<any>> | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars>(\n    queryInfo: QueryInfo,\n    { query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus,\n  ): ConcastSourcesIterable<ApolloQueryResult<TData>> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: query,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff(variables);\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading,\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ &&\n          !returnPartialData &&\n          !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) => Observable.of({\n        data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus,\n        ...(diff.complete ? null : { partial: true }),\n      } as ApolloQueryResult<TData>);\n\n      if (data && this.transform(query).hasForcedResolvers) {\n        return this.localState.runResolvers({\n          document: query,\n          remoteResult: { data },\n          context,\n          variables,\n          onlyRunForcedResolvers: true,\n        }).then(resolved => fromData(resolved.data || void 0));\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\" ? CacheWriteBehavior.FORBID :\n      ( // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n        networkStatus === NetworkStatus.refetch &&\n        refetchWritePolicy !== \"merge\"\n      ) ? CacheWriteBehavior.OVERWRITE\n        : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () =>\n      this.getResultsFromLink<TData, TVars>(queryInfo, cacheWriteBehavior, {\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      });\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n    default: case \"cache-first\": {\n      const diff = readCache();\n\n      if (diff.complete) {\n        return [\n          resultsFromCache(diff, queryInfo.markReady()),\n        ];\n      }\n\n      if (returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-and-network\": {\n      const diff = readCache();\n\n      if (diff.complete || returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-only\":\n      return [\n        resultsFromCache(readCache(), queryInfo.markReady()),\n      ];\n\n    case \"network-only\":\n      if (shouldNotify) {\n        return [\n          resultsFromCache(readCache()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"no-cache\":\n      if (shouldNotify) {\n        return [\n          // Note that queryInfo.getDiff() for no-cache queries does not call\n          // cache.diff, but instead returns a { complete: false } stub result\n          // when there is no queryInfo.diff already defined.\n          resultsFromCache(queryInfo.getDiff()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"standby\":\n      return [];\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n","import { invariant, InvariantError } from '../utilities/globals';\n\nimport { ExecutionResult, DocumentNode } from 'graphql';\n\nimport { ApolloLink, FetchResult, GraphQLRequest, execute } from '../link/core';\nimport { ApolloCache, DataProxy } from '../cache';\nimport { Observable, compact } from '../utilities';\nimport { version } from '../version';\nimport { HttpLink, UriFunction } from '../link/http';\n\nimport { QueryManager } from './QueryManager';\nimport { ObservableQuery } from './ObservableQuery';\n\nimport {\n  ApolloQueryResult,\n  DefaultContext,\n  OperationVariables,\n  Resolvers,\n  RefetchQueriesOptions,\n  RefetchQueriesResult,\n  InternalRefetchQueriesResult,\n  RefetchQueriesInclude,\n} from './types';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  WatchQueryFetchPolicy,\n} from './watchQueryOptions';\n\nimport {\n  LocalState,\n  FragmentMatcher,\n} from './LocalState';\n\nexport interface DefaultOptions {\n  watchQuery?: Partial<WatchQueryOptions<any, any>>;\n  query?: Partial<QueryOptions<any, any>>;\n  mutate?: Partial<MutationOptions<any, any, any>>;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport type ApolloClientOptions<TCacheShape> = {\n  uri?: string | UriFunction;\n  credentials?: string;\n  headers?: Record<string, string>;\n  link?: ApolloLink;\n  cache: ApolloCache<TCacheShape>;\n  ssrForceFetchDelay?: number;\n  ssrMode?: boolean;\n  connectToDevTools?: boolean;\n  queryDeduplication?: boolean;\n  defaultOptions?: DefaultOptions;\n  assumeImmutableResults?: boolean;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  name?: string;\n  version?: string;\n};\n\ntype OptionsUnion<TData, TVariables, TContext> =\n  | WatchQueryOptions<TVariables, TData>\n  | QueryOptions<TVariables, TData>\n  | MutationOptions<TData, TVariables, TContext>;\n\nexport function mergeOptions<\n  TOptions extends OptionsUnion<any, any, any>\n>(\n  defaults: Partial<TOptions>,\n  options: TOptions,\n): TOptions {\n  return compact(defaults, options, options.variables && {\n    variables: {\n      ...defaults.variables,\n      ...options.variables,\n    },\n  });\n}\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nexport class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public cache: ApolloCache<TCacheShape>;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions = {};\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];\n\n  private queryManager: QueryManager<TCacheShape>;\n  private devToolsHookCb: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param uri The GraphQL endpoint that Apollo Client will connect to. If\n   *            `link` is configured, this option is ignored.\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   * @param defaultOptions Used to set application wide defaults for the\n   *                       options supplied to `watchQuery`, `query`, or\n   *                       `mutate`.\n   *\n   * @param assumeImmutableResults When this option is true, the client will assume results\n   *                               read from the cache are never mutated by application code,\n   *                               which enables substantial performance optimizations. Passing\n   *                               `{ freezeResults: true }` to the `InMemoryCache` constructor\n   *                               can help enforce this immutability.\n   *\n   * @param name A custom name that can be used to identify this client, when\n   *             using Apollo client awareness features. E.g. \"iOS\".\n   *\n   * @param version A custom version that can be used to identify this client,\n   *                when using Apollo client awareness features. This is the\n   *                version of your client, which you may want to increment on\n   *                new builds. This is NOT the version of Apollo Client that\n   *                you are using.\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    const {\n      uri,\n      credentials,\n      headers,\n      cache,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      connectToDevTools =\n        // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        typeof window === 'object' &&\n        !(window as any).__APOLLO_CLIENT__ &&\n        __DEV__,\n      queryDeduplication = true,\n      defaultOptions,\n      assumeImmutableResults = false,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n    } = options;\n\n    let { link } = options;\n\n    if (!link) {\n      link = uri\n        ? new HttpLink({ uri, credentials, headers })\n        : ApolloLink.empty();\n    }\n\n    if (!cache) {\n      throw new InvariantError(\n        \"To initialize Apollo Client, you must specify a 'cache' property \" +\n        \"in the options object. \\n\" +\n        \"For more information, please visit: https://go.apollo.dev/c/docs\"\n      );\n    }\n\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || {};\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay,\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    if (connectToDevTools && typeof window === 'object') {\n      (window as any).__APOLLO_CLIENT__ = this;\n    }\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && __DEV__) {\n      hasSuggestedDevtools = true;\n      if (\n        typeof window !== 'undefined' &&\n        window.document &&\n        window.top === window.self &&\n        !(window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__\n      ) {\n        const nav = window.navigator;\n        const ua = nav && nav.userAgent;\n        let url: string | undefined;\n        if (typeof ua === \"string\") {\n          if (ua.indexOf(\"Chrome/\") > -1) {\n            url = \"https://chrome.google.com/webstore/detail/\" +\n              \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n          } else if (ua.indexOf(\"Firefox/\") > -1) {\n            url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n          }\n        }\n        if (url) {\n          invariant.log(\n            \"Download the Apollo DevTools for a better development \" +\n              \"experience: \" + url\n          );\n        }\n      }\n    }\n\n    this.version = version;\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      queryDeduplication,\n      ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName!,\n        version: clientAwarenessVersion!,\n      },\n      localState: this.localState,\n      assumeImmutableResults,\n      onBroadcast: connectToDevTools ? () => {\n        if (this.devToolsHookCb) {\n          this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: this.queryManager.getQueryStore(),\n              mutations: this.queryManager.mutationStore || {},\n            },\n            dataWithOptimisticResults: this.cache.extract(true),\n          });\n        }\n      } : void 0,\n    });\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer when the cache store changes.\n   * <p /><p />\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   * <p /><p />\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifier, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   * <p /><p />\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   * <p /><p />\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<T = any, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<T = any, TVariables = OperationVariables>(\n    options: QueryOptions<TVariables, T>,\n  ): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n\n    invariant(\n      (options.fetchPolicy as WatchQueryFetchPolicy) !== 'cache-and-network',\n      'The cache-and-network fetchPolicy does not work with client.query, because ' +\n      'client.query can only return a single result. Please use client.watchQuery ' +\n      'to receive multiple results from the cache and the network, or consider ' +\n      'using a different fetchPolicy, such as cache-first or network-only.'\n    );\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.query<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<\n    TData = any,\n    TVariables = OperationVariables,\n    TContext = DefaultContext,\n    TCache extends ApolloCache<any> = ApolloCache<any>\n  >(\n    options: MutationOptions<TData, TVariables, TContext>,\n  ): Promise<FetchResult<TData>> {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n    return this.queryManager.mutate<TData, TVariables, TContext, TCache>(options);\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n  public subscribe<T = any, TVariables = OperationVariables>(\n    options: SubscriptionOptions<TVariables, T>,\n  ): Observable<FetchResult<T>> {\n    return this.queryManager.startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>,\n  ): void {\n    this.cache.writeQuery<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>,\n  ): void {\n    this.cache.writeFragment<TData, TVariables>(options);\n    this.queryManager.broadcastQueries();\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You’ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore({\n        discardWatches: false,\n      }))\n      .then(() => Promise.all(this.resetStoreCallbacks.map(fn => fn())))\n      .then(() => this.reFetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore({\n        discardWatches: true,\n      }))\n      .then(() => Promise.all(this.clearStoreCallbacks.map(fn => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>[]> {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n   *\n   * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n   *\n   * It is important to remember that `refetchQueries()` *will* refetch specified active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public refetchQueries<\n    TCache extends ApolloCache<any> = ApolloCache<TCacheShape>,\n    TResult = Promise<ApolloQueryResult<any>>,\n  >(\n    options: RefetchQueriesOptions<TCache, TResult>,\n  ): RefetchQueriesResult<TResult> {\n    const map = this.queryManager.refetchQueries(options);\n    const queries: ObservableQuery<any>[] = [];\n    const results: InternalRefetchQueriesResult<TResult>[] = [];\n\n    map.forEach((result, obsQuery) => {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n\n    const result = Promise.all<TResult>(\n      results as TResult[]\n    ) as RefetchQueriesResult<TResult>;\n\n    // In case you need the raw results immediately, without awaiting\n    // Promise.all(results):\n    result.queries = queries;\n    result.results = results;\n\n    // If you decide to ignore the result Promise because you're using\n    // result.queries and result.results instead, you shouldn't have to worry\n    // about preventing uncaught rejections for the Promise.all result.\n    result.catch(error => {\n      invariant.debug(`In client.refetchQueries, Promise.all promise rejected with error ${error}`);\n    });\n\n    return result;\n  }\n\n  /**\n   * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n   * query ID strings. An \"active\" query is one that has observers and a\n   * `fetchPolicy` other than \"standby\" or \"cache-only\". You can include all\n   * `ObservableQuery` objects (including the inactive ones) by passing \"all\"\n   * instead of \"active\", or you can include just a subset of active queries by\n   * passing an array of query names or DocumentNode objects.\n   */\n  public getObservableQueries(\n    include: RefetchQueriesInclude = \"active\",\n  ): Map<string, ObservableQuery<any>> {\n    return this.queryManager.getObservableQueries(include);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n\n  /**\n   * Define a new ApolloLink (or link chain) that Apollo Client will use.\n   */\n  public setLink(newLink: ApolloLink) {\n    this.link = this.queryManager.link = newLink;\n  }\n}\n","export const version = 'local';\n","import { DocumentNode } from 'graphql';\nimport { wrap } from 'optimism';\n\nimport {\n  StoreObject,\n  Reference,\n  getFragmentQueryDocument,\n} from '../../utilities';\nimport { DataProxy } from './types/DataProxy';\nimport { Cache } from './types/Cache';\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  // required to implement\n  // core API\n  public abstract read<TData = any, TVariables = any>(\n    query: Cache.ReadOptions<TVariables, TData>,\n  ): TData | null;\n  public abstract write<TData = any, TVariables = any>(\n    write: Cache.WriteOptions<TData, TVariables>,\n  ): Reference | undefined;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>,\n  ): () => void;\n\n  // Empty the cache and restart all current watches (unless\n  // options.discardWatches is true).\n  public abstract reset(options?: Cache.ResetOptions): Promise<void>;\n\n  // Remove whole objects from the cache by passing just options.id, or\n  // specific fields by passing options.field and/or options.args. If no\n  // options.args are provided, all fields matching options.field (even\n  // those with arguments) will be removed. Returns true iff any data was\n  // removed from the cache.\n  public abstract evict(options: Cache.EvictOptions): boolean;\n\n  // initializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized,\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // Optimistic API\n\n  public abstract removeOptimistic(id: string): void;\n\n  // Transactional API\n\n  // The batch method is intended to replace/subsume both performTransaction\n  // and recordOptimisticTransaction, but performTransaction came first, so we\n  // provide a default batch implementation that's just another way of calling\n  // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can\n  // override the batch method to do more interesting things with its options.\n  public batch<U>(options: Cache.BatchOptions<this, U>): U {\n    const optimisticId =\n      typeof options.optimistic === \"string\" ? options.optimistic :\n      options.optimistic === false ? null : void 0;\n    let updateResult: U;\n    this.performTransaction(\n      () => updateResult = options.update(this),\n      optimisticId,\n    );\n    return updateResult!;\n  }\n\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n    // Although subclasses may implement recordOptimisticTransaction\n    // however they choose, the default implementation simply calls\n    // performTransaction with a string as the second argument, allowing\n    // performTransaction to handle both optimistic and non-optimistic\n    // (broadcast-batching) transactions. Passing null for optimisticId is\n    // also allowed, and indicates that performTransaction should apply\n    // the transaction non-optimistically (ignoring optimistic data).\n    optimisticId?: string | null,\n  ): void;\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    optimisticId: string,\n  ) {\n    this.performTransaction(transaction, optimisticId);\n  }\n\n  // Optional API\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  public identify(object: StoreObject | Reference): string | undefined {\n    return;\n  }\n\n  public gc(): string[] {\n    return [];\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    return false;\n  }\n\n  // Experimental API\n\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // DataProxy API\n  /**\n   *\n   * @param options\n   * @param optimistic\n   */\n  public readQuery<QueryType, TVariables = any>(\n    options: Cache.ReadQueryOptions<QueryType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): QueryType | null {\n    return this.read({\n      ...options,\n      rootId: options.id || 'ROOT_QUERY',\n      optimistic,\n    });\n  }\n\n  // Make sure we compute the same (===) fragment query document every\n  // time we receive the same fragment in readFragment.\n  private getFragmentDoc = wrap(getFragmentQueryDocument);\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: Cache.ReadFragmentOptions<FragmentType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): FragmentType | null {\n    return this.read({\n      ...options,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>({\n    id,\n    data,\n    ...options\n  }: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined {\n    return this.write(Object.assign(options, {\n      dataId: id || 'ROOT_QUERY',\n      result: data,\n    }));\n  }\n\n  public writeFragment<TData = any, TVariables = any>({\n    id,\n    data,\n    fragment,\n    fragmentName,\n    ...options\n  }: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined {\n    return this.write(Object.assign(options, {\n      query: this.getFragmentDoc(fragment, fragmentName),\n      dataId: id,\n      result: data,\n    }));\n  }\n\n  public updateQuery<TData = any, TVariables = any>(\n    options: Cache.UpdateQueryOptions<TData, TVariables>,\n    update: (data: TData | null) => TData | null | void,\n  ): TData | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readQuery<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n\n  public updateFragment<TData = any, TVariables = any>(\n    options: Cache.UpdateFragmentOptions<TData, TVariables>,\n    update: (data: TData | null) => TData | null | void,\n  ): TData | null {\n    return this.batch({\n      update(cache) {\n        const value = cache.readFragment<TData, TVariables>(options);\n        const data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment<TData, TVariables>({ ...options, data });\n        return data;\n      },\n    });\n  }\n}\n","import { DocumentNode, FieldNode } from 'graphql';\n\nimport {\n  Reference,\n  StoreObject,\n  StoreValue,\n  isReference,\n} from '../../../utilities';\n\nimport { StorageType } from '../../inmemory/policies';\n\n// The Readonly<T> type only really works for object types, since it marks\n// all of the object's properties as readonly, but there are many cases when\n// a generic type parameter like TExisting might be a string or some other\n// primitive type, in which case we need to avoid wrapping it with Readonly.\n// SafeReadonly<string> collapses to just string, which makes string\n// assignable to SafeReadonly<any>, whereas string is not assignable to\n// Readonly<any>, somewhat surprisingly.\nexport type SafeReadonly<T> = T extends object ? Readonly<T> : T;\n\nexport type MissingTree = string | {\n  readonly [key: string]: MissingTree;\n};\n\nexport class MissingFieldError {\n  constructor(\n    public readonly message: string,\n    public readonly path: MissingTree | Array<string | number>,\n    public readonly query: DocumentNode,\n    public readonly variables?: Record<string, any>,\n  ) {}\n}\n\nexport interface FieldSpecifier {\n  typename?: string;\n  fieldName: string;\n  field?: FieldNode;\n  args?: Record<string, any>;\n  variables?: Record<string, any>;\n}\n\nexport interface ReadFieldOptions extends FieldSpecifier {\n  from?: StoreObject | Reference;\n}\n\nexport interface ReadFieldFunction {\n  <V = StoreValue>(options: ReadFieldOptions): SafeReadonly<V> | undefined;\n  <V = StoreValue>(\n    fieldName: string,\n    from?: StoreObject | Reference,\n  ): SafeReadonly<V> | undefined;\n}\n\nexport type ToReferenceFunction = (\n  objOrIdOrRef: StoreObject | string | Reference,\n  mergeIntoStore?: boolean,\n) => Reference | undefined;\n\nexport type CanReadFunction = (value: StoreValue) => boolean;\n\nexport type Modifier<T> = (value: T, details: {\n  DELETE: any;\n  INVALIDATE: any;\n  fieldName: string;\n  storeFieldName: string;\n  readField: ReadFieldFunction;\n  canRead: CanReadFunction;\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n  storage: StorageType;\n}) => T;\n\nexport type Modifiers = {\n  [fieldName: string]: Modifier<any>;\n};\n","import '../globals'; // For __DEV__\nimport { isNonNullObject } from './objects';\n\nfunction deepFreeze(value: any) {\n  const workSet = new Set([value]);\n  workSet.forEach(obj => {\n    if (isNonNullObject(obj) && shallowFreeze(obj) === obj) {\n      Object.getOwnPropertyNames(obj).forEach(name => {\n        if (isNonNullObject(obj[name])) workSet.add(obj[name]);\n      });\n    }\n  });\n  return value;\n}\n\nfunction shallowFreeze<T extends object>(obj: T): T | null {\n  if (__DEV__ && !Object.isFrozen(obj)) {\n    try {\n      Object.freeze(obj);\n    } catch (e) {\n      // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n      // they all throw a TypeError when you try, so we re-throw any exceptions\n      // that are not TypeErrors, since that would be unexpected.\n      if (e instanceof TypeError) return null;\n      throw e;\n    }\n  }\n  return obj;\n}\n\nexport function maybeDeepFreeze<T>(obj: T): T {\n  if (__DEV__) {\n    deepFreeze(obj);\n  }\n  return obj;\n}\n","import { invariant } from '../../utilities/globals';\nimport { dep, OptimisticDependencyFunction } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\n\nimport {\n  isReference,\n  StoreValue,\n  StoreObject,\n  Reference,\n  makeReference,\n  DeepMerger,\n  maybeDeepFreeze,\n  canUseWeakMap,\n  isNonNullObject,\n} from '../../utilities';\nimport { NormalizedCache, NormalizedCacheObject } from './types';\nimport { hasOwn, fieldNameFromStoreName } from './helpers';\nimport { Policies, StorageType } from './policies';\nimport { Cache } from '../core/types/Cache';\nimport {\n  SafeReadonly,\n  Modifier,\n  Modifiers,\n  ReadFieldOptions,\n  ToReferenceFunction,\n  CanReadFunction,\n} from '../core/types/common';\n\nconst DELETE: any = Object.create(null);\nconst delModifier: Modifier<any> = () => DELETE;\nconst INVALIDATE: any = Object.create(null);\n\nexport abstract class EntityStore implements NormalizedCache {\n  protected data: NormalizedCacheObject = Object.create(null);\n\n  constructor(\n    public readonly policies: Policies,\n    public readonly group: CacheGroup,\n  ) {}\n\n  public abstract addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer;\n\n  public abstract removeLayer(layerId: string): EntityStore;\n\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n\n  public toObject(): NormalizedCacheObject {\n    return { ...this.data };\n  }\n\n  public has(dataId: string): boolean {\n    return this.lookup(dataId, true) !== void 0;\n  }\n\n  public get(dataId: string, fieldName: string): StoreValue {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" &&\n        hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n\n  protected lookup(dataId: string, dependOnExistence?: boolean): StoreObject | undefined {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  }\n\n  public merge(\n    older: string | StoreObject,\n    newer: StoreObject | string,\n  ): void {\n    let dataId: string | undefined;\n\n    // Convert unexpected references to ID strings.\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n\n    const existing: StoreObject | undefined =\n      typeof older === \"string\"\n        ? this.lookup(dataId = older)\n        : older;\n\n    const incoming: StoreObject | undefined =\n      typeof newer === \"string\"\n        ? this.lookup(dataId = newer)\n        : newer;\n\n    // If newer was a string ID, but that ID was not defined in this store,\n    // then there are no fields to be merged, so we're done.\n    if (!incoming) return;\n\n    invariant(\n      typeof dataId === \"string\",\n      \"store.merge expects a string ID\",\n    );\n\n    const merged: StoreObject =\n      new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty: Record<string, 1> = Object.create(null);\n\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach(storeFieldName => {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName &&\n                !this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty[fieldName] = 1;\n            }\n\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (fieldsToDirty.__typename &&\n            !(existing && existing.__typename) &&\n            // Since we return default root __typename strings\n            // automatically from store.get, we don't need to dirty the\n            // ROOT_QUERY.__typename field if merged.__typename is equal\n            // to the default string (usually \"Query\").\n            this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty.__typename;\n        }\n\n        Object.keys(fieldsToDirty).forEach(\n          fieldName => this.group.dirty(dataId as string, fieldName));\n      }\n    }\n  }\n\n  public modify(\n    dataId: string,\n    fields: Modifier<any> | Modifiers,\n  ): boolean {\n    const storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      const changedFields: Record<string, any> = Object.create(null);\n      let needToMerge = false;\n      let allDeleted = true;\n\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: <V = StoreValue>(\n          fieldNameOrOptions: string | ReadFieldOptions,\n          from?: StoreObject | Reference,\n        ) => this.policies.readField<V>(\n          typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId),\n          } : fieldNameOrOptions,\n          { store: this },\n        ),\n      };\n\n      Object.keys(storeObject).forEach(storeFieldName => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify: Modifier<StoreValue> = typeof fields === \"function\"\n          ? fields\n          : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          let newValue = modify === delModifier ? DELETE :\n            modify(maybeDeepFreeze(fieldValue), {\n              ...sharedDetails,\n              fieldName,\n              storeFieldName,\n              storage: this.getStorage(dataId, storeFieldName),\n            });\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  public delete(\n    dataId: string,\n    fieldName?: string,\n    args?: Record<string, any>,\n  ) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue<string>(storeObject, \"__typename\");\n      const storeFieldName = fieldName && args\n        ? this.policies.getStoreFieldName({ typename, fieldName, args })\n        : fieldName;\n      return this.modify(dataId, storeFieldName ? {\n        [storeFieldName]: delModifier,\n      } : delModifier);\n    }\n    return false;\n  }\n\n  public evict(\n    options: Cache.EvictOptions,\n    limit: EntityStore,\n  ): boolean {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public extract(): NormalizedCacheObject {\n    const obj = this.toObject();\n    const extraRootIds: string[] = [];\n    this.getRootIdSet().forEach(id => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = { extraRootIds: extraRootIds.sort() };\n    }\n    return obj;\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    Object.keys(this.data).forEach(dataId => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const { __META, ...rest } = newData;\n      Object.keys(rest).forEach(dataId => {\n        this.merge(dataId, rest[dataId] as StoreObject);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n\n  public abstract getStorage(\n    idOrObj: string | StoreObject,\n    ...storeFieldNames: (string | number)[]\n  ): StorageType;\n\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  private rootIds: {\n    [rootId: string]: number;\n  } = Object.create(null);\n\n  public retain(rootId: string): number {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  }\n\n  public release(rootId: string): number {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  public getRootIdSet(ids = new Set<string>()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  public gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach(id => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root: EntityStore = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach(id => root.delete(id));\n    }\n    return idsToRemove;\n  }\n\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  private refs: {\n    [dataId: string]: Record<string, true>;\n  } = Object.create(null);\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = this.refs[dataId] = Object.create(null);\n      const root = this.data[dataId];\n      if (!root) return found;\n\n      const workSet = new Set<Record<string | number, any>>([root]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      workSet.forEach(obj => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n          // In rare cases, a { __ref } Reference object may have other fields.\n          // This often indicates a mismerging of References with StoreObjects,\n          // but garbage collection should not be fooled by a stray __ref\n          // property in a StoreObject (ignoring all the other fields just\n          // because the StoreObject looks like a Reference). To avoid this\n          // premature termination of findChildRefIds recursion, we fall through\n          // to the code below, which will handle any other properties of obj.\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(key => {\n            const child = obj[key];\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            if (isNonNullObject(child)) {\n              workSet.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n\n  // Used to compute cache keys specific to this.group.\n  public makeCacheKey(...args: any[]): object;\n  public makeCacheKey() {\n    return this.group.keyMaker.lookupArray(arguments);\n  }\n\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  public getFieldValue = <T = StoreValue>(\n    objectOrReference: StoreObject | Reference | undefined,\n    storeFieldName: string,\n  ) => maybeDeepFreeze(\n    isReference(objectOrReference)\n      ? this.get(objectOrReference.__ref, storeFieldName)\n      : objectOrReference && objectOrReference[storeFieldName]\n  ) as SafeReadonly<T>;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  public canRead: CanReadFunction = objOrRef => {\n    return isReference(objOrRef)\n      ? this.has(objOrRef.__ref)\n      : typeof objOrRef === \"object\";\n  };\n\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  public toReference: ToReferenceFunction = (\n    objOrIdOrRef,\n    mergeIntoStore,\n  ) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n\n    const [id] = this.policies.identify(objOrIdOrRef);\n\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n}\n\nexport type FieldValueGetter = EntityStore[\"getFieldValue\"];\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  private d: OptimisticDependencyFunction<string> | null = null;\n\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  public keyMaker: Trie<object>;\n\n  constructor(\n    public readonly caching: boolean,\n    private parent: CacheGroup | null = null,\n  ) {\n    this.resetCaching();\n  }\n\n  public resetCaching() {\n    this.d = this.caching ? dep<string>() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  }\n\n  public depend(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  }\n\n  public dirty(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d.dirty(\n        makeDepKey(dataId, storeFieldName),\n        // When storeFieldName === \"__exists\", that means the entity identified\n        // by dataId has either disappeared from the cache or was newly added,\n        // so the result caching system would do well to \"forget everything it\n        // knows\" about that object. To achieve that kind of invalidation, we\n        // not only dirty the associated result cache entry, but also remove it\n        // completely from the dependency graph. For the optimism implementation\n        // details, see https://github.com/benjamn/optimism/pull/195.\n        storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\",\n      );\n    }\n  }\n}\n\nfunction makeDepKey(dataId: string, storeFieldName: string) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + '#' + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(\n  store: NormalizedCache,\n  entityId: string,\n) {\n  if (supportsResultCaching(store)) {\n    // We use this pseudo-field __exists elsewhere in the EntityStore code to\n    // represent changes in the existence of the entity object identified by\n    // entityId. This dependency gets reliably dirtied whenever an object with\n    // this ID is deleted (or newly created) within this group, so any result\n    // cache entries (for example, StoreReader#executeSelectionSet results) that\n    // depend on __exists for this entityId will get dirtied as well, leading to\n    // the eventual recomputation (instead of reuse) of those result objects the\n    // next time someone reads them from the cache.\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\nexport namespace EntityStore {\n  // Refer to this class as EntityStore.Root outside this namespace.\n  export class Root extends EntityStore {\n    constructor({\n      policies,\n      resultCaching = true,\n      seed,\n    }: {\n      policies: Policies;\n      resultCaching?: boolean;\n      seed?: NormalizedCacheObject;\n    }) {\n      super(policies, new CacheGroup(resultCaching));\n      if (seed) this.replace(seed);\n    }\n\n    public readonly stump = new Stump(this);\n\n    public addLayer(\n      layerId: string,\n      replay: (layer: EntityStore) => any,\n    ): Layer {\n      // Adding an optimistic Layer on top of the Root actually adds the Layer\n      // on top of the Stump, so the Stump always comes between the Root and\n      // any Layer objects that we've added.\n      return this.stump.addLayer(layerId, replay);\n    }\n\n    public removeLayer(): Root {\n      // Never remove the root layer.\n      return this;\n    }\n\n    public readonly storageTrie = new Trie<StorageType>(canUseWeakMap);\n    public getStorage(): StorageType {\n      return this.storageTrie.lookupArray(arguments);\n    }\n  }\n}\n\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  constructor(\n    public readonly id: string,\n    public readonly parent: EntityStore,\n    public readonly replay: (layer: EntityStore) => any,\n    public readonly group: CacheGroup,\n  ) {\n    super(parent.policies, group);\n    replay(this);\n  }\n\n  public addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer {\n    return new Layer(layerId, this, replay, this.group);\n  }\n\n  public removeLayer(layerId: string): EntityStore {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        // Dirty every ID we're removing. Technically we might be able to avoid\n        // dirtying fields that have values in higher layers, but we don't have\n        // easy access to higher layers here, and we're about to recreate those\n        // layers anyway (see parent.addLayer below).\n        Object.keys(this.data).forEach(dataId => {\n          const ownStoreObject = this.data[dataId];\n          const parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            // The StoreObject identified by dataId was defined in this layer\n            // but will be undefined in the parent layer, so we can delete the\n            // whole entity using this.delete(dataId). Since we're about to\n            // throw this layer away, the only goal of this deletion is to dirty\n            // the removed fields.\n            this.delete(dataId);\n          } else if (!ownStoreObject) {\n            // This layer had an entry for dataId but it was undefined, which\n            // means the entity was deleted in this layer, and it's about to\n            // become undeleted when we remove this layer, so we need to dirty\n            // all fields that are about to be reexposed.\n            this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach(storeFieldName => {\n              this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            // If ownStoreObject is not exactly the same as parentStoreObject,\n            // dirty any fields whose values will change as a result of this\n            // removal.\n            Object.keys(ownStoreObject).forEach(storeFieldName => {\n              if (!equal(ownStoreObject[storeFieldName],\n                         parentStoreObject[storeFieldName])) {\n                this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? {\n      ...fromParent,\n      ...super.findChildRefIds(dataId),\n    } : fromParent;\n  }\n\n  public getStorage(): StorageType {\n    let p: EntityStore = this.parent;\n    while ((p as Layer).parent) p = (p as Layer).parent;\n    return p.getStorage.apply(p, arguments);\n  }\n}\n\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nclass Stump extends Layer {\n  constructor(root: EntityStore.Root) {\n    super(\n      \"EntityStore.Stump\",\n      root,\n      () => {},\n      new CacheGroup(root.group.caching, root.group),\n    );\n  }\n\n  public removeLayer() {\n    // Never remove the Stump layer.\n    return this;\n  }\n\n  public merge() {\n    // We never want to write any data into the Stump, so we forward any merge\n    // calls to the Root instead. Another option here would be to throw an\n    // exception, but the toReference(object, true) function can sometimes\n    // trigger Stump writes (which used to be Root writes, before the Stump\n    // concept was introduced).\n    return this.parent.merge.apply(this.parent, arguments);\n  }\n}\n\nfunction storeObjectReconciler(\n  existingObject: StoreObject,\n  incomingObject: StoreObject,\n  property: string,\n): StoreValue {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store: any): store is EntityStore {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store instanceof EntityStore && store.group.caching);\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  FieldNode,\n  SelectionSetNode,\n} from 'graphql';\nimport { wrap, OptimisticWrapperFunction } from 'optimism';\n\nimport {\n  isField,\n  resultKeyNameFromField,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n  createFragmentMap,\n  FragmentMap,\n  shouldInclude,\n  addTypenameToDocument,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getMainDefinition,\n  getQueryDefinition,\n  DeepMerger,\n  getFragmentFromSelection,\n  maybeDeepFreeze,\n  isNonNullObject,\n  canUseWeakMap,\n  compact,\n} from '../../utilities';\nimport { Cache } from '../core/types/Cache';\nimport {\n  DiffQueryAgainstStoreOptions,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from './types';\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from './entityStore';\nimport { getTypenameFromStoreObject, isArray, shouldCanonizeResults } from './helpers';\nimport { Policies } from './policies';\nimport { InMemoryCache } from './inMemoryCache';\nimport { MissingFieldError, MissingTree } from '../core/types/common';\nimport { canonicalStringify, ObjectCanon } from './object-canon';\n\nexport type VariableMap = { [name: string]: any };\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  canonizeResults: boolean;\n  fragmentMap: FragmentMap;\n  // General-purpose deep-merge function for use during reads.\n  merge<T>(existing: T, incoming: T): T;\n};\n\nexport type ExecResult<R = any> = {\n  result: R;\n  missing?: MissingTree;\n};\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: readonly any[];\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\nexport interface StoreReaderConfig {\n  cache: InMemoryCache,\n  addTypename?: boolean;\n  resultCacheMaxSize?: number;\n  canonizeResults?: boolean;\n  canon?: ObjectCanon;\n}\n\n// Arguments type after keyArgs translation.\ntype ExecSelectionSetKeyArgs = [\n  SelectionSetNode,\n  StoreObject | Reference,\n  ReadMergeModifyContext,\n  boolean,\n];\n\nfunction execSelectionSetKeyArgs(\n  options: ExecSelectionSetOptions,\n): ExecSelectionSetKeyArgs {\n  return [\n    options.selectionSet,\n    options.objectOrReference,\n    options.context,\n    // We split out this property so we can pass different values\n    // independently without modifying options.context itself.\n    options.context.canonizeResults,\n  ];\n}\n\nexport class StoreReader {\n  // cached version of executeSelectionSet\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    ExecSelectionSetKeyArgs\n  >;\n\n  // cached version of executeSubSelectedArray\n  private executeSubSelectedArray: OptimisticWrapperFunction<\n    [ExecSubSelectedArrayOptions],\n    ExecResult<any>,\n    [ExecSubSelectedArrayOptions]>;\n\n  private config: {\n    cache: InMemoryCache,\n    addTypename: boolean;\n    resultCacheMaxSize?: number;\n    canonizeResults: boolean;\n  };\n\n  private knownResults = new (\n    canUseWeakMap ? WeakMap : Map\n  )<Record<string, any>, SelectionSetNode>();\n\n  public canon: ObjectCanon;\n  public resetCanon() {\n    this.canon = new ObjectCanon;\n  }\n\n  constructor(config: StoreReaderConfig) {\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config),\n    });\n\n    this.canon = config.canon || new ObjectCanon;\n\n    this.executeSelectionSet = wrap(options => {\n      const { canonizeResults } = options.context;\n\n      const peekArgs = execSelectionSetKeyArgs(options);\n\n      // Negate this boolean option so we can find out if we've already read\n      // this result using the other boolean value.\n      peekArgs[3] = !canonizeResults;\n\n      const other = this.executeSelectionSet.peek(...peekArgs);\n\n      if (other) {\n        if (canonizeResults) {\n          return {\n            ...other,\n            // If we previously read this result without canonizing it, we can\n            // reuse that result simply by canonizing it now.\n            result: this.canon.admit(other.result),\n          };\n        }\n        // If we previously read this result with canonization enabled, we can\n        // return that canonized result as-is.\n        return other;\n      }\n\n      maybeDependOnExistenceOfEntity(\n        options.context.store,\n        options.enclosingRef.__ref,\n      );\n\n      // Finally, if we didn't find any useful previous results, run the real\n      // execSelectionSetImpl method with the given options.\n      return this.execSelectionSetImpl(options);\n\n    }, {\n      max: this.config.resultCacheMaxSize,\n      keyArgs: execSelectionSetKeyArgs,\n      // Note that the parameters of makeCacheKey are determined by the\n      // array returned by keyArgs.\n      makeCacheKey(selectionSet, parent, context, canonizeResults) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(\n            selectionSet,\n            isReference(parent) ? parent.__ref : parent,\n            context.varString,\n            canonizeResults,\n          );\n        }\n      }\n    });\n\n    this.executeSubSelectedArray = wrap((options: ExecSubSelectedArrayOptions) => {\n      maybeDependOnExistenceOfEntity(\n        options.context.store,\n        options.enclosingRef.__ref,\n      );\n      return this.execSubSelectedArrayImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey({ field, array, context }) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(\n            field,\n            array,\n            context.varString,\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = 'ROOT_QUERY',\n    variables,\n    returnPartialData = true,\n    canonizeResults = this.config.canonizeResults,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables!,\n    };\n\n    const rootRef = makeReference(rootId);\n    const merger = new DeepMerger;\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: canonicalStringify(variables),\n        canonizeResults,\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n        merge(a, b) {\n          // We use the same DeepMerger instance throughout the read, so any\n          // merged objects created during this read can be updated later in the\n          // read using in-place/destructive property assignments. Once the read\n          // is finished, these objects will be frozen, but in the meantime it's\n          // good for performance and memory usage if we avoid allocating a new\n          // object for every merged property.\n          return merger.merge(a, b);\n        },\n      },\n    });\n\n    let missing: MissingFieldError[] | undefined;\n    if (execResult.missing) {\n      // For backwards compatibility we still report an array of\n      // MissingFieldError objects, even though there will only ever be at most\n      // one of them, now that all missing field error messages are grouped\n      // together in the execResult.missing tree.\n      missing = [new MissingFieldError(\n        firstMissing(execResult.missing)!,\n        execResult.missing,\n        query,\n        variables,\n      )];\n      if (!returnPartialData) {\n        throw missing[0];\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !missing,\n      missing,\n    };\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext,\n  ): boolean {\n    if (supportsResultCaching(context.store) &&\n        this.knownResults.get(result) === selectionSet) {\n      const latest = this.executeSelectionSet.peek(\n        selectionSet,\n        parent,\n        context,\n        // If result is canonical, then it could only have been previously\n        // cached by the canonizing version of executeSelectionSet, so we can\n        // avoid checking both possibilities here.\n        this.canon.isKnown(result),\n      );\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    enclosingRef,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (isReference(objectOrReference) &&\n        !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n        !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: this.canon.empty,\n        missing: `Dangling reference to missing ${objectOrReference.__ref} object`,\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const typename = store.getFieldValue<string>(objectOrReference, \"__typename\");\n\n    let result: any = {};\n    let missing: MissingTree | undefined;\n\n    if (this.config.addTypename &&\n        typeof typename === \"string\" &&\n        !policies.rootIdsByTypename[typename]) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one, and this.config.addTypename is true. Note\n      // that this field can be overridden by other merged objects.\n      result = { __typename: typename };\n    }\n\n    function handleMissing<T>(result: ExecResult<T>, resultName: string): T {\n      if (result.missing) {\n        missing = context.merge(missing, { [resultName]: result.missing });\n      }\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach(selection => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference,\n        }, context);\n\n        const resultName = resultKeyNameFromField(selection);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = context.merge(missing, {\n              [resultName]: `Can't find field '${\n                selection.name.value\n              }' on ${\n                isReference(objectOrReference)\n                  ? objectOrReference.__ref + \" object\"\n                  : \"object \" + JSON.stringify(objectOrReference, null, 2)\n              }`\n            });\n          }\n\n        } else if (isArray(fieldValue)) {\n          fieldValue = handleMissing(this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            enclosingRef,\n            context,\n          }), resultName);\n\n        } else if (!selection.selectionSet) {\n          // If the field does not have a selection set, then we handle it\n          // as a scalar value. To keep this.canon from canonicalizing\n          // this value, we use this.canon.pass to wrap fieldValue in a\n          // Pass object that this.canon.admit will later unwrap as-is.\n          if (context.canonizeResults) {\n            fieldValue = this.canon.pass(fieldValue);\n          }\n\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue as StoreObject | Reference,\n            enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n            context,\n          }), resultName);\n        }\n\n        if (fieldValue !== void 0) {\n          result = context.merge(result, { [resultName]: fieldValue });\n        }\n\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.fragmentMap,\n        );\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    const finalResult: ExecResult = { result, missing };\n    const frozen = context.canonizeResults\n      ? this.canon.admit(finalResult)\n      // Since this.canon is normally responsible for freezing results (only in\n      // development), freeze them manually if canonization is disabled.\n      : maybeDeepFreeze(finalResult);\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n\n    return frozen;\n  }\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    enclosingRef,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingTree | undefined;\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = context.merge(missing, { [i]: childResult.missing });\n      }\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray({\n          field,\n          array: item,\n          enclosingRef,\n          context,\n        }), i);\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          enclosingRef: isReference(item) ? item : enclosingRef,\n          context,\n        }), i);\n      }\n\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      return item;\n    });\n\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing,\n    };\n  }\n}\n\nfunction firstMissing(tree: MissingTree): string | undefined {\n  try {\n    JSON.stringify(tree, (_, value) => {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result;\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any,\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach(value => {\n      if (isNonNullObject(value)) {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type ${\n            getTypenameFromStoreObject(store, value)\n          } returned for query field ${field.name.value}`,\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n","import { invariant } from \"../../utilities/globals\";\n\nimport {\n  argumentsObjectFromField,\n  DeepMerger,\n  isNonEmptyArray,\n  isNonNullObject,\n} from \"../../utilities\";\n\nimport { hasOwn, isArray } from \"./helpers\";\nimport {\n  KeySpecifier,\n  KeyFieldsFunction,\n  KeyArgsFunction,\n} from \"./policies\";\n\n// Mapping from JSON-encoded KeySpecifier strings to associated information.\nconst specifierInfoCache: Record<string, {\n  paths?: string[][];\n  keyFieldsFn?: KeyFieldsFunction;\n  keyArgsFn?: KeyArgsFunction;\n}> = Object.create(null);\n\nfunction lookupSpecifierInfo(spec: KeySpecifier) {\n  // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're\n  // just arrays of strings or nested KeySpecifier arrays, and the order of the\n  // array elements is important (and suitably preserved by JSON.stringify).\n  const cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] ||\n    (specifierInfoCache[cacheKey] = Object.create(null));\n}\n\nexport function keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyFieldsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return info.keyFieldsFn || (info.keyFieldsFn = (\n    object,\n    context,\n  ) => {\n    const extract: typeof extractKey =\n      (from, key) => context.readField(key, from);\n\n    const keyObject = context.keyObject = collectSpecifierPaths(\n      specifier,\n      schemaKeyPath => {\n        let extracted = extractKeyPath(\n          context.storeObject,\n          schemaKeyPath,\n          // Using context.readField to extract paths from context.storeObject\n          // allows the extraction to see through Reference objects and respect\n          // custom read functions.\n          extract,\n        );\n\n        if (\n          extracted === void 0 &&\n          object !== context.storeObject &&\n          hasOwn.call(object, schemaKeyPath[0])\n        ) {\n          // If context.storeObject fails to provide a value for the requested\n          // path, fall back to the raw result object, if it has a top-level key\n          // matching the first key in the path (schemaKeyPath[0]). This allows\n          // key fields included in the written data to be saved in the cache\n          // even if they are not selected explicitly in context.selectionSet.\n          // Not being mentioned by context.selectionSet is convenient here,\n          // since it means these extra fields cannot be affected by field\n          // aliasing, which is why we can use extractKey instead of\n          // context.readField for this extraction.\n          extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n        }\n\n        invariant(\n          extracted !== void 0,\n          `Missing field '${schemaKeyPath.join('.')}' while extracting keyFields from ${\n            JSON.stringify(object)\n          }`,\n        );\n\n        return extracted;\n      },\n    );\n\n    return `${context.typename}:${JSON.stringify(keyObject)}`;\n  });\n}\n\n// The keyArgs extraction process is roughly analogous to keyFields extraction,\n// but there are no aliases involved, missing fields are tolerated (by merely\n// omitting them from the key), and drawing from field.directives or variables\n// is allowed (in addition to drawing from the field's arguments object).\n// Concretely, these differences mean passing a different key path extractor\n// function to collectSpecifierPaths, reusing the shared extractKeyPath helper\n// wherever possible.\nexport function keyArgsFnFromSpecifier(specifier: KeySpecifier): KeyArgsFunction {\n  const info = lookupSpecifierInfo(specifier);\n\n  return info.keyArgsFn || (info.keyArgsFn = (args, {\n    field,\n    variables,\n    fieldName,\n  }) => {\n    const collected = collectSpecifierPaths(specifier, keyPath => {\n      const firstKey = keyPath[0];\n      const firstChar = firstKey.charAt(0);\n\n      if (firstChar === \"@\") {\n        if (field && isNonEmptyArray(field.directives)) {\n          const directiveName = firstKey.slice(1);\n          // If the directive appears multiple times, only the first\n          // occurrence's arguments will be used. TODO Allow repetition?\n          // TODO Cache this work somehow, a la aliasMap?\n          const d = field.directives.find(d => d.name.value === directiveName);\n          // Fortunately argumentsObjectFromField works for DirectiveNode!\n          const directiveArgs = d && argumentsObjectFromField(d, variables);\n          // For directives without arguments (d defined, but directiveArgs ===\n          // null), the presence or absence of the directive still counts as\n          // part of the field key, so we return null in those cases. If no\n          // directive with this name was found for this field (d undefined and\n          // thus directiveArgs undefined), we return undefined, which causes\n          // this value to be omitted from the key object returned by\n          // collectSpecifierPaths.\n          return directiveArgs && extractKeyPath(\n            directiveArgs,\n            // If keyPath.length === 1, this code calls extractKeyPath with an\n            // empty path, which works because it uses directiveArgs as the\n            // extracted value.\n            keyPath.slice(1),\n          );\n        }\n        // If the key started with @ but there was no corresponding directive,\n        // we want to omit this value from the key object, not fall through to\n        // treating @whatever as a normal argument name.\n        return;\n      }\n\n      if (firstChar === \"$\") {\n        const variableName = firstKey.slice(1);\n        if (variables && hasOwn.call(variables, variableName)) {\n          const varKeyPath = keyPath.slice(0);\n          varKeyPath[0] = variableName;\n          return extractKeyPath(variables, varKeyPath);\n        }\n        // If the key started with $ but there was no corresponding variable, we\n        // want to omit this value from the key object, not fall through to\n        // treating $whatever as a normal argument name.\n        return;\n      }\n\n      if (args) {\n        return extractKeyPath(args, keyPath);\n      }\n    });\n\n    const suffix = JSON.stringify(collected);\n\n    // If no arguments were passed to this field, and it didn't have any other\n    // field key contributions from directives or variables, hide the empty\n    // :{} suffix from the field key. However, a field passed no arguments can\n    // still end up with a non-empty :{...} suffix if its key configuration\n    // refers to directives or variables.\n    if (args || suffix !== \"{}\") {\n      fieldName += \":\" + suffix;\n    }\n\n    return fieldName;\n  });\n}\n\nexport function collectSpecifierPaths(\n  specifier: KeySpecifier,\n  extractor: (path: string[]) => any,\n): Record<string, any> {\n  // For each path specified by specifier, invoke the extractor, and repeatedly\n  // merge the results together, with appropriate ancestor context.\n  const merger = new DeepMerger;\n  return getSpecifierPaths(specifier).reduce((collected, path) => {\n    let toMerge = extractor(path);\n    if (toMerge !== void 0) {\n      // This path is not expected to contain array indexes, so the toMerge\n      // reconstruction will not contain arrays. TODO Fix this?\n      for (let i = path.length - 1; i >= 0; --i) {\n        toMerge = { [path[i]]: toMerge };\n      }\n      collected = merger.merge(collected, toMerge);\n    }\n    return collected;\n  }, Object.create(null));\n}\n\nexport function getSpecifierPaths(spec: KeySpecifier): string[][] {\n  const info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    const paths: string[][] = info.paths = [];\n    const currentPath: string[] = [];\n\n    spec.forEach((s, i) => {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach(p => paths.push(currentPath.concat(p)));\n        currentPath.length = 0;\n      } else {\n        currentPath.push(s);\n        if (!isArray(spec[i + 1])) {\n          paths.push(currentPath.slice(0));\n          currentPath.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths!;\n}\n\nfunction extractKey<\n  TObj extends Record<string, any>,\n  TKey extends string,\n>(object: TObj, key: TKey): TObj[TKey] | undefined {\n  return object[key];\n}\n\nexport function extractKeyPath(\n  object: Record<string, any>,\n  path: string[],\n  extract?: typeof extractKey,\n): any {\n  // For each key in path, extract the corresponding child property from obj,\n  // flattening arrays if encountered (uncommon for keyFields and keyArgs, but\n  // possible). The final result of path.reduce is normalized so unexpected leaf\n  // objects have their keys safely sorted. That final result is difficult to\n  // type as anything other than any. You're welcome to try to improve the\n  // return type, but keep in mind extractKeyPath is not a public function\n  // (exported only for testing), so the effort may not be worthwhile unless the\n  // limited set of actual callers (see above) pass arguments that TypeScript\n  // can statically type. If we know only that path is some array of strings\n  // (and not, say, a specific tuple of statically known strings), any (or\n  // possibly unknown) is the honest answer.\n  extract = extract || extractKey;\n  return normalize(path.reduce(function reducer(obj, key): any {\n    return isArray(obj)\n      ? obj.map(child => reducer(child, key))\n      : obj && extract!(obj, key);\n  }, object));\n}\n\nfunction normalize<T>(value: T): T {\n  // Usually the extracted value will be a scalar value, since most primary\n  // key fields are scalar, but just in case we get an object or an array, we\n  // need to do some normalization of the order of (nested) keys.\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize) as any;\n    }\n    return collectSpecifierPaths(\n      Object.keys(value).sort(),\n      path => extractKeyPath(value, path),\n    ) as T;\n  }\n  return value;\n}\n","import { invariant, InvariantError } from '../../utilities/globals';\n\nimport {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n} from 'graphql';\n\nimport {\n  FragmentMap,\n  storeKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  argumentsObjectFromField,\n  Reference,\n  isReference,\n  getStoreKeyName,\n  isNonNullObject,\n  stringifyForDisplay,\n} from '../../utilities';\nimport {\n  IdGetter,\n  MergeInfo,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types\";\nimport {\n  hasOwn,\n  fieldNameFromStoreName,\n  storeValueIsStoreObject,\n  selectionSetMatchesResult,\n  TypeOrFieldNameRegExp,\n  defaultDataIdFromObject,\n  isArray,\n} from './helpers';\nimport { cacheSlot } from './reactiveVars';\nimport { InMemoryCache } from './inMemoryCache';\nimport {\n  SafeReadonly,\n  FieldSpecifier,\n  ToReferenceFunction,\n  ReadFieldFunction,\n  ReadFieldOptions,\n  CanReadFunction,\n} from '../core/types/common';\nimport { WriteContext } from './writeToStore';\n\n// Upgrade to a faster version of the default stable JSON.stringify function\n// used by getStoreKeyName. This function is used when computing storeFieldName\n// strings (when no keyArgs has been configured for a field).\nimport { canonicalStringify } from './object-canon';\nimport { keyArgsFnFromSpecifier, keyFieldsFnFromSpecifier } from './key-extractor';\n\ngetStoreKeyName.setStringify(canonicalStringify);\n\nexport type TypePolicies = {\n  [__typename: string]: TypePolicy;\n}\n\n// TypeScript 3.7 will allow recursive type aliases, so this should work:\n// type KeySpecifier = (string | KeySpecifier)[]\nexport type KeySpecifier = ReadonlyArray<string | KeySpecifier>;\n\nexport type KeyFieldsContext = {\n  // The __typename of the incoming object, even if the __typename field was\n  // aliased to another name in the raw result object. May be undefined when\n  // dataIdFromObject is called for objects without __typename fields.\n  typename: string | undefined;\n\n  // The object to be identified, after processing to remove aliases and\n  // normalize identifiable child objects with references.\n  storeObject: StoreObject;\n\n  // Handy tool for reading additional fields from context.storeObject, either\n  // readField(\"fieldName\") to read storeObject[fieldName], or readField(\"name\",\n  // objectOrReference) to read from another object or Reference. If you read a\n  // field with a read function, that function will be invoked.\n  readField: ReadFieldFunction;\n\n  // If you are writing a custom keyFields function, and you plan to use the raw\n  // result object passed as the first argument, you may also need access to the\n  // selection set and available fragments for this object, just in case any\n  // fields have aliases. Since this logic is tricky to get right, and these\n  // context properties are not even always provided (for example, they are\n  // omitted when calling cache.identify(object), where object is assumed to be\n  // a StoreObject), we recommend you use context.storeObject (which has already\n  // been de-aliased) and context.readField (which can read from references as\n  // well as objects) instead of the raw result object in your keyFields\n  // functions, or just rely on the internal implementation of keyFields:[...]\n  // syntax to get these details right for you.\n  selectionSet?: SelectionSetNode;\n  fragmentMap?: FragmentMap;\n\n  // Internal. May be set by the KeyFieldsFunction to report fields that were\n  // involved in computing the ID. Never passed in by the caller.\n  keyObject?: Record<string, any>;\n};\n\nexport type KeyFieldsFunction = (\n  object: Readonly<StoreObject>,\n  context: KeyFieldsContext,\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\ntype KeyFieldsResult = Exclude<ReturnType<KeyFieldsFunction>, KeySpecifier>;\n\n// TODO Should TypePolicy be a generic type, with a TObject or TEntity\n// type parameter?\nexport type TypePolicy = {\n  // Allows defining the primary key fields for this type, either using an\n  // array of field names or a function that returns an arbitrary string.\n  keyFields?: KeySpecifier | KeyFieldsFunction | false;\n\n  // Allows defining a merge function (or merge:true/false shorthand) to\n  // be used for merging objects of this type wherever they appear, unless\n  // the parent field also defines a merge function/boolean (that is,\n  // parent field merge functions take precedence over type policy merge\n  // functions). In many cases, defining merge:true for a given type\n  // policy can save you from specifying merge:true for all the field\n  // policies where that type might be encountered.\n  merge?: FieldMergeFunction | boolean;\n\n  // In the rare event that your schema happens to use a different\n  // __typename for the root Query, Mutation, and/or Schema types, you can\n  // express your deviant preferences by enabling one of these options.\n  queryType?: true,\n  mutationType?: true,\n  subscriptionType?: true,\n\n  fields?: {\n    [fieldName: string]:\n      | FieldPolicy<any>\n      | FieldReadFunction<any>;\n  }\n};\n\nexport type KeyArgsFunction = (\n  args: Record<string, any> | null,\n  context: {\n    typename: string;\n    fieldName: string;\n    field: FieldNode | null;\n    variables?: Record<string, any>;\n  },\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\nexport type FieldPolicy<\n  // The internal representation used to store the field's data in the\n  // cache. Must be JSON-serializable if you plan to serialize the result\n  // of cache.extract() using JSON.\n  TExisting = any,\n  // The type of the incoming parameter passed to the merge function,\n  // typically matching the GraphQL response format, but with Reference\n  // objects substituted for any identifiable child objects. Often the\n  // same as TExisting, but not necessarily.\n  TIncoming = TExisting,\n  // The type that the read function actually returns, using TExisting\n  // data and options.args as input. Usually the same as TIncoming.\n  TReadResult = TIncoming,\n  // Allows FieldFunctionOptions definition to be overwritten by the\n  // developer\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = {\n  keyArgs?: KeySpecifier | KeyArgsFunction | false;\n  read?: FieldReadFunction<TExisting, TReadResult, TOptions>;\n  merge?: FieldMergeFunction<TExisting, TIncoming, TOptions> | boolean;\n};\n\nexport type StorageType = Record<string, any>;\n\nfunction argsFromFieldSpecifier(spec: FieldSpecifier) {\n  return spec.args !== void 0 ? spec.args :\n    spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\n\nexport interface FieldFunctionOptions<\n  TArgs = Record<string, any>,\n  TVars = Record<string, any>,\n> {\n  args: TArgs | null;\n\n  // The name of the field, equal to options.field.name.value when\n  // options.field is available. Useful if you reuse the same function for\n  // multiple fields, and you need to know which field you're currently\n  // processing. Always a string, even when options.field is null.\n  fieldName: string;\n\n  // The full field key used internally, including serialized key arguments.\n  storeFieldName: string;\n\n  // The FieldNode object used to read this field. Useful if you need to\n  // know about other attributes of the field, such as its directives. This\n  // option will be null when a string was passed to options.readField.\n  field: FieldNode | null;\n\n  variables?: TVars;\n\n  // Utilities for dealing with { __ref } objects.\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n\n  // A handy place to put field-specific data that you want to survive\n  // across multiple read function calls. Useful for field-level caching,\n  // if your read function does any expensive work.\n  storage: StorageType;\n\n  cache: InMemoryCache;\n\n  // Helper function for reading other fields within the current object.\n  // If a foreign object or reference is provided, the field will be read\n  // from that object instead of the current object, so this function can\n  // be used (together with isReference) to examine the cache outside the\n  // current object. If a FieldNode is passed instead of a string, and\n  // that FieldNode has arguments, the same options.variables will be used\n  // to compute the argument values. Note that this function will invoke\n  // custom read functions for other fields, if defined. Always returns\n  // immutable data (enforced with Object.freeze in development).\n  readField: ReadFieldFunction;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  canRead: CanReadFunction;\n\n  // Instead of just merging objects with { ...existing, ...incoming }, this\n  // helper function can be used to merge objects in a way that respects any\n  // custom merge functions defined for their fields.\n  mergeObjects: MergeObjectsFunction;\n}\n\ntype MergeObjectsFunction = <T extends StoreObject | Reference>(\n  existing: T,\n  incoming: T,\n) => T;\n\nexport type FieldReadFunction<\n  TExisting = any,\n  TReadResult = TExisting,\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = (\n  // When reading a field, one often needs to know about any existing\n  // value stored for that field. If the field is read before any value\n  // has been written to the cache, this existing parameter will be\n  // undefined, which makes it easy to use a default parameter expression\n  // to supply the initial value. This parameter is positional (rather\n  // than one of the named options) because that makes it possible for the\n  // developer to annotate it with a type, without also having to provide\n  // a whole new type for the options object.\n  existing: SafeReadonly<TExisting> | undefined,\n  options: TOptions,\n) => TReadResult | undefined;\n\nexport type FieldMergeFunction<\n  TExisting = any,\n  TIncoming = TExisting,\n  // Passing the whole FieldFunctionOptions makes the current definition\n  // independent from its implementation\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = (\n  existing: SafeReadonly<TExisting> | undefined,\n  // The incoming parameter needs to be positional as well, for the same\n  // reasons discussed in FieldReadFunction above.\n  incoming: SafeReadonly<TIncoming>,\n  options: TOptions,\n) => SafeReadonly<TExisting>;\n\nconst nullKeyFieldsFn: KeyFieldsFunction = () => void 0;\nconst simpleKeyArgsFn: KeyArgsFunction = (_args, context) => context.fieldName;\n\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nconst mergeTrueFn: FieldMergeFunction<any> =\n  (existing, incoming, { mergeObjects }) => mergeObjects(existing, incoming);\nconst mergeFalseFn: FieldMergeFunction<any> = (_, incoming) => incoming;\n\nexport type PossibleTypesMap = {\n  [supertype: string]: string[];\n};\n\nexport class Policies {\n  private typePolicies: {\n    [__typename: string]: {\n      keyFn?: KeyFieldsFunction;\n      merge?: FieldMergeFunction<any>;\n      fields: {\n        [fieldName: string]: {\n          keyFn?: KeyArgsFunction;\n          read?: FieldReadFunction<any>;\n          merge?: FieldMergeFunction<any>;\n        };\n      };\n    };\n  } = Object.create(null);\n\n  private toBeAdded: {\n    [__typename: string]: TypePolicy[];\n  } = Object.create(null);\n\n  // Map from subtype names to sets of supertype names. Note that this\n  // representation inverts the structure of possibleTypes (whose keys are\n  // supertypes and whose values are arrays of subtypes) because it tends\n  // to be much more efficient to search upwards than downwards.\n  private supertypeMap = new Map<string, Set<string>>();\n\n  // Any fuzzy subtypes specified by possibleTypes will be converted to\n  // RegExp objects and recorded here. Every key of this map can also be\n  // found in supertypeMap. In many cases this Map will be empty, which\n  // means no fuzzy subtype checking will happen in fragmentMatches.\n  private fuzzySubtypes = new Map<string, RegExp>();\n\n  public readonly cache: InMemoryCache;\n\n  public readonly rootIdsByTypename: Record<string, string> = Object.create(null);\n  public readonly rootTypenamesById: Record<string, string> = Object.create(null);\n\n  public readonly usingPossibleTypes = false;\n\n  constructor(private config: {\n    cache: InMemoryCache;\n    dataIdFromObject?: KeyFieldsFunction;\n    possibleTypes?: PossibleTypesMap;\n    typePolicies?: TypePolicies;\n  }) {\n    this.config = {\n      dataIdFromObject: defaultDataIdFromObject,\n      ...config,\n    };\n\n    this.cache = this.config.cache;\n\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  public identify(\n    object: StoreObject,\n    partialContext?: Partial<KeyFieldsContext>,\n  ): [string?, StoreObject?] {\n    const policies = this;\n\n    const typename = partialContext && (\n      partialContext.typename ||\n      partialContext.storeObject?.__typename\n    ) || object.__typename;\n\n    // It should be possible to write root Query fields with writeFragment,\n    // using { __typename: \"Query\", ... } as the data, but it does not make\n    // sense to allow the same identification behavior for the Mutation and\n    // Subscription types, since application code should never be writing\n    // directly to (or reading directly from) those root objects.\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    // Default context.storeObject to object if not otherwise provided.\n    const storeObject = partialContext && partialContext.storeObject || object;\n\n    const context: KeyFieldsContext = {\n      ...partialContext,\n      typename,\n      storeObject,\n      readField: partialContext && partialContext.readField || function () {\n        const options = normalizeReadFieldOptions(arguments, storeObject);\n        return policies.readField(options, {\n          store: policies.cache[\"data\"],\n          variables: options.variables,\n        });\n      },\n    };\n\n    let id: KeyFieldsResult;\n\n    const policy = typename && this.getTypePolicy(typename);\n    let keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n    while (keyFn) {\n      const specifierOrId = keyFn(object, context);\n      if (isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  }\n\n  public addTypePolicies(typePolicies: TypePolicies) {\n    Object.keys(typePolicies).forEach(typename => {\n      const {\n        queryType,\n        mutationType,\n        subscriptionType,\n        ...incoming\n      } = typePolicies[typename];\n\n      // Though {query,mutation,subscription}Type configurations are rare,\n      // it's important to call setRootTypename as early as possible,\n      // since these configurations should apply consistently for the\n      // entire lifetime of the cache. Also, since only one __typename can\n      // qualify as one of these root types, these three properties cannot\n      // be inherited, unlike the rest of the incoming properties. That\n      // restriction is convenient, because the purpose of this.toBeAdded\n      // is to delay the processing of type/field policies until the first\n      // time they're used, allowing policies to be added in any order as\n      // long as all relevant policies (including policies for supertypes)\n      // have been added by the time a given policy is used for the first\n      // time. In other words, since inheritance doesn't matter for these\n      // properties, there's also no need to delay their processing using\n      // the this.toBeAdded queue.\n      if (queryType) this.setRootTypename(\"Query\", typename);\n      if (mutationType) this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(this.toBeAdded, typename)) {\n        this.toBeAdded[typename].push(incoming);\n      } else {\n        this.toBeAdded[typename] = [incoming];\n      }\n    });\n  }\n\n  private updateTypePolicy(typename: string, incoming: TypePolicy) {\n    const existing = this.getTypePolicy(typename);\n    const { keyFields, fields } = incoming;\n\n    function setMerge(\n      existing: { merge?: FieldMergeFunction | boolean; },\n      merge?: FieldMergeFunction | boolean,\n    ) {\n      existing.merge =\n        typeof merge === \"function\" ? merge :\n        // Pass merge:true as a shorthand for a merge implementation\n        // that returns options.mergeObjects(existing, incoming).\n        merge === true ? mergeTrueFn :\n        // Pass merge:false to make incoming always replace existing\n        // without any warnings about data clobbering.\n        merge === false ? mergeFalseFn :\n        existing.merge;\n    }\n\n    // Type policies can define merge functions, as an alternative to\n    // using field policies to merge child objects.\n    setMerge(existing, incoming.merge);\n\n    existing.keyFn =\n      // Pass false to disable normalization for this typename.\n      keyFields === false ? nullKeyFieldsFn :\n      // Pass an array of strings to use those fields to compute a\n      // composite ID for objects of this typename.\n      isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) :\n      // Pass a function to take full control over identification.\n      typeof keyFields === \"function\" ? keyFields :\n      // Leave existing.keyFn unchanged if above cases fail.\n      existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach(fieldName => {\n        const existing = this.getFieldPolicy(typename, fieldName, true)!;\n        const incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          const { keyArgs, read, merge } = incoming;\n\n          existing.keyFn =\n            // Pass false to disable argument-based differentiation of\n            // field identities.\n            keyArgs === false ? simpleKeyArgsFn :\n            // Pass an array of strings to use named arguments to\n            // compute a composite identity for the field.\n            isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) :\n            // Pass a function to take full control over field identity.\n            typeof keyArgs === \"function\" ? keyArgs :\n            // Leave existing.keyFn unchanged if above cases fail.\n            existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          // If we have both a read and a merge function, assume\n          // keyArgs:false, because read and merge together can take\n          // responsibility for interpreting arguments in and out. This\n          // default assumption can always be overridden by specifying\n          // keyArgs explicitly in the FieldPolicy.\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  }\n\n  private setRootTypename(\n    which: \"Query\" | \"Mutation\" | \"Subscription\",\n    typename: string = which,\n  ) {\n    const rootId = \"ROOT_\" + which.toUpperCase();\n    const old = this.rootTypenamesById[rootId];\n    if (typename !== old) {\n      invariant(!old || old === which, `Cannot change root ${which} __typename more than once`);\n      // First, delete any old __typename associated with this rootId from\n      // rootIdsByTypename.\n      if (old) delete this.rootIdsByTypename[old];\n      // Now make this the only __typename that maps to this rootId.\n      this.rootIdsByTypename[typename] = rootId;\n      // Finally, update the __typename associated with this rootId.\n      this.rootTypenamesById[rootId] = typename;\n    }\n  }\n\n  public addPossibleTypes(possibleTypes: PossibleTypesMap) {\n    (this.usingPossibleTypes as boolean) = true;\n    Object.keys(possibleTypes).forEach(supertype => {\n      // Make sure all types have an entry in this.supertypeMap, even if\n      // their supertype set is empty, so we can return false immediately\n      // from policies.fragmentMatches for unknown supertypes.\n      this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach(subtype => {\n        this.getSupertypeSet(subtype, true)!.add(supertype);\n        const match = subtype.match(TypeOrFieldNameRegExp);\n        if (!match || match[0] !== subtype) {\n          // TODO Don't interpret just any invalid typename as a RegExp.\n          this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  }\n\n  private getTypePolicy(typename: string): Policies[\"typePolicies\"][string] {\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      const policy: Policies[\"typePolicies\"][string] =\n        this.typePolicies[typename] = Object.create(null);\n      policy.fields = Object.create(null);\n\n      // When the TypePolicy for typename is first accessed, instead of\n      // starting with an empty policy object, inherit any properties or\n      // fields from the type policies of the supertypes of typename.\n      //\n      // Any properties or fields defined explicitly within the TypePolicy\n      // for typename will take precedence, and if there are multiple\n      // supertypes, the properties of policies whose types were added\n      // later via addPossibleTypes will take precedence over those of\n      // earlier supertypes. TODO Perhaps we should warn about these\n      // conflicts in development, and recommend defining the property\n      // explicitly in the subtype policy?\n      //\n      // Field policy inheritance is atomic/shallow: you can't inherit a\n      // field policy and then override just its read function, since read\n      // and merge functions often need to cooperate, so changing only one\n      // of them would be a recipe for inconsistency.\n      //\n      // Once the TypePolicy for typename has been accessed, its\n      // properties can still be updated directly using addTypePolicies,\n      // but future changes to supertype policies will not be reflected in\n      // this policy, because this code runs at most once per typename.\n      const supertypes = this.supertypeMap.get(typename);\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(supertype => {\n          const { fields, ...rest } = this.getTypePolicy(supertype);\n          Object.assign(policy, rest);\n          Object.assign(policy.fields, fields);\n        });\n      }\n    }\n\n    const inbox = this.toBeAdded[typename];\n    if (inbox && inbox.length) {\n      // Merge the pending policies into this.typePolicies, in the order they\n      // were originally passed to addTypePolicy.\n      inbox.splice(0).forEach(policy => {\n        this.updateTypePolicy(typename, policy);\n      });\n    }\n\n    return this.typePolicies[typename];\n  }\n\n  private getFieldPolicy(\n    typename: string | undefined,\n    fieldName: string,\n    createIfMissing: boolean,\n  ): {\n    keyFn?: KeyArgsFunction;\n    read?: FieldReadFunction<any>;\n    merge?: FieldMergeFunction<any>;\n  } | undefined {\n    if (typename) {\n      const fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || (\n        createIfMissing && (fieldPolicies[fieldName] = Object.create(null)));\n    }\n  }\n\n  private getSupertypeSet(\n    subtype: string,\n    createIfMissing: boolean,\n  ): Set<string> | undefined {\n    let supertypeSet = this.supertypeMap.get(subtype);\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set<string>());\n    }\n    return supertypeSet;\n  }\n\n  public fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string | undefined,\n    result?: Record<string, any>,\n    variables?: Record<string, any>,\n  ): boolean {\n    if (!fragment.typeCondition) return true;\n\n    // If the fragment has a type condition but the object we're matching\n    // against does not have a __typename, the fragment cannot match.\n    if (!typename) return false;\n\n    const supertype = fragment.typeCondition.name.value;\n    // Common case: fragment type condition and __typename are the same.\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes &&\n        this.supertypeMap.has(supertype)) {\n      const typenameSupertypeSet = this.getSupertypeSet(typename, true)!;\n      const workQueue = [typenameSupertypeSet];\n      const maybeEnqueue = (subtype: string) => {\n        const supertypeSet = this.getSupertypeSet(subtype, false);\n        if (supertypeSet &&\n            supertypeSet.size &&\n            workQueue.indexOf(supertypeSet) < 0) {\n          workQueue.push(supertypeSet);\n        }\n      };\n\n      // We need to check fuzzy subtypes only if we encountered fuzzy\n      // subtype strings in addPossibleTypes, and only while writing to\n      // the cache, since that's when selectionSetMatchesResult gives a\n      // strong signal of fragment matching. The StoreReader class calls\n      // policies.fragmentMatches without passing a result object, so\n      // needToCheckFuzzySubtypes is always false while reading.\n      let needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      let checkingFuzzySubtypes = false;\n\n      // It's important to keep evaluating workQueue.length each time through\n      // the loop, because the queue can grow while we're iterating over it.\n      for (let i = 0; i < workQueue.length; ++i) {\n        const supertypeSet = workQueue[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              invariant.warn(`Inferring subtype ${typename} of supertype ${supertype}`);\n            }\n            // Record positive results for faster future lookup.\n            // Unfortunately, we cannot safely cache negative results,\n            // because new possibleTypes data could always be added to the\n            // Policies class.\n            typenameSupertypeSet.add(supertype);\n          }\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue);\n\n        if (needToCheckFuzzySubtypes &&\n            // Start checking fuzzy subtypes only after exhausting all\n            // non-fuzzy subtypes (after the final iteration of the loop).\n            i === workQueue.length - 1 &&\n            // We could wait to compare fragment.selectionSet to result\n            // after we verify the supertype, but this check is often less\n            // expensive than that search, and we will have to do the\n            // comparison anyway whenever we find a potential match.\n            selectionSetMatchesResult(fragment.selectionSet, result!, variables)) {\n          // We don't always need to check fuzzy subtypes (if no result\n          // was provided, or !this.fuzzySubtypes.size), but, when we do,\n          // we only want to check them once.\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n\n          // If we find any fuzzy subtypes that match typename, extend the\n          // workQueue to search through the supertypes of those fuzzy\n          // subtypes. Otherwise the for-loop will terminate and we'll\n          // return false below.\n          this.fuzzySubtypes.forEach((regExp, fuzzyString) => {\n            const match = typename.match(regExp);\n            if (match && match[0] === typename) {\n              maybeEnqueue(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public hasKeyArgs(typename: string | undefined, fieldName: string) {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  }\n\n  public getStoreFieldName(fieldSpec: FieldSpecifier): string {\n    const { typename, fieldName } = fieldSpec;\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    let storeFieldName: Exclude<ReturnType<KeyArgsFunction>, KeySpecifier>;\n\n    let keyFn = policy && policy.keyFn;\n    if (keyFn && typename) {\n      const context: Parameters<KeyArgsFunction>[1] = {\n        typename,\n        fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables,\n      };\n      const args = argsFromFieldSpecifier(fieldSpec);\n      while (keyFn) {\n        const specifierOrString = keyFn(args, context);\n        if (isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          // If the custom keyFn returns a falsy value, fall back to\n          // fieldName instead.\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field\n        ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n        : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    // Returning false from a keyArgs function is like configuring\n    // keyArgs: false, but more dynamic.\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n\n    // Make sure custom field names start with the actual field.name.value\n    // of the field, so we can always figure out which properties of a\n    // StoreObject correspond to which original field names.\n    return fieldName === fieldNameFromStoreName(storeFieldName)\n      ? storeFieldName\n      : fieldName + \":\" + storeFieldName;\n  }\n\n  public readField<V = StoreValue>(\n    options: ReadFieldOptions,\n    context: ReadMergeModifyContext,\n  ): SafeReadonly<V> | undefined {\n    const objectOrReference = options.from;\n    if (!objectOrReference) return;\n\n    const nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      const typename = context.store.getFieldValue<string>(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n\n    const storeFieldName = this.getStoreFieldName(options);\n    const fieldName = fieldNameFromStoreName(storeFieldName);\n    const existing = context.store.getFieldValue<V>(objectOrReference, storeFieldName);\n    const policy = this.getFieldPolicy(options.typename, fieldName, false);\n    const read = policy && policy.read;\n\n    if (read) {\n      const readOptions = makeFieldFunctionOptions(\n        this,\n        objectOrReference,\n        options,\n        context,\n        context.store.getStorage(\n          isReference(objectOrReference)\n            ? objectOrReference.__ref\n            : objectOrReference,\n          storeFieldName,\n        ),\n      );\n\n      // Call read(existing, readOptions) with cacheSlot holding this.cache.\n      return cacheSlot.withValue(\n        this.cache,\n        read,\n        [existing, readOptions],\n      ) as SafeReadonly<V>;\n    }\n\n    return existing;\n  }\n\n  public getReadFunction(\n    typename: string | undefined,\n    fieldName: string,\n  ): FieldReadFunction | undefined {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return policy && policy.read;\n  }\n\n  public getMergeFunction(\n    parentTypename: string | undefined,\n    fieldName: string,\n    childTypename: string | undefined,\n  ): FieldMergeFunction | undefined {\n    let policy:\n      | Policies[\"typePolicies\"][string]\n      | Policies[\"typePolicies\"][string][\"fields\"][string]\n      | undefined =\n      this.getFieldPolicy(parentTypename, fieldName, false);\n    let merge = policy && policy.merge;\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n    return merge;\n  }\n\n  public runMergeFunction(\n    existing: StoreValue,\n    incoming: StoreValue,\n    { field, typename, merge }: MergeInfo,\n    context: WriteContext,\n    storage?: StorageType,\n  ) {\n    if (merge === mergeTrueFn) {\n      // Instead of going to the trouble of creating a full\n      // FieldFunctionOptions object and calling mergeTrueFn, we can\n      // simply call mergeObjects, as mergeTrueFn would.\n      return makeMergeObjectsFunction(\n        context.store,\n      )(existing as StoreObject,\n        incoming as StoreObject);\n    }\n\n    if (merge === mergeFalseFn) {\n      // Likewise for mergeFalseFn, whose implementation is even simpler.\n      return incoming;\n    }\n\n    // If cache.writeQuery or cache.writeFragment was called with\n    // options.overwrite set to true, we still call merge functions, but\n    // the existing data is always undefined, so the merge function will\n    // not attempt to combine the incoming data with the existing data.\n    if (context.overwrite) {\n      existing = void 0;\n    }\n\n    return merge(existing, incoming, makeFieldFunctionOptions(\n      this,\n      // Unlike options.readField for read functions, we do not fall\n      // back to the current object if no foreignObjOrRef is provided,\n      // because it's not clear what the current object should be for\n      // merge functions: the (possibly undefined) existing object, or\n      // the incoming object? If you think your merge function needs\n      // to read sibling fields in order to produce a new value for\n      // the current field, you might want to rethink your strategy,\n      // because that's a recipe for making merge behavior sensitive\n      // to the order in which fields are written into the cache.\n      // However, readField(name, ref) is useful for merge functions\n      // that need to deduplicate child objects and references.\n      void 0,\n      { typename,\n        fieldName: field.name.value,\n        field,\n        variables: context.variables },\n      context,\n      storage || Object.create(null),\n    ));\n  }\n}\n\nfunction makeFieldFunctionOptions(\n  policies: Policies,\n  objectOrReference: StoreObject | Reference | undefined,\n  fieldSpec: FieldSpecifier,\n  context: ReadMergeModifyContext,\n  storage: StorageType,\n): FieldFunctionOptions {\n  const storeFieldName = policies.getStoreFieldName(fieldSpec);\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const variables = fieldSpec.variables || context.variables;\n  const { toReference, canRead } = context.store;\n\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName,\n    storeFieldName,\n    variables,\n    isReference,\n    toReference,\n    storage,\n    cache: policies.cache,\n    canRead,\n    readField<T>() {\n      return policies.readField<T>(\n        normalizeReadFieldOptions(arguments, objectOrReference, context),\n        context,\n      );\n    },\n    mergeObjects: makeMergeObjectsFunction(context.store),\n  };\n}\n\nexport function normalizeReadFieldOptions(\n  readFieldArgs: IArguments,\n  objectOrReference: StoreObject | Reference | undefined,\n  variables?: ReadMergeModifyContext[\"variables\"],\n): ReadFieldOptions {\n  const {\n    0: fieldNameOrOptions,\n    1: from,\n    length: argc,\n  } = readFieldArgs;\n\n  let options: ReadFieldOptions;\n\n  if (typeof fieldNameOrOptions === \"string\") {\n    options = {\n      fieldName: fieldNameOrOptions,\n      // Default to objectOrReference only when no second argument was\n      // passed for the from parameter, not when undefined is explicitly\n      // passed as the second argument.\n      from: argc > 1 ? from : objectOrReference,\n    };\n  } else {\n    options = { ...fieldNameOrOptions };\n    // Default to objectOrReference only when fieldNameOrOptions.from is\n    // actually omitted, rather than just undefined.\n    if (!hasOwn.call(options, \"from\")) {\n      options.from = objectOrReference;\n    }\n  }\n\n  if (__DEV__ && options.from === void 0) {\n    invariant.warn(`Undefined 'from' passed to readField with arguments ${\n      stringifyForDisplay(Array.from(readFieldArgs))\n    }`);\n  }\n\n  if (void 0 === options.variables) {\n    options.variables = variables;\n  }\n\n  return options;\n}\n\nfunction makeMergeObjectsFunction(\n  store: NormalizedCache,\n): MergeObjectsFunction {\n  return function mergeObjects(existing, incoming) {\n    if (isArray(existing) || isArray(incoming)) {\n      throw new InvariantError(\"Cannot automatically merge arrays\");\n    }\n\n    // These dynamic checks are necessary because the parameters of a\n    // custom merge function can easily have the any type, so the type\n    // system cannot always enforce the StoreObject | Reference parameter\n    // types of options.mergeObjects.\n    if (isNonNullObject(existing) &&\n        isNonNullObject(incoming)) {\n      const eType = store.getFieldValue(existing, \"__typename\");\n      const iType = store.getFieldValue(incoming, \"__typename\");\n      const typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer) {\n        return incoming;\n      }\n\n      if (isReference(existing) &&\n          storeValueIsStoreObject(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // existing.__ref, preferring/overwriting any fields contributed by the\n        // newer incoming StoreObject.\n        store.merge(existing.__ref, incoming);\n        return existing;\n      }\n\n      if (storeValueIsStoreObject(existing) &&\n          isReference(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // incoming.__ref, taking fields from the older existing object only if\n        // those fields are not already present in the newer StoreObject\n        // identified by incoming.__ref.\n        store.merge(existing, incoming.__ref);\n        return incoming;\n      }\n\n      if (storeValueIsStoreObject(existing) &&\n          storeValueIsStoreObject(incoming)) {\n        return { ...existing, ...incoming };\n      }\n    }\n\n    return incoming;\n  };\n}\n","import { makeUniqueId } from \"./makeUniqueId\";\n\nexport function stringifyForDisplay(value: any): string {\n  const undefId = makeUniqueId(\"stringifyForDisplay\");\n  return JSON.stringify(value, (key, value) => {\n    return value === void 0 ? undefId : value;\n  }).split(JSON.stringify(undefId)).join(\"<undefined>\");\n}\n","import { invariant, InvariantError } from '../../utilities/globals';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport {\n  SelectionSetNode,\n  FieldNode,\n} from 'graphql';\n\nimport {\n  createFragmentMap,\n  FragmentMap,\n  getFragmentFromSelection,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getOperationDefinition,\n  getTypenameFromResult,\n  makeReference,\n  isField,\n  resultKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  Reference,\n  isReference,\n  shouldInclude,\n  cloneDeep,\n  addTypenameToDocument,\n  isNonEmptyArray,\n  argumentsObjectFromField,\n} from '../../utilities';\n\nimport { NormalizedCache, ReadMergeModifyContext, MergeTree } from './types';\nimport { makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject, isArray } from './helpers';\nimport { StoreReader } from './readFromStore';\nimport { InMemoryCache } from './inMemoryCache';\nimport { EntityStore } from './entityStore';\nimport { Cache } from '../../core';\nimport { canonicalStringify } from './object-canon';\nimport { normalizeReadFieldOptions } from './policies';\nimport { ReadFieldFunction } from '../core/types/common';\n\nexport interface WriteContext extends ReadMergeModifyContext {\n  readonly written: {\n    [dataId: string]: SelectionSetNode[];\n  };\n  readonly fragmentMap?: FragmentMap;\n  // General-purpose deep-merge function for use during writes.\n  merge<T>(existing: T, incoming: T): T;\n  // If true, merge functions will be called with undefined existing data.\n  overwrite: boolean;\n  incomingById: Map<string, {\n    storeObject: StoreObject;\n    mergeTree?: MergeTree;\n    fieldNodeSet: Set<FieldNode>;\n  }>;\n  // Directive metadata for @client and @defer. We could use a bitfield for this\n  // information to save some space, and use that bitfield number as the keys in\n  // the context.flavors Map.\n  clientOnly: boolean;\n  deferred: boolean;\n  flavors: Map<string, FlavorableWriteContext>;\n};\n\ntype FlavorableWriteContext = Pick<\n  WriteContext,\n  | \"clientOnly\"\n  | \"deferred\"\n  | \"flavors\"\n>;\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor<TContext extends FlavorableWriteContext>(\n  context: TContext,\n  clientOnly: TContext[\"clientOnly\"],\n  deferred: TContext[\"deferred\"],\n): TContext {\n  const key = `${clientOnly}${deferred}`;\n  let flavored = context.flavors.get(key);\n  if (!flavored) {\n    context.flavors.set(key, flavored = (\n      context.clientOnly === clientOnly &&\n      context.deferred === deferred\n    ) ? context : {\n      ...context,\n      clientOnly,\n      deferred,\n    });\n  }\n  return flavored as TContext;\n}\n\ninterface ProcessSelectionSetOptions {\n  dataId?: string,\n  result: Record<string, any>;\n  selectionSet: SelectionSetNode;\n  context: WriteContext;\n  mergeTree: MergeTree;\n}\n\nexport class StoreWriter {\n  constructor(\n    public readonly cache: InMemoryCache,\n    private reader?: StoreReader,\n  ) {}\n\n  public writeToStore(store: NormalizedCache, {\n    query,\n    result,\n    dataId,\n    variables,\n    overwrite,\n  }: Cache.WriteOptions): Reference | undefined {\n    const operationDefinition = getOperationDefinition(query)!;\n    const merger = makeProcessedFieldsMerger();\n\n    variables = {\n      ...getDefaultValues(operationDefinition),\n      ...variables!,\n    };\n\n    const context: WriteContext = {\n      store,\n      written: Object.create(null),\n      merge<T>(existing: T, incoming: T) {\n        return merger.merge(existing, incoming) as T;\n      },\n      variables,\n      varString: canonicalStringify(variables),\n      fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      overwrite: !!overwrite,\n      incomingById: new Map,\n      clientOnly: false,\n      deferred: false,\n      flavors: new Map,\n    };\n\n    const ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: { map: new Map },\n      context,\n    });\n\n    if (!isReference(ref)) {\n      throw new InvariantError(`Could not identify object ${JSON.stringify(result)}`);\n    }\n\n    // So far, the store has not been modified, so now it's time to process\n    // context.incomingById and merge those incoming fields into context.store.\n    context.incomingById.forEach(({ storeObject, mergeTree, fieldNodeSet }, dataId) => {\n      const entityRef = makeReference(dataId);\n\n      if (mergeTree && mergeTree.map.size) {\n        const applied = this.applyMerges(mergeTree, entityRef, storeObject, context);\n        if (isReference(applied)) {\n          // Assume References returned by applyMerges have already been merged\n          // into the store. See makeMergeObjectsFunction in policies.ts for an\n          // example of how this can happen.\n          return;\n        }\n        // Otherwise, applyMerges returned a StoreObject, whose fields we should\n        // merge into the store (see store.merge statement below).\n        storeObject = applied;\n      }\n\n      if (__DEV__ && !context.overwrite) {\n        const fieldsWithSelectionSets: Record<string, true> = Object.create(null);\n        fieldNodeSet.forEach(field => {\n          if (field.selectionSet) {\n            fieldsWithSelectionSets[field.name.value] = true;\n          }\n        });\n\n        const hasSelectionSet = (storeFieldName: string) =>\n          fieldsWithSelectionSets[\n            fieldNameFromStoreName(storeFieldName)\n          ] === true;\n\n        const hasMergeFunction = (storeFieldName: string) => {\n          const childTree = mergeTree && mergeTree.map.get(storeFieldName);\n          return Boolean(childTree && childTree.info && childTree.info.merge);\n        };\n\n        Object.keys(storeObject).forEach(storeFieldName => {\n          // If a merge function was defined for this field, trust that it\n          // did the right thing about (not) clobbering data. If the field\n          // has no selection set, it's a scalar field, so it doesn't need\n          // a merge function (even if it's an object, like JSON data).\n          if (hasSelectionSet(storeFieldName) &&\n              !hasMergeFunction(storeFieldName)) {\n            warnAboutDataLoss(\n              entityRef,\n              storeObject,\n              storeFieldName,\n              context.store,\n            );\n          }\n        });\n      }\n\n      store.merge(dataId, storeObject);\n    });\n\n    // Any IDs written explicitly to the cache will be retained as\n    // reachable root IDs for garbage collection purposes. Although this\n    // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n    // retainment counts are effectively ignored because cache.gc() always\n    // includes them in its root ID set.\n    store.retain(ref.__ref);\n\n    return ref;\n  }\n\n  private processSelectionSet({\n    dataId,\n    result,\n    selectionSet,\n    context,\n    // This object allows processSelectionSet to report useful information\n    // to its callers without explicitly returning that information.\n    mergeTree,\n  }: ProcessSelectionSetOptions): StoreObject | Reference {\n    const { policies } = this.cache;\n\n    // This variable will be repeatedly updated using context.merge to\n    // accumulate all fields that need to be written into the store.\n    let incoming: StoreObject = Object.create(null);\n\n    // If typename was not passed in, infer it. Note that typename is\n    // always passed in for tricky-to-infer cases such as \"Query\" for\n    // ROOT_QUERY.\n    const typename: string | undefined =\n      (dataId && policies.rootTypenamesById[dataId]) ||\n      getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n      (dataId && context.store.get(dataId, \"__typename\") as string);\n\n    if (\"string\" === typeof typename) {\n      incoming.__typename = typename;\n    }\n\n    // This readField function will be passed as context.readField in the\n    // KeyFieldsContext object created within policies.identify (called below).\n    // In addition to reading from the existing context.store (thanks to the\n    // policies.readField(options, context) line at the very bottom), this\n    // version of readField can read from Reference objects that are currently\n    // pending in context.incomingById, which is important whenever keyFields\n    // need to be extracted from a child object that processSelectionSet has\n    // turned into a Reference.\n    const readField: ReadFieldFunction = function (this: void) {\n      const options = normalizeReadFieldOptions(\n        arguments,\n        incoming,\n        context.variables,\n      );\n\n      if (isReference(options.from)) {\n        const info = context.incomingById.get(options.from.__ref);\n        if (info) {\n          const result = policies.readField({\n            ...options,\n            from: info.storeObject\n          }, context);\n\n          if (result !== void 0) {\n            return result;\n          }\n        }\n      }\n\n      return policies.readField(options, context);\n    };\n\n    const fieldNodeSet = new Set<FieldNode>();\n\n    this.flattenFields(\n      selectionSet,\n      result,\n      // This WriteContext will be the default context value for fields returned\n      // by the flattenFields method, but some fields may be assigned a modified\n      // context, depending on the presence of @client and other directives.\n      context,\n      typename,\n    ).forEach((context, field) => {\n      const resultFieldKey = resultKeyNameFromField(field);\n      const value = result[resultFieldKey];\n\n      fieldNodeSet.add(field);\n\n      if (value !== void 0) {\n        const storeFieldName = policies.getStoreFieldName({\n          typename,\n          fieldName: field.name.value,\n          field,\n          variables: context.variables,\n        });\n\n        const childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n        let incomingValue = this.processFieldValue(\n          value,\n          field,\n          // Reset context.clientOnly and context.deferred to their default\n          // values before processing nested selection sets.\n          field.selectionSet\n            ? getContextFlavor(context, false, false)\n            : context,\n          childTree,\n        );\n\n        // To determine if this field holds a child object with a merge function\n        // defined in its type policy (see PR #7070), we need to figure out the\n        // child object's __typename.\n        let childTypename: string | undefined;\n\n        // The field's value can be an object that has a __typename only if the\n        // field has a selection set. Otherwise incomingValue is scalar.\n        if (field.selectionSet &&\n            (isReference(incomingValue) ||\n             storeValueIsStoreObject(incomingValue))) {\n          childTypename = readField<string>(\"__typename\", incomingValue);\n        }\n\n        const merge = policies.getMergeFunction(\n          typename,\n          field.name.value,\n          childTypename,\n        );\n\n        if (merge) {\n          childTree.info = {\n            // TODO Check compatibility against any existing childTree.field?\n            field,\n            typename,\n            merge,\n          };\n        } else {\n          maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n        }\n\n        incoming = context.merge(incoming, {\n          [storeFieldName]: incomingValue,\n        });\n\n      } else if (\n        __DEV__ &&\n        !context.clientOnly &&\n        !context.deferred &&\n        !addTypenameToDocument.added(field) &&\n        // If the field has a read function, it may be a synthetic field or\n        // provide a default value, so its absence from the written data should\n        // not be cause for alarm.\n        !policies.getReadFunction(typename, field.name.value)\n      ) {\n        invariant.error(`Missing field '${\n          resultKeyNameFromField(field)\n        }' while writing result ${\n          JSON.stringify(result, null, 2)\n        }`.substring(0, 1000));\n      }\n    });\n\n    // Identify the result object, even if dataId was already provided,\n    // since we always need keyObject below.\n    try {\n      const [id, keyObject] = policies.identify(result, {\n        typename,\n        selectionSet,\n        fragmentMap: context.fragmentMap,\n        storeObject: incoming,\n        readField,\n      });\n\n      // If dataId was not provided, fall back to the id just generated by\n      // policies.identify.\n      dataId = dataId || id;\n\n      // Write any key fields that were used during identification, even if\n      // they were not mentioned in the original query.\n      if (keyObject) {\n        // TODO Reverse the order of the arguments?\n        incoming = context.merge(incoming, keyObject);\n      }\n    } catch (e) {\n      // If dataId was provided, tolerate failure of policies.identify.\n      if (!dataId) throw e;\n    }\n\n    if (\"string\" === typeof dataId) {\n      const dataRef = makeReference(dataId);\n\n      // Avoid processing the same entity object using the same selection\n      // set more than once. We use an array instead of a Set since most\n      // entity IDs will be written using only one selection set, so the\n      // size of this array is likely to be very small, meaning indexOf is\n      // likely to be faster than Set.prototype.has.\n      const sets = context.written[dataId] || (context.written[dataId] = []);\n      if (sets.indexOf(selectionSet) >= 0) return dataRef;\n      sets.push(selectionSet);\n\n      // If we're about to write a result object into the store, but we\n      // happen to know that the exact same (===) result object would be\n      // returned if we were to reread the result with the same inputs,\n      // then we can skip the rest of the processSelectionSet work for\n      // this object, and immediately return a Reference to it.\n      if (this.reader && this.reader.isFresh(\n        result,\n        dataRef,\n        selectionSet,\n        context,\n      )) {\n        return dataRef;\n      }\n\n      const previous = context.incomingById.get(dataId);\n      if (previous) {\n        previous.storeObject = context.merge(previous.storeObject, incoming);\n        previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n        fieldNodeSet.forEach(field => previous.fieldNodeSet.add(field));\n      } else {\n        context.incomingById.set(dataId, {\n          storeObject: incoming,\n          // Save a reference to mergeTree only if it is not empty, because\n          // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n          // reused for entirely different parts of the result tree.\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          fieldNodeSet,\n        });\n      }\n\n      return dataRef;\n    }\n\n    return incoming;\n  }\n\n  private processFieldValue(\n    value: any,\n    field: FieldNode,\n    context: WriteContext,\n    mergeTree: MergeTree,\n  ): StoreValue {\n    if (!field.selectionSet || value === null) {\n      // In development, we need to clone scalar values so that they can be\n      // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n      // it's cheaper to store the scalar values directly in the cache.\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n\n    if (isArray(value)) {\n      return value.map((item, i) => {\n        const value = this.processFieldValue(\n          item, field, context, getChildMergeTree(mergeTree, i));\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context,\n      mergeTree,\n    });\n  }\n\n  // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n  // some additions for tracking @client and @defer directives.\n  private flattenFields<TContext extends Pick<\n    WriteContext,\n    | \"clientOnly\"\n    | \"deferred\"\n    | \"flavors\"\n    | \"fragmentMap\"\n    | \"variables\"\n  >>(\n    selectionSet: SelectionSetNode,\n    result: Record<string, any>,\n    context: TContext,\n    typename = getTypenameFromResult(result, selectionSet, context.fragmentMap),\n  ): Map<FieldNode, TContext> {\n    const fieldMap = new Map<FieldNode, TContext>();\n    const { policies } = this.cache;\n\n    const limitingTrie = new Trie<{\n      // Tracks whether (selectionSet, clientOnly, deferred) has been flattened\n      // before. The GraphQL specification only uses the fragment name for\n      // skipping previously visited fragments, but the top-level fragment\n      // selection set corresponds 1:1 with the fagment name (and is slightly\n      // easier too work with), and we need to consider clientOnly and deferred\n      // values as well, potentially revisiting selection sets that were\n      // previously visited with different inherited configurations of those\n      // directives.\n      visited?: boolean;\n    }>(false); // No need for WeakMap, since limitingTrie does not escape.\n\n    (function flatten(\n      this: void,\n      selectionSet: SelectionSetNode,\n      inheritedContext: TContext,\n    ) {\n      const visitedNode = limitingTrie.lookup(\n        selectionSet,\n        // Because we take inheritedClientOnly and inheritedDeferred into\n        // consideration here (in addition to selectionSet), it's possible for\n        // the same selection set to be flattened more than once, if it appears\n        // in the query with different @client and/or @directive configurations.\n        inheritedContext.clientOnly,\n        inheritedContext.deferred,\n      );\n      if (visitedNode.visited) return;\n      visitedNode.visited = true;\n\n      selectionSet.selections.forEach(selection => {\n        if (!shouldInclude(selection, context.variables)) return;\n\n        let { clientOnly, deferred } = inheritedContext;\n        if (\n          // Since the presence of @client or @defer on this field can only\n          // cause clientOnly or deferred to become true, we can skip the\n          // forEach loop if both clientOnly and deferred are already true.\n          !(clientOnly && deferred) &&\n          isNonEmptyArray(selection.directives)\n        ) {\n          selection.directives.forEach(dir => {\n            const name = dir.name.value;\n            if (name === \"client\") clientOnly = true;\n            if (name === \"defer\") {\n              const args = argumentsObjectFromField(dir, context.variables);\n              // The @defer directive takes an optional args.if boolean\n              // argument, similar to @include(if: boolean). Note that\n              // @defer(if: false) does not make context.deferred false, but\n              // instead behaves as if there was no @defer directive.\n              if (!args || (args as { if?: boolean }).if !== false) {\n                deferred = true;\n              }\n              // TODO In the future, we may want to record args.label using\n              // context.deferred, if a label is specified.\n            }\n          });\n        }\n\n        if (isField(selection)) {\n          const existing = fieldMap.get(selection);\n          if (existing) {\n            // If this field has been visited along another recursive path\n            // before, the final context should have clientOnly or deferred set\n            // to true only if *all* paths have the directive (hence the &&).\n            clientOnly = clientOnly && existing.clientOnly;\n            deferred = deferred && existing.deferred;\n          }\n\n          fieldMap.set(\n            selection,\n            getContextFlavor(context, clientOnly, deferred),\n          );\n\n        } else {\n          const fragment =\n            getFragmentFromSelection(selection, context.fragmentMap);\n\n          if (fragment &&\n              policies.fragmentMatches(\n                fragment, typename, result, context.variables)) {\n\n            flatten(\n              fragment.selectionSet,\n              getContextFlavor(context, clientOnly, deferred),\n            );\n          }\n        }\n      });\n    })(selectionSet, context);\n\n    return fieldMap;\n  }\n\n  private applyMerges<T extends StoreValue>(\n    mergeTree: MergeTree,\n    existing: StoreValue,\n    incoming: T,\n    context: WriteContext,\n    getStorageArgs?: Parameters<EntityStore[\"getStorage\"]>,\n  ): T | Reference {\n    if (mergeTree.map.size && !isReference(incoming)) {\n      const e: StoreObject | Reference | undefined = (\n        // Items in the same position in different arrays are not\n        // necessarily related to each other, so when incoming is an array\n        // we process its elements as if there was no existing data.\n        !isArray(incoming) &&\n        // Likewise, existing must be either a Reference or a StoreObject\n        // in order for its fields to be safe to merge with the fields of\n        // the incoming object.\n        (isReference(existing) || storeValueIsStoreObject(existing))\n      ) ? existing : void 0;\n\n      // This narrowing is implied by mergeTree.map.size > 0 and\n      // !isReference(incoming), though TypeScript understandably cannot\n      // hope to infer this type.\n      const i = incoming as StoreObject | StoreValue[];\n\n      // The options.storage objects provided to read and merge functions\n      // are derived from the identity of the parent object plus a\n      // sequence of storeFieldName strings/numbers identifying the nested\n      // field name path of each field value to be merged.\n      if (e && !getStorageArgs) {\n        getStorageArgs = [isReference(e) ? e.__ref : e];\n      }\n\n      // It's possible that applying merge functions to this subtree will\n      // not change the incoming data, so this variable tracks the fields\n      // that did change, so we can create a new incoming object when (and\n      // only when) at least one incoming field has changed. We use a Map\n      // to preserve the type of numeric keys.\n      let changedFields: Map<string | number, StoreValue> | undefined;\n\n      const getValue = (\n        from: typeof e | typeof i,\n        name: string | number,\n      ): StoreValue => {\n        return isArray(from)\n          ? (typeof name === \"number\" ? from[name] : void 0)\n          : context.store.getFieldValue(from, String(name))\n      };\n\n      mergeTree.map.forEach((childTree, storeFieldName) => {\n        const eVal = getValue(e, storeFieldName);\n        const iVal = getValue(i, storeFieldName);\n        // If we have no incoming data, leave any existing data untouched.\n        if (void 0 === iVal) return;\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n        const aVal = this.applyMerges(\n          childTree,\n          eVal,\n          iVal,\n          context,\n          getStorageArgs,\n        );\n        if (aVal !== iVal) {\n          changedFields = changedFields || new Map;\n          changedFields.set(storeFieldName, aVal);\n        }\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields) {\n        // Shallow clone i so we can add changed fields to it.\n        incoming = (isArray(i) ? i.slice(0) : { ...i }) as T;\n        changedFields.forEach((value, name) => {\n          (incoming as any)[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(\n        existing,\n        incoming,\n        mergeTree.info,\n        context,\n        getStorageArgs && context.store.getStorage(...getStorageArgs),\n      );\n    }\n\n    return incoming;\n  }\n}\n\nconst emptyMergeTreePool: MergeTree[] = [];\n\nfunction getChildMergeTree(\n  { map }: MergeTree,\n  name: string | number,\n): MergeTree {\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || { map: new Map });\n  }\n  return map.get(name)!;\n}\n\nfunction mergeMergeTrees(\n  left: MergeTree | undefined,\n  right: MergeTree | undefined,\n): MergeTree {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left!;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n\n  const info = left.info && right.info ? {\n    ...left.info,\n    ...right.info,\n  } : left.info || right.info;\n\n  const needToMergeMaps = left.map.size && right.map.size;\n  const map = needToMergeMaps ? new Map :\n    left.map.size ? left.map : right.map;\n\n  const merged = { info, map };\n\n  if (needToMergeMaps) {\n    const remainingRightKeys = new Set(right.map.keys());\n\n    left.map.forEach((leftTree, key) => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(leftTree, right.map.get(key)),\n      );\n      remainingRightKeys.delete(key);\n    });\n\n    remainingRightKeys.forEach(key => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(\n          right.map.get(key),\n          left.map.get(key),\n        ),\n      );\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree: MergeTree | undefined): boolean {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree(\n  { map }: MergeTree,\n  name: string | number,\n) {\n  const childTree = map.get(name);\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nconst warnings = new Set<string>();\n\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(\n  existingRef: Reference,\n  incomingObj: StoreObject,\n  storeFieldName: string,\n  store: NormalizedCache,\n) {\n  const getChild = (objOrRef: StoreObject | Reference): StoreObject | false => {\n    const child = store.getFieldValue<StoreObject>(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  const existing = getChild(existingRef);\n  if (!existing) return;\n\n  const incoming = getChild(incomingObj);\n  if (!incoming) return;\n\n  // It's always safe to replace a reference, since it refers to data\n  // safely stored elsewhere.\n  if (isReference(existing)) return;\n\n  // If the values are structurally equivalent, we do not need to worry\n  // about incoming replacing existing.\n  if (equal(existing, incoming)) return;\n\n  // If we're replacing every key of the existing object, then the\n  // existing data would be overwritten even if the objects were\n  // normalized, so warning would not be helpful here.\n  if (Object.keys(existing).every(\n    key => store.getFieldValue(incoming, key) !== void 0)) {\n    return;\n  }\n\n  const parentType =\n    store.getFieldValue<string>(existingRef, \"__typename\") ||\n    store.getFieldValue<string>(incomingObj, \"__typename\");\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const typeDotName = `${parentType}.${fieldName}`;\n  // Avoid warning more than once for the same type and field name.\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n\n  const childTypenames: string[] = [];\n  // Arrays do not have __typename fields, and always need a custom merge\n  // function, even if their elements are normalized entities.\n  if (!isArray(existing) &&\n      !isArray(incoming)) {\n    [existing, incoming].forEach(child => {\n      const typename = store.getFieldValue(child, \"__typename\");\n      if (typeof typename === \"string\" &&\n          !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  invariant.warn(\n`Cache data may be lost when replacing the ${fieldName} field of a ${parentType} object.\n\nTo address this problem (which is not a bug in Apollo Client), ${\n  childTypenames.length\n    ? \"either ensure all objects of type \" +\n        childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \"\n    : \"\"\n}define a custom merge function for the ${\n  typeDotName\n} field, so InMemoryCache can safely merge these objects:\n\n  existing: ${JSON.stringify(existing).slice(0, 1000)}\n  incoming: ${JSON.stringify(incoming).slice(0, 1000)}\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n`);\n}\n","import { invariant } from '../../utilities/globals';\n\n// Make builtins like Map and Set safe to use with non-extensible objects.\nimport './fixPolyfills';\n\nimport { DocumentNode } from 'graphql';\nimport { OptimisticWrapperFunction, wrap } from 'optimism';\nimport { equal } from '@wry/equality';\n\nimport { ApolloCache } from '../core/cache';\nimport { Cache } from '../core/types/Cache';\nimport { MissingFieldError } from '../core/types/common';\nimport {\n  addTypenameToDocument,\n  StoreObject,\n  Reference,\n  isReference,\n} from '../../utilities';\nimport { InMemoryCacheConfig, NormalizedCacheObject } from './types';\nimport { StoreReader } from './readFromStore';\nimport { StoreWriter } from './writeToStore';\nimport { EntityStore, supportsResultCaching } from './entityStore';\nimport { makeVar, forgetCache, recallCache } from './reactiveVars';\nimport { Policies } from './policies';\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from './helpers';\nimport { canonicalStringify } from './object-canon';\n\ntype BroadcastOptions = Pick<\n  Cache.BatchOptions<InMemoryCache>,\n  | \"optimistic\"\n  | \"onWatchUpdated\"\n>\n\nexport class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\n  private data: EntityStore;\n  private optimisticData: EntityStore;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions>();\n  private addTypename: boolean;\n\n  private typenameDocumentCache = new Map<DocumentNode, DocumentNode>();\n  private storeReader: StoreReader;\n  private storeWriter: StoreWriter;\n\n  private maybeBroadcastWatch: OptimisticWrapperFunction<\n    [Cache.WatchOptions, BroadcastOptions?],\n    any,\n    [Cache.WatchOptions]>;\n\n  // Dynamically imported code can augment existing typePolicies or\n  // possibleTypes by calling cache.policies.addTypePolicies or\n  // cache.policies.addPossibletypes.\n  public readonly policies: Policies;\n\n  public readonly makeVar = makeVar;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = normalizeConfig(config);\n    this.addTypename = !!this.config.addTypename;\n\n    this.policies = new Policies({\n      cache: this,\n      dataIdFromObject: this.config.dataIdFromObject,\n      possibleTypes: this.config.possibleTypes,\n      typePolicies: this.config.typePolicies,\n    });\n\n    this.init();\n  }\n\n  private init() {\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    const rootStore = this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching,\n    });\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of EntityStore Layer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = rootStore.stump;\n\n    this.resetResultCache();\n  }\n\n  private resetResultCache(resetResultIdentities?: boolean) {\n    const previousReader = this.storeReader;\n\n    // The StoreWriter is mostly stateless and so doesn't really need to be\n    // reset, but it does need to have its writer.storeReader reference updated,\n    // so it's simpler to update this.storeWriter as well.\n    this.storeWriter = new StoreWriter(\n      this,\n      this.storeReader = new StoreReader({\n        cache: this,\n        addTypename: this.addTypename,\n        resultCacheMaxSize: this.config.resultCacheMaxSize,\n        canonizeResults: shouldCanonizeResults(this.config),\n        canon: resetResultIdentities\n          ? void 0\n          : previousReader && previousReader.canon,\n      }),\n    );\n\n    this.maybeBroadcastWatch = wrap((\n      c: Cache.WatchOptions,\n      options?: BroadcastOptions,\n    ) => {\n      return this.broadcastWatch(c, options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: (c: Cache.WatchOptions) => {\n        // Return a cache key (thus enabling result caching) only if we're\n        // currently using a data store that can track cache dependencies.\n        const store = c.optimistic ? this.optimisticData : this.data;\n        if (supportsResultCaching(store)) {\n          const { optimistic, rootId, variables } = c;\n          return store.makeCacheKey(\n            c.query,\n            // Different watches can have the same query, optimistic\n            // status, rootId, and variables, but if their callbacks are\n            // different, the (identical) result needs to be delivered to\n            // each distinct callback. The easiest way to achieve that\n            // separation is to include c.callback in the cache key for\n            // maybeBroadcastWatch calls. See issue #5733.\n            c.callback,\n            canonicalStringify({ optimistic, rootId, variables }),\n          );\n        }\n      }\n    });\n\n    // Since we have thrown away all the cached functions that depend on the\n    // CacheGroup dependencies maintained by EntityStore, we should also reset\n    // all CacheGroup dependency information.\n    new Set([\n      this.data.group,\n      this.optimisticData.group,\n    ]).forEach(group => group.resetCaching());\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    this.init();\n    // Since calling this.init() discards/replaces the entire StoreReader, along\n    // with the result caches it maintains, this.data.replace(data) won't have\n    // to bother deleting the old data.\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).extract();\n  }\n\n  public read<T>(options: Cache.ReadOptions): T | null {\n    const {\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = false,\n    } = options;\n    try {\n      return this.storeReader.diffQueryAgainstStore<T>({\n        ...options,\n        store: options.optimistic ? this.optimisticData : this.data,\n        config: this.config,\n        returnPartialData,\n      }).result || null;\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        // Swallow MissingFieldError and return null, so callers do not\n        // need to worry about catching \"normal\" exceptions resulting from\n        // incomplete cache data. Unexpected errors will be re-thrown. If\n        // you need more information about which fields were missing, use\n        // cache.diff instead, and examine diffResult.missing.\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  public write(options: Cache.WriteOptions): Reference | undefined {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    const store = options.optimistic // Defaults to false.\n      ? this.optimisticData\n      : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public diff<TData, TVariables = any>(\n    options: Cache.DiffOptions<TData, TVariables>,\n  ): Cache.DiffResult<TData> {\n    return this.storeReader.diffQueryAgainstStore({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config,\n    });\n  }\n\n  public watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>,\n  ): () => void {\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return () => {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (this.watches.delete(watch) && !this.watches.size) {\n        forgetCache(this);\n      }\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      this.maybeBroadcastWatch.forget(watch);\n    };\n  }\n\n  public gc(options?: {\n    // If true, also free non-essential result cache memory by bulk-releasing\n    // this.{store{Reader,Writer},maybeBroadcastWatch}. Defaults to false.\n    resetResultCache?: boolean;\n    // If resetResultCache is true, this.storeReader.canon will be preserved by\n    // default, but can also be discarded by passing resetResultIdentities:true.\n    // Defaults to false.\n    resetResultIdentities?: boolean;\n  }) {\n    canonicalStringify.reset();\n    const ids = this.optimisticData.gc();\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n    return ids;\n  }\n\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  public retain(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  }\n\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  public release(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  }\n\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  public identify(object: StoreObject | Reference): string | undefined {\n    if (isReference(object)) return object.__ref;\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      invariant.warn(e);\n    }\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = { ...options, id: \"ROOT_QUERY\" };\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      // Pass this.data as a limit on the depth of the eviction, so evictions\n      // during optimistic updates (when this.data is temporarily set equal to\n      // this.optimisticData) do not escape their optimistic Layer.\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public reset(options?: Cache.ResetOptions): Promise<void> {\n    this.init();\n\n    canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      // Similar to what happens in the unsubscribe function returned by\n      // cache.watch, applied to all current watches.\n      this.watches.forEach(watch => this.maybeBroadcastWatch.forget(watch));\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n      // this.broadcastWatches() triggers a broadcast to every current watcher\n      // (letting them know their data is now missing). This default behavior is\n      // convenient because it means the watches do not have to be manually\n      // reestablished after resetting the cache. To prevent this broadcast and\n      // cancel all watches, pass true for options.discardWatches.\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  }\n\n  private txCount = 0;\n\n  public batch<TUpdateResult>(\n    options: Cache.BatchOptions<InMemoryCache, TUpdateResult>,\n  ): TUpdateResult {\n    const {\n      update,\n      optimistic = true,\n      removeOptimistic,\n      onWatchUpdated,\n    } = options;\n\n    let updateResult: TUpdateResult;\n    const perform = (layer?: EntityStore): TUpdateResult => {\n      const { data, optimisticData } = this;\n      ++this.txCount;\n      if (layer) {\n        this.data = this.optimisticData = layer;\n      }\n      try {\n        return updateResult = update(this);\n      } finally {\n        --this.txCount;\n        this.data = data;\n        this.optimisticData = optimisticData;\n      }\n    };\n\n    const alreadyDirty = new Set<Cache.WatchOptions>();\n\n    if (onWatchUpdated && !this.txCount) {\n      // If an options.onWatchUpdated callback is provided, we want to call it\n      // with only the Cache.WatchOptions objects affected by options.update,\n      // but there might be dirty watchers already waiting to be broadcast that\n      // have nothing to do with the update. To prevent including those watchers\n      // in the post-update broadcast, we perform this initial broadcast to\n      // collect the dirty watchers, so we can re-dirty them later, after the\n      // post-update broadcast, allowing them to receive their pending\n      // broadcasts the next time broadcastWatches is called, just as they would\n      // if we never called cache.batch.\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch) {\n          alreadyDirty.add(watch);\n          return false;\n        },\n      });\n    }\n\n    if (typeof optimistic === 'string') {\n      // Note that there can be multiple layers with the same optimistic ID.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the update. Note that\n      // this.data could be a Layer if we are currently executing an optimistic\n      // update function, but otherwise will always be an EntityStore.Root\n      // instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and run\n      // the update with broadcast batching.\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n    // takes the else branch and calls this.broadcastWatches(options), which\n    // does nothing when this.txCount > 0.\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch, diff) {\n          const result = onWatchUpdated.call(this, watch, diff);\n          if (result !== false) {\n            // Since onWatchUpdated did not return false, this diff is\n            // about to be broadcast to watch.callback, so we don't need\n            // to re-dirty it with the other alreadyDirty watches below.\n            alreadyDirty.delete(watch);\n          }\n          return result;\n        }\n      });\n      // Silently re-dirty any watches that were already dirty before the update\n      // was performed, and were not broadcast just now.\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach(watch => this.maybeBroadcastWatch.dirty(watch));\n      }\n    } else {\n      // If alreadyDirty is empty or we don't have an onWatchUpdated\n      // function, we don't need to go to the trouble of wrapping\n      // options.onWatchUpdated.\n      this.broadcastWatches(options);\n    }\n\n    return updateResult!;\n  }\n\n  public performTransaction(\n    update: (cache: InMemoryCache) => any,\n    optimisticId?: string | null,\n  ) {\n    return this.batch({\n      update,\n      optimistic: optimisticId || (optimisticId !== null),\n    });\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    if (this.addTypename) {\n      let result = this.typenameDocumentCache.get(document);\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        // If someone calls transformDocument and then mistakenly passes the\n        // result back into an API that also calls transformDocument, make sure\n        // we don't keep creating new query documents.\n        this.typenameDocumentCache.set(result, result);\n      }\n      return result;\n    }\n    return document;\n  }\n\n  protected broadcastWatches(options?: BroadcastOptions) {\n    if (!this.txCount) {\n      this.watches.forEach(c => this.maybeBroadcastWatch(c, options));\n    }\n  }\n\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  private broadcastWatch(\n    c: Cache.WatchOptions,\n    options?: BroadcastOptions,\n  ) {\n    const { lastDiff } = c;\n\n    // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n    // currently requires no additional properties, so we can use c (a\n    // WatchOptions object) as DiffOptions, without having to allocate a new\n    // object, and without having to enumerate the relevant properties (query,\n    // variables, etc.) explicitly. There will be some additional properties\n    // (lastDiff, callback, etc.), but cache.diff ignores them.\n    const diff = this.diff<any>(c);\n\n    if (options) {\n      if (c.optimistic &&\n          typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (options.onWatchUpdated &&\n          options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n        // Returning false from the onWatchUpdated callback will prevent\n        // calling c.callback(diff) for this watcher.\n        return;\n      }\n    }\n\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback(c.lastDiff = diff, lastDiff);\n    }\n  }\n}\n","import { ApolloClient, InMemoryCache, makeVar } from '@apollo/client';\nimport { UserReposQuery } from './generated/graphql';\n\nconst client = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  cache: new InMemoryCache(),\n  headers: {\n    Authorization: `Bearer ${process.env.REACT_APP_GITHUB_TOKEN}`,\n  },\n});\n\nexport const usernameVar = makeVar('');\nexport const userVar = makeVar<UserReposQuery['user'] | null>(null);\n\nexport default client;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorArgs` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedArgs(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","/**\n * The set of allowed directive location values.\n */\nexport let DirectiveLocation;\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport let TokenKind;\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, undefined, source, [\n    position,\n  ]);\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    var _this$_options;\n\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (\n      ((_this$_options = this._options) === null || _this$_options === void 0\n        ? void 0\n        : _this$_options.allowLegacyFragmentVariables) === true\n    ) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    var _this$_options2;\n\n    if (\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0\n        ? void 0\n        : _this$_options2.noLocation) !== true\n    ) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","import { parse } from 'graphql';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  Location,\n} from 'graphql/language/ast';\n\n// A map docString -> graphql document\nconst docCache = new Map<string, DocumentNode>();\n\n// A map fragmentName -> [normalized source]\nconst fragmentSourceMap = new Map<string, Set<string>>();\n\nlet printFragmentWarnings = true;\nlet experimentalFragmentVariables = false;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string: string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\nfunction cacheKeyFromLoc(loc: Location) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nfunction processFragments(ast: DocumentNode) {\n  const seenKeys = new Set<string>();\n  const definitions: DefinitionNode[] = [];\n\n  ast.definitions.forEach(fragmentDefinition => {\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc!);\n\n      // We know something about this fragment\n      let sourceKeySet = fragmentSourceMap.get(fragmentName)!;\n      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n      } else if (!sourceKeySet) {\n        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n      }\n\n      sourceKeySet.add(sourceKey);\n\n      if (!seenKeys.has(sourceKey)) {\n        seenKeys.add(sourceKey);\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  });\n\n  return {\n    ...ast,\n    definitions,\n  };\n}\n\nfunction stripLoc(doc: DocumentNode) {\n  const workSet = new Set<Record<string, any>>(doc.definitions);\n\n  workSet.forEach(node => {\n    if (node.loc) delete node.loc;\n    Object.keys(node).forEach(key => {\n      const value = node[key];\n      if (value && typeof value === 'object') {\n        workSet.add(value);\n      }\n    });\n  });\n\n  const loc = doc.loc as Record<string, any>;\n  if (loc) {\n    delete loc.startToken;\n    delete loc.endToken;\n  }\n\n  return doc;\n}\n\nfunction parseDocument(source: string) {\n  var cacheKey = normalize(source);\n  if (!docCache.has(cacheKey)) {\n    const parsed = parse(source, {\n      experimentalFragmentVariables,\n      allowLegacyFragmentVariables: experimentalFragmentVariables,\n    } as any);\n    if (!parsed || parsed.kind !== 'Document') {\n      throw new Error('Not a valid GraphQL document.');\n    }\n    docCache.set(\n      cacheKey,\n      // check that all \"new\" fragments inside the documents are consistent with\n      // existing fragments of the same name\n      stripLoc(processFragments(parsed)),\n    );\n  }\n  return docCache.get(cacheKey)!;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nexport function gql(\n  literals: string | readonly string[],\n  ...args: any[]\n) {\n\n  if (typeof literals === 'string') {\n    literals = [literals];\n  }\n\n  let result = literals[0];\n\n  args.forEach((arg, i) => {\n    if (arg && arg.kind === 'Document') {\n      result += arg.loc.source.body;\n    } else {\n      result += arg;\n    }\n    result += literals[i + 1];\n  });\n\n  return parseDocument(result);\n}\n\nexport function resetCaches() {\n  docCache.clear();\n  fragmentSourceMap.clear();\n}\n\nexport function disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nexport function enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nexport function disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\nconst extras = {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n};\n\nexport namespace gql {\n  export const {\n    gql,\n    resetCaches,\n    disableFragmentWarnings,\n    enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables,\n  } = extras;\n}\n\ngql.default = gql;\n\nexport default gql;\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { equal } from '@wry/equality';\nimport { OperationVariables, mergeOptions } from '../../core';\nimport { getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n): QueryResult<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const client = useApolloClient(options?.client);\n  const defaultWatchQueryOptions = client.defaultOptions.watchQuery;\n  verifyDocumentType(query, DocumentType.Query);\n  const [obsQuery, setObsQuery] = useState(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    let obsQuery: ObservableQuery<TData, TVariables> | null = null;\n    if (context.renderPromises) {\n      obsQuery = context.renderPromises.getSSRObservable(watchQueryOptions);\n    }\n\n    if (!obsQuery) {\n      // Is it safe (StrictMode/memory-wise) to call client.watchQuery here?\n      obsQuery = client.watchQuery(watchQueryOptions);\n      if (context.renderPromises) {\n        context.renderPromises.registerSSRObservable(\n          obsQuery,\n          watchQueryOptions,\n        );\n      }\n    }\n\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      obsQuery.getCurrentResult().loading\n    ) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      context.renderPromises.addQueryPromise(\n        {\n          // The only options which seem to actually be used by the\n          // RenderPromises class are query and variables.\n          getOptions: () => createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n          fetchData: () => new Promise<void>((resolve) => {\n            const sub = obsQuery!.subscribe({\n              next(result) {\n                if (!result.loading) {\n                  resolve()\n                  sub.unsubscribe();\n                }\n              },\n              error() {\n                resolve();\n                sub.unsubscribe();\n              },\n              complete() {\n                resolve();\n              },\n            });\n          }),\n        },\n        // This callback never seemed to do anything\n        () => null,\n      );\n    }\n\n    return obsQuery;\n  });\n\n  let [result, setResult] = useState(() => {\n    const result = obsQuery.getCurrentResult();\n    if (!result.loading && options) {\n      if (result.error) {\n        options.onError?.(result.error);\n      } else if (result.data) {\n        options.onCompleted?.(result.data);\n      }\n    }\n\n    return result;\n  });\n\n  const ref = useRef({\n    client,\n    query,\n    options,\n    result,\n    previousData: void 0 as TData | undefined,\n    watchQueryOptions: createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n  });\n\n  // An effect to recreate the obsQuery whenever the client or query changes.\n  // This effect is also responsible for checking and updating the obsQuery\n  // options whenever they change.\n  useEffect(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    let nextResult: ApolloQueryResult<TData> | undefined;\n    if (ref.current.client !== client || !equal(ref.current.query, query)) {\n      const obsQuery = client.watchQuery(watchQueryOptions);\n      setObsQuery(obsQuery);\n      nextResult = obsQuery.getCurrentResult();\n    } else if (!equal(ref.current.watchQueryOptions, watchQueryOptions)) {\n      obsQuery.setOptions(watchQueryOptions).catch(() => {});\n      nextResult = obsQuery.getCurrentResult();\n      ref.current.watchQueryOptions = watchQueryOptions;\n    }\n\n    if (nextResult) {\n      const previousResult = ref.current.result;\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = nextResult);\n      if (!nextResult.loading && options) {\n        if (nextResult.error) {\n          options.onError?.(nextResult.error);\n        } else if (nextResult.data) {\n          options.onCompleted?.(nextResult.data);\n        }\n      }\n    }\n\n    Object.assign(ref.current, { client, query });\n  }, [obsQuery, client, query, options]);\n\n  // An effect to subscribe to the current observable query\n  useEffect(() => {\n    if (context.renderPromises) {\n      return;\n    }\n\n    let subscription = obsQuery.subscribe(onNext, onError);\n    // We use `getCurrentResult()` instead of the callback argument because\n    // the values differ slightly. Specifically, loading results will have\n    // an empty object for data instead of `undefined` for some reason.\n    function onNext() {\n      const previousResult = ref.current.result;\n      const result = obsQuery.getCurrentResult();\n      // Make sure we're not attempting to re-render similar results\n      if (\n        previousResult &&\n        previousResult.loading === result.loading &&\n        previousResult.networkStatus === result.networkStatus &&\n        equal(previousResult.data, result.data)\n      ) {\n        return;\n      }\n\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = result);\n      if (!result.loading) {\n        ref.current.options?.onCompleted?.(result.data);\n      }\n    }\n\n    function onError(error: Error) {\n      const last = obsQuery[\"last\"];\n      subscription.unsubscribe();\n      // Unfortunately, if `lastError` is set in the current\n      // `observableQuery` when the subscription is re-created,\n      // the subscription will immediately receive the error, which will\n      // cause it to terminate again. To avoid this, we first clear\n      // the last error/result from the `observableQuery` before re-starting\n      // the subscription, and restore it afterwards (so the subscription\n      // has a chance to stay open).\n      try {\n        obsQuery.resetLastResults();\n        subscription = obsQuery.subscribe(onNext, onError);\n      } finally {\n        obsQuery[\"last\"] = last;\n      }\n\n      if (!error.hasOwnProperty('graphQLErrors')) {\n        // The error is not a GraphQL error\n        throw error;\n      }\n\n      const previousResult = ref.current.result;\n      if (\n        (previousResult && previousResult.loading) ||\n        !equal(error, previousResult.error)\n      ) {\n        setResult(ref.current.result = {\n          data: previousResult.data,\n          error: error as ApolloError,\n          loading: false,\n          networkStatus: NetworkStatus.error,\n        });\n        ref.current.options?.onError?.(error as ApolloError);\n      }\n    }\n\n    return () => subscription.unsubscribe();\n  }, [obsQuery, context.renderPromises, client.disableNetworkFetches]);\n\n  let partial: boolean | undefined;\n  ({ partial, ...result } = result);\n\n  {\n    // BAD BOY CODE BLOCK WHERE WE PUT SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      partial &&\n      options?.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      obsQuery.options.fetchPolicy !== 'cache-only'\n    ) {\n      result = {\n        ...result,\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      };\n\n      obsQuery.refetch();\n    }\n\n    // TODO: This is a hack to make sure useLazyQuery executions update the\n    // obsevable query options for ssr.\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      result.loading\n    ) {\n      obsQuery.setOptions(createWatchQueryOptions(query, options, defaultWatchQueryOptions)).catch(() => {});\n    }\n\n    // We assign options during rendering as a guard to make sure that\n    // callbacks like onCompleted and onError are not stale.\n    Object.assign(ref.current, { options });\n  }\n\n  if (\n    (context.renderPromises || client.disableNetworkFetches) &&\n    options?.ssr === false\n  ) {\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    result = ref.current.result = {\n      loading: true,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.loading,\n    };\n  } else if (options?.skip || options?.fetchPolicy === 'standby') {\n    // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    result = {\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.ready,\n    };\n  }\n\n  if (result.errors && result.errors.length) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    result = {\n      ...result,\n      error: result.error || new ApolloError({ graphQLErrors: result.errors }),\n    };\n  }\n\n  const obsQueryFields = useMemo(() => ({\n    refetch: obsQuery.refetch.bind(obsQuery),\n    fetchMore: obsQuery.fetchMore.bind(obsQuery),\n    updateQuery: obsQuery.updateQuery.bind(obsQuery),\n    startPolling: obsQuery.startPolling.bind(obsQuery),\n    stopPolling: obsQuery.stopPolling.bind(obsQuery),\n    subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n  }), [obsQuery]);\n\n  return {\n    ...obsQueryFields,\n    variables: createWatchQueryOptions(query, options, defaultWatchQueryOptions).variables,\n    client,\n    called: true,\n    previousData: ref.current.previousData,\n    ...result,\n  };\n}\n\n/**\n * A function to massage options before passing them the ObservableQuery.\n */\nfunction createWatchQueryOptions<TData, TVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = {},\n  defaultOptions?: Partial<WatchQueryOptions<any, any>>\n): WatchQueryOptions<TVariables, TData> {\n  // TODO: For some reason, we pass context, which is the React Apollo Context,\n  // into observable queries, and test for that.\n  // removing hook specific options\n  const {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    ...otherOptions\n  } = options;\n\n  let watchQueryOptions = { query, ...otherOptions };\n  if (defaultOptions) {\n    watchQueryOptions = mergeOptions(defaultOptions, watchQueryOptions);\n  }\n\n  if (skip) {\n    watchQueryOptions.fetchPolicy = 'standby';\n  } else if (\n    watchQueryOptions.context?.renderPromises &&\n    (\n      watchQueryOptions.fetchPolicy === 'network-only' ||\n      watchQueryOptions.fetchPolicy === 'cache-and-network'\n    )\n  ) {\n    // this behavior was added to react-apollo without explanation in this PR\n    // https://github.com/apollographql/react-apollo/pull/1579\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  } else if (!watchQueryOptions.fetchPolicy) {\n    // cache-first is the default policy, but we explicitly assign it here so\n    // the cache policies computed based on options can be cleared\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  }\n\n  if (!watchQueryOptions.variables) {\n    watchQueryOptions.variables = {} as TVariables;\n  }\n\n  return watchQueryOptions;\n}\n","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n","import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport {\n  LazyQueryHookOptions,\n  QueryLazyOptions,\n  QueryTuple,\n} from '../types/types';\nimport { useQuery } from './useQuery';\nimport { OperationVariables } from '../../core';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): QueryTuple<TData, TVariables> {\n  const [execution, setExecution] = useState<{\n    called: boolean,\n    options?: QueryLazyOptions<TVariables>,\n  }>({\n    called: false,\n  });\n\n  let result = useQuery<TData, TVariables>(query, {\n    ...options,\n    ...execution.options,\n    // We don’t set skip to execution.called, because some useQuery SSR code\n    // checks skip for some reason.\n    fetchPolicy: execution.called ? options?.fetchPolicy : 'standby',\n    skip: undefined,\n  });\n\n  if (!execution.called) {\n    result = {\n      ...result,\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      called: false,\n    };\n  }\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = (...args: any) => {\n        setExecution((execution) => ({ ...execution, called: true }));\n        return (method as any)(...args);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  result.error = result.error || void 0;\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    QueryTuple<TData, TVariables>[0]\n  >((executeOptions?: QueryLazyOptions<TVariables>) => {\n    setExecution({ called: true, options: executeOptions });\n    const promise = result.refetch(executeOptions?.variables).then((result1) => {\n      const result2 = {\n        ...result,\n        data: result1.data,\n        error: result1.error,\n        called: true,\n        loading: false,\n      };\n\n      Object.assign(result2, eagerMethods);\n      return result2;\n    });\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** A (potentially binary) string encoded using base64. */\n  Base64String: any;\n  /** An ISO-8601 encoded date string. */\n  Date: any;\n  /** An ISO-8601 encoded UTC date string. */\n  DateTime: any;\n  /** A Git object ID. */\n  GitObjectID: any;\n  /** Git SSH string */\n  GitSSHRemote: any;\n  /** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */\n  GitTimestamp: any;\n  /** A string containing HTML code. */\n  HTML: any;\n  /** An ISO-8601 encoded UTC date string with millisecond precision. */\n  PreciseDateTime: any;\n  /** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */\n  URI: string;\n  /** A valid x509 certificate string */\n  X509Certificate: any;\n};\n\n/** Autogenerated input type of AbortQueuedMigrations */\nexport type AbortQueuedMigrationsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the organization that is running the migrations. */\n  ownerId: Scalars['ID'];\n};\n\n/** Autogenerated return type of AbortQueuedMigrations */\nexport type AbortQueuedMigrationsPayload = {\n  __typename?: 'AbortQueuedMigrationsPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** Did the operation succeed? */\n  success?: Maybe<Scalars['Boolean']>;\n};\n\n/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */\nexport type AcceptEnterpriseAdministratorInvitationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The id of the invitation being accepted */\n  invitationId: Scalars['ID'];\n};\n\n/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */\nexport type AcceptEnterpriseAdministratorInvitationPayload = {\n  __typename?: 'AcceptEnterpriseAdministratorInvitationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The invitation that was accepted. */\n  invitation?: Maybe<EnterpriseAdministratorInvitation>;\n  /** A message confirming the result of accepting an administrator invitation. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AcceptTopicSuggestion */\nexport type AcceptTopicSuggestionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The name of the suggested topic. */\n  name: Scalars['String'];\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of AcceptTopicSuggestion */\nexport type AcceptTopicSuggestionPayload = {\n  __typename?: 'AcceptTopicSuggestionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The accepted topic. */\n  topic?: Maybe<Topic>;\n};\n\n/** Represents an object which can take actions on GitHub. Typically a User or Bot. */\nexport type Actor = {\n  /** A URL pointing to the actor's public avatar. */\n  avatarUrl: Scalars['URI'];\n  /** The username of the actor. */\n  login: Scalars['String'];\n  /** The HTTP path for this actor. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this actor. */\n  url: Scalars['URI'];\n};\n\n\n/** Represents an object which can take actions on GitHub. Typically a User or Bot. */\nexport type ActorAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n/** Location information for an actor */\nexport type ActorLocation = {\n  __typename?: 'ActorLocation';\n  /** City */\n  city?: Maybe<Scalars['String']>;\n  /** Country name */\n  country?: Maybe<Scalars['String']>;\n  /** Country code */\n  countryCode?: Maybe<Scalars['String']>;\n  /** Region name */\n  region?: Maybe<Scalars['String']>;\n  /** Region or state code */\n  regionCode?: Maybe<Scalars['String']>;\n};\n\n/** The actor's type. */\nexport enum ActorType {\n  /** Indicates a team actor. */\n  Team = 'TEAM',\n  /** Indicates a user actor. */\n  User = 'USER'\n}\n\n/** Autogenerated input type of AddAssigneesToAssignable */\nexport type AddAssigneesToAssignableInput = {\n  /** The id of the assignable object to add assignees to. */\n  assignableId: Scalars['ID'];\n  /** The id of users to add as assignees. */\n  assigneeIds: Array<Scalars['ID']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AddAssigneesToAssignable */\nexport type AddAssigneesToAssignablePayload = {\n  __typename?: 'AddAssigneesToAssignablePayload';\n  /** The item that was assigned. */\n  assignable?: Maybe<Assignable>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AddComment */\nexport type AddCommentInput = {\n  /** The contents of the comment. */\n  body: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars['ID'];\n};\n\n/** Autogenerated return type of AddComment */\nexport type AddCommentPayload = {\n  __typename?: 'AddCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The edge from the subject's comment connection. */\n  commentEdge?: Maybe<IssueCommentEdge>;\n  /** The subject */\n  subject?: Maybe<Node>;\n  /** The edge from the subject's timeline connection. */\n  timelineEdge?: Maybe<IssueTimelineItemEdge>;\n};\n\n/** Autogenerated input type of AddDiscussionComment */\nexport type AddDiscussionCommentInput = {\n  /** The contents of the comment. */\n  body: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the discussion to comment on. */\n  discussionId: Scalars['ID'];\n  /** The Node ID of the discussion comment within this discussion to reply to. */\n  replyToId?: InputMaybe<Scalars['ID']>;\n};\n\n/** Autogenerated return type of AddDiscussionComment */\nexport type AddDiscussionCommentPayload = {\n  __typename?: 'AddDiscussionCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The newly created discussion comment. */\n  comment?: Maybe<DiscussionComment>;\n};\n\n/** Autogenerated input type of AddEnterpriseSupportEntitlement */\nexport type AddEnterpriseSupportEntitlementInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the Enterprise which the admin belongs to. */\n  enterpriseId: Scalars['ID'];\n  /** The login of a member who will receive the support entitlement. */\n  login: Scalars['String'];\n};\n\n/** Autogenerated return type of AddEnterpriseSupportEntitlement */\nexport type AddEnterpriseSupportEntitlementPayload = {\n  __typename?: 'AddEnterpriseSupportEntitlementPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** A message confirming the result of adding the support entitlement. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AddLabelsToLabelable */\nexport type AddLabelsToLabelableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ids of the labels to add. */\n  labelIds: Array<Scalars['ID']>;\n  /** The id of the labelable object to add labels to. */\n  labelableId: Scalars['ID'];\n};\n\n/** Autogenerated return type of AddLabelsToLabelable */\nexport type AddLabelsToLabelablePayload = {\n  __typename?: 'AddLabelsToLabelablePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The item that was labeled. */\n  labelable?: Maybe<Labelable>;\n};\n\n/** Autogenerated input type of AddProjectCard */\nexport type AddProjectCardInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The content of the card. Must be a member of the ProjectCardItem union */\n  contentId?: InputMaybe<Scalars['ID']>;\n  /** The note on the card. */\n  note?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the ProjectColumn. */\n  projectColumnId: Scalars['ID'];\n};\n\n/** Autogenerated return type of AddProjectCard */\nexport type AddProjectCardPayload = {\n  __typename?: 'AddProjectCardPayload';\n  /** The edge from the ProjectColumn's card connection. */\n  cardEdge?: Maybe<ProjectCardEdge>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The ProjectColumn */\n  projectColumn?: Maybe<ProjectColumn>;\n};\n\n/** Autogenerated input type of AddProjectColumn */\nexport type AddProjectColumnInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The name of the column. */\n  name: Scalars['String'];\n  /** The Node ID of the project. */\n  projectId: Scalars['ID'];\n};\n\n/** Autogenerated return type of AddProjectColumn */\nexport type AddProjectColumnPayload = {\n  __typename?: 'AddProjectColumnPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The edge from the project's column connection. */\n  columnEdge?: Maybe<ProjectColumnEdge>;\n  /** The project */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of AddProjectNextItem */\nexport type AddProjectNextItemInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The content id of the item (Issue or PullRequest). */\n  contentId: Scalars['ID'];\n  /** The ID of the Project to add the item to. */\n  projectId: Scalars['ID'];\n};\n\n/** Autogenerated return type of AddProjectNextItem */\nexport type AddProjectNextItemPayload = {\n  __typename?: 'AddProjectNextItemPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The item added to the project. */\n  projectNextItem?: Maybe<ProjectNextItem>;\n};\n\n/** Autogenerated input type of AddPullRequestReviewComment */\nexport type AddPullRequestReviewCommentInput = {\n  /** The text of the comment. */\n  body: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The SHA of the commit to comment on. */\n  commitOID?: InputMaybe<Scalars['GitObjectID']>;\n  /** The comment id to reply to. */\n  inReplyTo?: InputMaybe<Scalars['ID']>;\n  /** The relative path of the file to comment on. */\n  path?: InputMaybe<Scalars['String']>;\n  /** The line index in the diff to comment on. */\n  position?: InputMaybe<Scalars['Int']>;\n  /** The node ID of the pull request reviewing */\n  pullRequestId?: InputMaybe<Scalars['ID']>;\n  /** The Node ID of the review to modify. */\n  pullRequestReviewId?: InputMaybe<Scalars['ID']>;\n};\n\n/** Autogenerated return type of AddPullRequestReviewComment */\nexport type AddPullRequestReviewCommentPayload = {\n  __typename?: 'AddPullRequestReviewCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The newly created comment. */\n  comment?: Maybe<PullRequestReviewComment>;\n  /** The edge from the review's comment connection. */\n  commentEdge?: Maybe<PullRequestReviewCommentEdge>;\n};\n\n/** Autogenerated input type of AddPullRequestReview */\nexport type AddPullRequestReviewInput = {\n  /** The contents of the review body comment. */\n  body?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The review line comments. */\n  comments?: InputMaybe<Array<InputMaybe<DraftPullRequestReviewComment>>>;\n  /** The commit OID the review pertains to. */\n  commitOID?: InputMaybe<Scalars['GitObjectID']>;\n  /** The event to perform on the pull request review. */\n  event?: InputMaybe<PullRequestReviewEvent>;\n  /** The Node ID of the pull request to modify. */\n  pullRequestId: Scalars['ID'];\n  /** The review line comment threads. */\n  threads?: InputMaybe<Array<InputMaybe<DraftPullRequestReviewThread>>>;\n};\n\n/** Autogenerated return type of AddPullRequestReview */\nexport type AddPullRequestReviewPayload = {\n  __typename?: 'AddPullRequestReviewPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The newly created pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n  /** The edge from the pull request's review connection. */\n  reviewEdge?: Maybe<PullRequestReviewEdge>;\n};\n\n/** Autogenerated input type of AddPullRequestReviewThread */\nexport type AddPullRequestReviewThreadInput = {\n  /** Body of the thread's first comment. */\n  body: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */\n  line: Scalars['Int'];\n  /** Path to the file being commented on. */\n  path: Scalars['String'];\n  /** The node ID of the pull request reviewing */\n  pullRequestId?: InputMaybe<Scalars['ID']>;\n  /** The Node ID of the review to modify. */\n  pullRequestReviewId?: InputMaybe<Scalars['ID']>;\n  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */\n  side?: InputMaybe<DiffSide>;\n  /** The first line of the range to which the comment refers. */\n  startLine?: InputMaybe<Scalars['Int']>;\n  /** The side of the diff on which the start line resides. */\n  startSide?: InputMaybe<DiffSide>;\n};\n\n/** Autogenerated return type of AddPullRequestReviewThread */\nexport type AddPullRequestReviewThreadPayload = {\n  __typename?: 'AddPullRequestReviewThreadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The newly created thread. */\n  thread?: Maybe<PullRequestReviewThread>;\n};\n\n/** Autogenerated input type of AddReaction */\nexport type AddReactionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The name of the emoji to react with. */\n  content: ReactionContent;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars['ID'];\n};\n\n/** Autogenerated return type of AddReaction */\nexport type AddReactionPayload = {\n  __typename?: 'AddReactionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The reaction object. */\n  reaction?: Maybe<Reaction>;\n  /** The reactable subject. */\n  subject?: Maybe<Reactable>;\n};\n\n/** Autogenerated input type of AddStar */\nexport type AddStarInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Starrable ID to star. */\n  starrableId: Scalars['ID'];\n};\n\n/** Autogenerated return type of AddStar */\nexport type AddStarPayload = {\n  __typename?: 'AddStarPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The starrable. */\n  starrable?: Maybe<Starrable>;\n};\n\n/** Autogenerated input type of AddUpvote */\nexport type AddUpvoteInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the discussion or comment to upvote. */\n  subjectId: Scalars['ID'];\n};\n\n/** Autogenerated return type of AddUpvote */\nexport type AddUpvotePayload = {\n  __typename?: 'AddUpvotePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The votable subject. */\n  subject?: Maybe<Votable>;\n};\n\n/** Autogenerated input type of AddVerifiableDomain */\nexport type AddVerifiableDomainInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The URL of the domain */\n  domain: Scalars['URI'];\n  /** The ID of the owner to add the domain to */\n  ownerId: Scalars['ID'];\n};\n\n/** Autogenerated return type of AddVerifiableDomain */\nexport type AddVerifiableDomainPayload = {\n  __typename?: 'AddVerifiableDomainPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The verifiable domain that was added. */\n  domain?: Maybe<VerifiableDomain>;\n};\n\n/** Represents a 'added_to_project' event on a given issue or pull request. */\nexport type AddedToProjectEvent = Node & {\n  __typename?: 'AddedToProjectEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n/** A GitHub App. */\nexport type App = Node & {\n  __typename?: 'App';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The description of the app. */\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** The IP addresses of the app. */\n  ipAllowListEntries: IpAllowListEntryConnection;\n  /** The hex color code, without the leading '#', for the logo background. */\n  logoBackgroundColor: Scalars['String'];\n  /** A URL pointing to the app's logo. */\n  logoUrl: Scalars['URI'];\n  /** The name of the app. */\n  name: Scalars['String'];\n  /** A slug based on the name of the app for use in URLs. */\n  slug: Scalars['String'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The URL to the app's homepage. */\n  url: Scalars['URI'];\n};\n\n\n/** A GitHub App. */\nexport type AppIpAllowListEntriesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IpAllowListEntryOrder>;\n};\n\n\n/** A GitHub App. */\nexport type AppLogoUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n/** Autogenerated input type of ApproveDeployments */\nexport type ApproveDeploymentsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Optional comment for approving deployments */\n  comment?: InputMaybe<Scalars['String']>;\n  /** The ids of environments to reject deployments */\n  environmentIds: Array<Scalars['ID']>;\n  /** The node ID of the workflow run containing the pending deployments. */\n  workflowRunId: Scalars['ID'];\n};\n\n/** Autogenerated return type of ApproveDeployments */\nexport type ApproveDeploymentsPayload = {\n  __typename?: 'ApproveDeploymentsPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The affected deployments. */\n  deployments?: Maybe<Array<Deployment>>;\n};\n\n/** Autogenerated input type of ApproveVerifiableDomain */\nexport type ApproveVerifiableDomainInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the verifiable domain to approve. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of ApproveVerifiableDomain */\nexport type ApproveVerifiableDomainPayload = {\n  __typename?: 'ApproveVerifiableDomainPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The verifiable domain that was approved. */\n  domain?: Maybe<VerifiableDomain>;\n};\n\n/** Autogenerated input type of ArchiveRepository */\nexport type ArchiveRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the repository to mark as archived. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of ArchiveRepository */\nexport type ArchiveRepositoryPayload = {\n  __typename?: 'ArchiveRepositoryPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The repository that was marked as archived. */\n  repository?: Maybe<Repository>;\n};\n\n/** An object that can have users assigned to it. */\nexport type Assignable = {\n  /** A list of Users assigned to this object. */\n  assignees: UserConnection;\n};\n\n\n/** An object that can have users assigned to it. */\nexport type AssignableAssigneesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** Represents an 'assigned' event on any assignable object. */\nexport type AssignedEvent = Node & {\n  __typename?: 'AssignedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the assignable associated with the event. */\n  assignable: Assignable;\n  /** Identifies the user or mannequin that was assigned. */\n  assignee?: Maybe<Assignee>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /**\n   * Identifies the user who was assigned.\n   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.\n   */\n  user?: Maybe<User>;\n};\n\n/** Types that can be assigned to issues. */\nexport type Assignee = Bot | Mannequin | Organization | User;\n\n/** An entry in the audit log. */\nexport type AuditEntry = {\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Types that can initiate an audit log event. */\nexport type AuditEntryActor = Bot | Organization | User;\n\n/** Ordering options for Audit Log connections. */\nexport type AuditLogOrder = {\n  /** The ordering direction. */\n  direction?: InputMaybe<OrderDirection>;\n  /** The field to order Audit Logs by. */\n  field?: InputMaybe<AuditLogOrderField>;\n};\n\n/** Properties by which Audit Log connections can be ordered. */\nexport enum AuditLogOrderField {\n  /** Order audit log entries by timestamp */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Represents a 'auto_merge_disabled' event on a given pull request. */\nexport type AutoMergeDisabledEvent = Node & {\n  __typename?: 'AutoMergeDisabledEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The user who disabled auto-merge for this Pull Request */\n  disabler?: Maybe<User>;\n  id: Scalars['ID'];\n  /** PullRequest referenced by event */\n  pullRequest?: Maybe<PullRequest>;\n  /** The reason auto-merge was disabled */\n  reason?: Maybe<Scalars['String']>;\n  /** The reason_code relating to why auto-merge was disabled */\n  reasonCode?: Maybe<Scalars['String']>;\n};\n\n/** Represents a 'auto_merge_enabled' event on a given pull request. */\nexport type AutoMergeEnabledEvent = Node & {\n  __typename?: 'AutoMergeEnabledEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The user who enabled auto-merge for this Pull Request */\n  enabler?: Maybe<User>;\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents an auto-merge request for a pull request */\nexport type AutoMergeRequest = {\n  __typename?: 'AutoMergeRequest';\n  /** The email address of the author of this auto-merge request. */\n  authorEmail?: Maybe<Scalars['String']>;\n  /** The commit message of the auto-merge request. */\n  commitBody?: Maybe<Scalars['String']>;\n  /** The commit title of the auto-merge request. */\n  commitHeadline?: Maybe<Scalars['String']>;\n  /** When was this auto-merge request was enabled. */\n  enabledAt?: Maybe<Scalars['DateTime']>;\n  /** The actor who created the auto-merge request. */\n  enabledBy?: Maybe<Actor>;\n  /** The merge method of the auto-merge request. */\n  mergeMethod: PullRequestMergeMethod;\n  /** The pull request that this auto-merge request is set against. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'auto_rebase_enabled' event on a given pull request. */\nexport type AutoRebaseEnabledEvent = Node & {\n  __typename?: 'AutoRebaseEnabledEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The user who enabled auto-merge (rebase) for this Pull Request */\n  enabler?: Maybe<User>;\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'auto_squash_enabled' event on a given pull request. */\nexport type AutoSquashEnabledEvent = Node & {\n  __typename?: 'AutoSquashEnabledEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The user who enabled auto-merge (squash) for this Pull Request */\n  enabler?: Maybe<User>;\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'automatic_base_change_failed' event on a given pull request. */\nexport type AutomaticBaseChangeFailedEvent = Node & {\n  __typename?: 'AutomaticBaseChangeFailedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** The new base for this PR */\n  newBase: Scalars['String'];\n  /** The old base for this PR */\n  oldBase: Scalars['String'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */\nexport type AutomaticBaseChangeSucceededEvent = Node & {\n  __typename?: 'AutomaticBaseChangeSucceededEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** The new base for this PR */\n  newBase: Scalars['String'];\n  /** The old base for this PR */\n  oldBase: Scalars['String'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'base_ref_changed' event on a given issue or pull request. */\nexport type BaseRefChangedEvent = Node & {\n  __typename?: 'BaseRefChangedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the name of the base ref for the pull request after it was changed. */\n  currentRefName: Scalars['String'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** Identifies the name of the base ref for the pull request before it was changed. */\n  previousRefName: Scalars['String'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'base_ref_deleted' event on a given pull request. */\nexport type BaseRefDeletedEvent = Node & {\n  __typename?: 'BaseRefDeletedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the name of the Ref associated with the `base_ref_deleted` event. */\n  baseRefName?: Maybe<Scalars['String']>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'base_ref_force_pushed' event on a given pull request. */\nexport type BaseRefForcePushedEvent = Node & {\n  __typename?: 'BaseRefForcePushedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */\n  afterCommit?: Maybe<Commit>;\n  /** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */\n  beforeCommit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */\n  ref?: Maybe<Ref>;\n};\n\n/** Represents a Git blame. */\nexport type Blame = {\n  __typename?: 'Blame';\n  /** The list of ranges from a Git blame. */\n  ranges: Array<BlameRange>;\n};\n\n/** Represents a range of information from a Git blame. */\nexport type BlameRange = {\n  __typename?: 'BlameRange';\n  /** Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change. */\n  age: Scalars['Int'];\n  /** Identifies the line author */\n  commit: Commit;\n  /** The ending line for the range */\n  endingLine: Scalars['Int'];\n  /** The starting line for the range */\n  startingLine: Scalars['Int'];\n};\n\n/** Represents a Git blob. */\nexport type Blob = GitObject & Node & {\n  __typename?: 'Blob';\n  /** An abbreviated version of the Git object ID */\n  abbreviatedOid: Scalars['String'];\n  /** Byte size of Blob object */\n  byteSize: Scalars['Int'];\n  /** The HTTP path for this Git object */\n  commitResourcePath: Scalars['URI'];\n  /** The HTTP URL for this Git object */\n  commitUrl: Scalars['URI'];\n  id: Scalars['ID'];\n  /** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */\n  isBinary?: Maybe<Scalars['Boolean']>;\n  /** Indicates whether the contents is truncated */\n  isTruncated: Scalars['Boolean'];\n  /** The Git object ID */\n  oid: Scalars['GitObjectID'];\n  /** The Repository the Git object belongs to */\n  repository: Repository;\n  /** UTF8 text data or null if the Blob is binary */\n  text?: Maybe<Scalars['String']>;\n};\n\n/** A special type of user which takes actions on behalf of GitHub Apps. */\nexport type Bot = Actor & Node & UniformResourceLocatable & {\n  __typename?: 'Bot';\n  /** A URL pointing to the GitHub App's public avatar. */\n  avatarUrl: Scalars['URI'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** The username of the actor. */\n  login: Scalars['String'];\n  /** The HTTP path for this bot */\n  resourcePath: Scalars['URI'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this bot */\n  url: Scalars['URI'];\n};\n\n\n/** A special type of user which takes actions on behalf of GitHub Apps. */\nexport type BotAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n/** Types which can be actors for `BranchActorAllowance` objects. */\nexport type BranchActorAllowanceActor = Team | User;\n\n/** A branch protection rule. */\nexport type BranchProtectionRule = Node & {\n  __typename?: 'BranchProtectionRule';\n  /** Can this branch be deleted. */\n  allowsDeletions: Scalars['Boolean'];\n  /** Are force pushes allowed on this branch. */\n  allowsForcePushes: Scalars['Boolean'];\n  /** A list of conflicts matching branches protection rule and other branch protection rules */\n  branchProtectionRuleConflicts: BranchProtectionRuleConflictConnection;\n  /** A list of actors able to force push for this branch protection rule. */\n  bypassForcePushAllowances: BypassForcePushAllowanceConnection;\n  /** A list of actors able to bypass PRs for this branch protection rule. */\n  bypassPullRequestAllowances: BypassPullRequestAllowanceConnection;\n  /** The actor who created this branch protection rule. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** Will new commits pushed to matching branches dismiss pull request review approvals. */\n  dismissesStaleReviews: Scalars['Boolean'];\n  id: Scalars['ID'];\n  /** Can admins overwrite branch protection. */\n  isAdminEnforced: Scalars['Boolean'];\n  /** Repository refs that are protected by this rule */\n  matchingRefs: RefConnection;\n  /** Identifies the protection rule pattern. */\n  pattern: Scalars['String'];\n  /** A list push allowances for this branch protection rule. */\n  pushAllowances: PushAllowanceConnection;\n  /** The repository associated with this branch protection rule. */\n  repository?: Maybe<Repository>;\n  /** Number of approving reviews required to update matching branches. */\n  requiredApprovingReviewCount?: Maybe<Scalars['Int']>;\n  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */\n  requiredStatusCheckContexts?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** List of required status checks that must pass for commits to be accepted to matching branches. */\n  requiredStatusChecks?: Maybe<Array<RequiredStatusCheckDescription>>;\n  /** Are approving reviews required to update matching branches. */\n  requiresApprovingReviews: Scalars['Boolean'];\n  /** Are reviews from code owners required to update matching branches. */\n  requiresCodeOwnerReviews: Scalars['Boolean'];\n  /** Are commits required to be signed. */\n  requiresCommitSignatures: Scalars['Boolean'];\n  /** Are conversations required to be resolved before merging. */\n  requiresConversationResolution: Scalars['Boolean'];\n  /** Are merge commits prohibited from being pushed to this branch. */\n  requiresLinearHistory: Scalars['Boolean'];\n  /** Are status checks required to update matching branches. */\n  requiresStatusChecks: Scalars['Boolean'];\n  /** Are branches required to be up to date before merging. */\n  requiresStrictStatusChecks: Scalars['Boolean'];\n  /** Is pushing to matching branches restricted. */\n  restrictsPushes: Scalars['Boolean'];\n  /** Is dismissal of pull request reviews restricted. */\n  restrictsReviewDismissals: Scalars['Boolean'];\n  /** A list review dismissal allowances for this branch protection rule. */\n  reviewDismissalAllowances: ReviewDismissalAllowanceConnection;\n};\n\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleBranchProtectionRuleConflictsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleBypassForcePushAllowancesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleBypassPullRequestAllowancesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleMatchingRefsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  query?: InputMaybe<Scalars['String']>;\n};\n\n\n/** A branch protection rule. */\nexport type BranchProtectionRulePushAllowancesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleReviewDismissalAllowancesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A conflict between two branch protection rules. */\nexport type BranchProtectionRuleConflict = {\n  __typename?: 'BranchProtectionRuleConflict';\n  /** Identifies the branch protection rule. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** Identifies the conflicting branch protection rule. */\n  conflictingBranchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** Identifies the branch ref that has conflicting rules */\n  ref?: Maybe<Ref>;\n};\n\n/** The connection type for BranchProtectionRuleConflict. */\nexport type BranchProtectionRuleConflictConnection = {\n  __typename?: 'BranchProtectionRuleConflictConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BranchProtectionRuleConflictEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<BranchProtectionRuleConflict>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type BranchProtectionRuleConflictEdge = {\n  __typename?: 'BranchProtectionRuleConflictEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<BranchProtectionRuleConflict>;\n};\n\n/** The connection type for BranchProtectionRule. */\nexport type BranchProtectionRuleConnection = {\n  __typename?: 'BranchProtectionRuleConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BranchProtectionRuleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<BranchProtectionRule>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type BranchProtectionRuleEdge = {\n  __typename?: 'BranchProtectionRuleEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<BranchProtectionRule>;\n};\n\n/** A team or user who has the ability to bypass a force push requirement on a protected branch. */\nexport type BypassForcePushAllowance = Node & {\n  __typename?: 'BypassForcePushAllowance';\n  /** The actor that can dismiss. */\n  actor?: Maybe<BranchActorAllowanceActor>;\n  /** Identifies the branch protection rule associated with the allowed user or team. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  id: Scalars['ID'];\n};\n\n/** The connection type for BypassForcePushAllowance. */\nexport type BypassForcePushAllowanceConnection = {\n  __typename?: 'BypassForcePushAllowanceConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BypassForcePushAllowanceEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<BypassForcePushAllowance>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type BypassForcePushAllowanceEdge = {\n  __typename?: 'BypassForcePushAllowanceEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<BypassForcePushAllowance>;\n};\n\n/** A team or user who has the ability to bypass a pull request requirement on a protected branch. */\nexport type BypassPullRequestAllowance = Node & {\n  __typename?: 'BypassPullRequestAllowance';\n  /** The actor that can dismiss. */\n  actor?: Maybe<BranchActorAllowanceActor>;\n  /** Identifies the branch protection rule associated with the allowed user or team. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  id: Scalars['ID'];\n};\n\n/** The connection type for BypassPullRequestAllowance. */\nexport type BypassPullRequestAllowanceConnection = {\n  __typename?: 'BypassPullRequestAllowanceConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BypassPullRequestAllowanceEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<BypassPullRequestAllowance>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type BypassPullRequestAllowanceEdge = {\n  __typename?: 'BypassPullRequestAllowanceEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<BypassPullRequestAllowance>;\n};\n\n/** The Common Vulnerability Scoring System */\nexport type Cvss = {\n  __typename?: 'CVSS';\n  /** The CVSS score associated with this advisory */\n  score: Scalars['Float'];\n  /** The CVSS vector string associated with this advisory */\n  vectorString?: Maybe<Scalars['String']>;\n};\n\n/** A common weakness enumeration */\nexport type Cwe = Node & {\n  __typename?: 'CWE';\n  /** The id of the CWE */\n  cweId: Scalars['String'];\n  /** A detailed description of this CWE */\n  description: Scalars['String'];\n  id: Scalars['ID'];\n  /** The name of this CWE */\n  name: Scalars['String'];\n};\n\n/** The connection type for CWE. */\nexport type CweConnection = {\n  __typename?: 'CWEConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CweEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Cwe>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CweEdge = {\n  __typename?: 'CWEEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Cwe>;\n};\n\n/** Autogenerated input type of CancelEnterpriseAdminInvitation */\nexport type CancelEnterpriseAdminInvitationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the pending enterprise administrator invitation. */\n  invitationId: Scalars['ID'];\n};\n\n/** Autogenerated return type of CancelEnterpriseAdminInvitation */\nexport type CancelEnterpriseAdminInvitationPayload = {\n  __typename?: 'CancelEnterpriseAdminInvitationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The invitation that was canceled. */\n  invitation?: Maybe<EnterpriseAdministratorInvitation>;\n  /** A message confirming the result of canceling an administrator invitation. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of CancelSponsorship */\nexport type CancelSponsorshipInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */\n  sponsorId?: InputMaybe<Scalars['ID']>;\n  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */\n  sponsorLogin?: InputMaybe<Scalars['String']>;\n  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */\n  sponsorableId?: InputMaybe<Scalars['ID']>;\n  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */\n  sponsorableLogin?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CancelSponsorship */\nexport type CancelSponsorshipPayload = {\n  __typename?: 'CancelSponsorshipPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The tier that was being used at the time of cancellation. */\n  sponsorsTier?: Maybe<SponsorsTier>;\n};\n\n/** Autogenerated input type of ChangeUserStatus */\nexport type ChangeUserStatusInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */\n  emoji?: InputMaybe<Scalars['String']>;\n  /** If set, the user status will not be shown after this date. */\n  expiresAt?: InputMaybe<Scalars['DateTime']>;\n  /** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */\n  limitedAvailability?: InputMaybe<Scalars['Boolean']>;\n  /** A short description of your current status. */\n  message?: InputMaybe<Scalars['String']>;\n  /** The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible. */\n  organizationId?: InputMaybe<Scalars['ID']>;\n};\n\n/** Autogenerated return type of ChangeUserStatus */\nexport type ChangeUserStatusPayload = {\n  __typename?: 'ChangeUserStatusPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** Your updated status. */\n  status?: Maybe<UserStatus>;\n};\n\n/** A single check annotation. */\nexport type CheckAnnotation = {\n  __typename?: 'CheckAnnotation';\n  /** The annotation's severity level. */\n  annotationLevel?: Maybe<CheckAnnotationLevel>;\n  /** The path to the file that this annotation was made on. */\n  blobUrl: Scalars['URI'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The position of this annotation. */\n  location: CheckAnnotationSpan;\n  /** The annotation's message. */\n  message: Scalars['String'];\n  /** The path that this annotation was made on. */\n  path: Scalars['String'];\n  /** Additional information about the annotation. */\n  rawDetails?: Maybe<Scalars['String']>;\n  /** The annotation's title */\n  title?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for CheckAnnotation. */\nexport type CheckAnnotationConnection = {\n  __typename?: 'CheckAnnotationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CheckAnnotationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CheckAnnotation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Information from a check run analysis to specific lines of code. */\nexport type CheckAnnotationData = {\n  /** Represents an annotation's information level */\n  annotationLevel: CheckAnnotationLevel;\n  /** The location of the annotation */\n  location: CheckAnnotationRange;\n  /** A short description of the feedback for these lines of code. */\n  message: Scalars['String'];\n  /** The path of the file to add an annotation to. */\n  path: Scalars['String'];\n  /** Details about this annotation. */\n  rawDetails?: InputMaybe<Scalars['String']>;\n  /** The title that represents the annotation. */\n  title?: InputMaybe<Scalars['String']>;\n};\n\n/** An edge in a connection. */\nexport type CheckAnnotationEdge = {\n  __typename?: 'CheckAnnotationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CheckAnnotation>;\n};\n\n/** Represents an annotation's information level. */\nexport enum CheckAnnotationLevel {\n  /** An annotation indicating an inescapable error. */\n  Failure = 'FAILURE',\n  /** An annotation indicating some information. */\n  Notice = 'NOTICE',\n  /** An annotation indicating an ignorable error. */\n  Warning = 'WARNING'\n}\n\n/** A character position in a check annotation. */\nexport type CheckAnnotationPosition = {\n  __typename?: 'CheckAnnotationPosition';\n  /** Column number (1 indexed). */\n  column?: Maybe<Scalars['Int']>;\n  /** Line number (1 indexed). */\n  line: Scalars['Int'];\n};\n\n/** Information from a check run analysis to specific lines of code. */\nexport type CheckAnnotationRange = {\n  /** The ending column of the range. */\n  endColumn?: InputMaybe<Scalars['Int']>;\n  /** The ending line of the range. */\n  endLine: Scalars['Int'];\n  /** The starting column of the range. */\n  startColumn?: InputMaybe<Scalars['Int']>;\n  /** The starting line of the range. */\n  startLine: Scalars['Int'];\n};\n\n/** An inclusive pair of positions for a check annotation. */\nexport type CheckAnnotationSpan = {\n  __typename?: 'CheckAnnotationSpan';\n  /** End position (inclusive). */\n  end: CheckAnnotationPosition;\n  /** Start position (inclusive). */\n  start: CheckAnnotationPosition;\n};\n\n/** The possible states for a check suite or run conclusion. */\nexport enum CheckConclusionState {\n  /** The check suite or run requires action. */\n  ActionRequired = 'ACTION_REQUIRED',\n  /** The check suite or run has been cancelled. */\n  Cancelled = 'CANCELLED',\n  /** The check suite or run has failed. */\n  Failure = 'FAILURE',\n  /** The check suite or run was neutral. */\n  Neutral = 'NEUTRAL',\n  /** The check suite or run was skipped. */\n  Skipped = 'SKIPPED',\n  /** The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion. */\n  Stale = 'STALE',\n  /** The check suite or run has failed at startup. */\n  StartupFailure = 'STARTUP_FAILURE',\n  /** The check suite or run has succeeded. */\n  Success = 'SUCCESS',\n  /** The check suite or run has timed out. */\n  TimedOut = 'TIMED_OUT'\n}\n\n/** A check run. */\nexport type CheckRun = Node & RequirableByPullRequest & UniformResourceLocatable & {\n  __typename?: 'CheckRun';\n  /** The check run's annotations */\n  annotations?: Maybe<CheckAnnotationConnection>;\n  /** The check suite that this run is a part of. */\n  checkSuite: CheckSuite;\n  /** Identifies the date and time when the check run was completed. */\n  completedAt?: Maybe<Scalars['DateTime']>;\n  /** The conclusion of the check run. */\n  conclusion?: Maybe<CheckConclusionState>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The corresponding deployment for this job, if any */\n  deployment?: Maybe<Deployment>;\n  /** The URL from which to find full details of the check run on the integrator's site. */\n  detailsUrl?: Maybe<Scalars['URI']>;\n  /** A reference for the check run on the integrator's system. */\n  externalId?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** Whether this is required to pass before merging for a specific pull request. */\n  isRequired: Scalars['Boolean'];\n  /** The name of the check for this check run. */\n  name: Scalars['String'];\n  /** Information about a pending deployment, if any, in this check run */\n  pendingDeploymentRequest?: Maybe<DeploymentRequest>;\n  /** The permalink to the check run summary. */\n  permalink: Scalars['URI'];\n  /** The repository associated with this check run. */\n  repository: Repository;\n  /** The HTTP path for this check run. */\n  resourcePath: Scalars['URI'];\n  /** Identifies the date and time when the check run was started. */\n  startedAt?: Maybe<Scalars['DateTime']>;\n  /** The current status of the check run. */\n  status: CheckStatusState;\n  /** The check run's steps */\n  steps?: Maybe<CheckStepConnection>;\n  /** A string representing the check run's summary */\n  summary?: Maybe<Scalars['String']>;\n  /** A string representing the check run's text */\n  text?: Maybe<Scalars['String']>;\n  /** A string representing the check run */\n  title?: Maybe<Scalars['String']>;\n  /** The HTTP URL for this check run. */\n  url: Scalars['URI'];\n};\n\n\n/** A check run. */\nexport type CheckRunAnnotationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A check run. */\nexport type CheckRunIsRequiredArgs = {\n  pullRequestId?: InputMaybe<Scalars['ID']>;\n  pullRequestNumber?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A check run. */\nexport type CheckRunStepsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  number?: InputMaybe<Scalars['Int']>;\n};\n\n/** Possible further actions the integrator can perform. */\nexport type CheckRunAction = {\n  /** A short explanation of what this action would do. */\n  description: Scalars['String'];\n  /** A reference for the action on the integrator's system.  */\n  identifier: Scalars['String'];\n  /** The text to be displayed on a button in the web UI. */\n  label: Scalars['String'];\n};\n\n/** The connection type for CheckRun. */\nexport type CheckRunConnection = {\n  __typename?: 'CheckRunConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CheckRunEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CheckRun>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CheckRunEdge = {\n  __typename?: 'CheckRunEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CheckRun>;\n};\n\n/** The filters that are available when fetching check runs. */\nexport type CheckRunFilter = {\n  /** Filters the check runs created by this application ID. */\n  appId?: InputMaybe<Scalars['Int']>;\n  /** Filters the check runs by this name. */\n  checkName?: InputMaybe<Scalars['String']>;\n  /** Filters the check runs by this type. */\n  checkType?: InputMaybe<CheckRunType>;\n  /** Filters the check runs by this status. */\n  status?: InputMaybe<CheckStatusState>;\n};\n\n/** Descriptive details about the check run. */\nexport type CheckRunOutput = {\n  /** The annotations that are made as part of the check run. */\n  annotations?: InputMaybe<Array<CheckAnnotationData>>;\n  /** Images attached to the check run output displayed in the GitHub pull request UI. */\n  images?: InputMaybe<Array<CheckRunOutputImage>>;\n  /** The summary of the check run (supports Commonmark). */\n  summary: Scalars['String'];\n  /** The details of the check run (supports Commonmark). */\n  text?: InputMaybe<Scalars['String']>;\n  /** A title to provide for this check run. */\n  title: Scalars['String'];\n};\n\n/** Images attached to the check run output displayed in the GitHub pull request UI. */\nexport type CheckRunOutputImage = {\n  /** The alternative text for the image. */\n  alt: Scalars['String'];\n  /** A short image description. */\n  caption?: InputMaybe<Scalars['String']>;\n  /** The full URL of the image. */\n  imageUrl: Scalars['URI'];\n};\n\n/** The possible types of check runs. */\nexport enum CheckRunType {\n  /** Every check run available. */\n  All = 'ALL',\n  /** The latest check run. */\n  Latest = 'LATEST'\n}\n\n/** The possible states for a check suite or run status. */\nexport enum CheckStatusState {\n  /** The check suite or run has been completed. */\n  Completed = 'COMPLETED',\n  /** The check suite or run is in progress. */\n  InProgress = 'IN_PROGRESS',\n  /** The check suite or run is in pending state. */\n  Pending = 'PENDING',\n  /** The check suite or run has been queued. */\n  Queued = 'QUEUED',\n  /** The check suite or run has been requested. */\n  Requested = 'REQUESTED',\n  /** The check suite or run is in waiting state. */\n  Waiting = 'WAITING'\n}\n\n/** A single check step. */\nexport type CheckStep = {\n  __typename?: 'CheckStep';\n  /** Identifies the date and time when the check step was completed. */\n  completedAt?: Maybe<Scalars['DateTime']>;\n  /** The conclusion of the check step. */\n  conclusion?: Maybe<CheckConclusionState>;\n  /** A reference for the check step on the integrator's system. */\n  externalId?: Maybe<Scalars['String']>;\n  /** The step's name. */\n  name: Scalars['String'];\n  /** The index of the step in the list of steps of the parent check run. */\n  number: Scalars['Int'];\n  /** Number of seconds to completion. */\n  secondsToCompletion?: Maybe<Scalars['Int']>;\n  /** Identifies the date and time when the check step was started. */\n  startedAt?: Maybe<Scalars['DateTime']>;\n  /** The current status of the check step. */\n  status: CheckStatusState;\n};\n\n/** The connection type for CheckStep. */\nexport type CheckStepConnection = {\n  __typename?: 'CheckStepConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CheckStepEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CheckStep>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CheckStepEdge = {\n  __typename?: 'CheckStepEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CheckStep>;\n};\n\n/** A check suite. */\nexport type CheckSuite = Node & {\n  __typename?: 'CheckSuite';\n  /** The GitHub App which created this check suite. */\n  app?: Maybe<App>;\n  /** The name of the branch for this check suite. */\n  branch?: Maybe<Ref>;\n  /** The check runs associated with a check suite. */\n  checkRuns?: Maybe<CheckRunConnection>;\n  /** The commit for this check suite */\n  commit: Commit;\n  /** The conclusion of this check suite. */\n  conclusion?: Maybe<CheckConclusionState>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The user who triggered the check suite. */\n  creator?: Maybe<User>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** A list of open pull requests matching the check suite. */\n  matchingPullRequests?: Maybe<PullRequestConnection>;\n  /** The push that triggered this check suite. */\n  push?: Maybe<Push>;\n  /** The repository associated with this check suite. */\n  repository: Repository;\n  /** The HTTP path for this check suite */\n  resourcePath: Scalars['URI'];\n  /** The status of this check suite. */\n  status: CheckStatusState;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this check suite */\n  url: Scalars['URI'];\n  /** The workflow run associated with this check suite. */\n  workflowRun?: Maybe<WorkflowRun>;\n};\n\n\n/** A check suite. */\nexport type CheckSuiteCheckRunsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  filterBy?: InputMaybe<CheckRunFilter>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A check suite. */\nexport type CheckSuiteMatchingPullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  baseRefName?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  headRefName?: InputMaybe<Scalars['String']>;\n  labels?: InputMaybe<Array<Scalars['String']>>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** The auto-trigger preferences that are available for check suites. */\nexport type CheckSuiteAutoTriggerPreference = {\n  /** The node ID of the application that owns the check suite. */\n  appId: Scalars['ID'];\n  /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */\n  setting: Scalars['Boolean'];\n};\n\n/** The connection type for CheckSuite. */\nexport type CheckSuiteConnection = {\n  __typename?: 'CheckSuiteConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CheckSuiteEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CheckSuite>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CheckSuiteEdge = {\n  __typename?: 'CheckSuiteEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CheckSuite>;\n};\n\n/** The filters that are available when fetching check suites. */\nexport type CheckSuiteFilter = {\n  /** Filters the check suites created by this application ID. */\n  appId?: InputMaybe<Scalars['Int']>;\n  /** Filters the check suites by this name. */\n  checkName?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of ClearLabelsFromLabelable */\nexport type ClearLabelsFromLabelableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The id of the labelable object to clear the labels from. */\n  labelableId: Scalars['ID'];\n};\n\n/** Autogenerated return type of ClearLabelsFromLabelable */\nexport type ClearLabelsFromLabelablePayload = {\n  __typename?: 'ClearLabelsFromLabelablePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The item that was unlabeled. */\n  labelable?: Maybe<Labelable>;\n};\n\n/** Autogenerated input type of CloneProject */\nexport type CloneProjectInput = {\n  /** The description of the project. */\n  body?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Whether or not to clone the source project's workflows. */\n  includeWorkflows: Scalars['Boolean'];\n  /** The name of the project. */\n  name: Scalars['String'];\n  /** The visibility of the project, defaults to false (private). */\n  public?: InputMaybe<Scalars['Boolean']>;\n  /** The source project to clone. */\n  sourceId: Scalars['ID'];\n  /** The owner ID to create the project under. */\n  targetOwnerId: Scalars['ID'];\n};\n\n/** Autogenerated return type of CloneProject */\nexport type CloneProjectPayload = {\n  __typename?: 'CloneProjectPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The id of the JobStatus for populating cloned fields. */\n  jobStatusId?: Maybe<Scalars['String']>;\n  /** The new cloned project. */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of CloneTemplateRepository */\nexport type CloneTemplateRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** A short description of the new repository. */\n  description?: InputMaybe<Scalars['String']>;\n  /** Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template. */\n  includeAllBranches?: InputMaybe<Scalars['Boolean']>;\n  /** The name of the new repository. */\n  name: Scalars['String'];\n  /** The ID of the owner for the new repository. */\n  ownerId: Scalars['ID'];\n  /** The Node ID of the template repository. */\n  repositoryId: Scalars['ID'];\n  /** Indicates the repository's visibility level. */\n  visibility: RepositoryVisibility;\n};\n\n/** Autogenerated return type of CloneTemplateRepository */\nexport type CloneTemplateRepositoryPayload = {\n  __typename?: 'CloneTemplateRepositoryPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The new repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** An object that can be closed */\nexport type Closable = {\n  /** `true` if the object is closed (definition of closed may depend on type) */\n  closed: Scalars['Boolean'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']>;\n};\n\n/** Autogenerated input type of CloseIssue */\nexport type CloseIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** ID of the issue to be closed. */\n  issueId: Scalars['ID'];\n};\n\n/** Autogenerated return type of CloseIssue */\nexport type CloseIssuePayload = {\n  __typename?: 'CloseIssuePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The issue that was closed. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of ClosePullRequest */\nexport type ClosePullRequestInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** ID of the pull request to be closed. */\n  pullRequestId: Scalars['ID'];\n};\n\n/** Autogenerated return type of ClosePullRequest */\nexport type ClosePullRequestPayload = {\n  __typename?: 'ClosePullRequestPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The pull request that was closed. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'closed' event on any `Closable`. */\nexport type ClosedEvent = Node & UniformResourceLocatable & {\n  __typename?: 'ClosedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Object that was closed. */\n  closable: Closable;\n  /** Object which triggered the creation of this event. */\n  closer?: Maybe<Closer>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** The HTTP path for this closed event. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this closed event. */\n  url: Scalars['URI'];\n};\n\n/** The object which triggered a `ClosedEvent`. */\nexport type Closer = Commit | PullRequest;\n\n/** The Code of Conduct for a repository */\nexport type CodeOfConduct = Node & {\n  __typename?: 'CodeOfConduct';\n  /** The body of the Code of Conduct */\n  body?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** The key for the Code of Conduct */\n  key: Scalars['String'];\n  /** The formal name of the Code of Conduct */\n  name: Scalars['String'];\n  /** The HTTP path for this Code of Conduct */\n  resourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for this Code of Conduct */\n  url?: Maybe<Scalars['URI']>;\n};\n\n/** Collaborators affiliation level with a subject. */\nexport enum CollaboratorAffiliation {\n  /** All collaborators the authenticated user can see. */\n  All = 'ALL',\n  /** All collaborators with permissions to an organization-owned subject, regardless of organization membership status. */\n  Direct = 'DIRECT',\n  /** All outside collaborators of an organization-owned subject. */\n  Outside = 'OUTSIDE'\n}\n\n/** Represents a comment. */\nexport type Comment = {\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The body as Markdown. */\n  body: Scalars['String'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean'];\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  id: Scalars['ID'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean'];\n};\n\n\n/** Represents a comment. */\nexport type CommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A comment author association with repository. */\nexport enum CommentAuthorAssociation {\n  /** Author has been invited to collaborate on the repository. */\n  Collaborator = 'COLLABORATOR',\n  /** Author has previously committed to the repository. */\n  Contributor = 'CONTRIBUTOR',\n  /** Author has not previously committed to GitHub. */\n  FirstTimer = 'FIRST_TIMER',\n  /** Author has not previously committed to the repository. */\n  FirstTimeContributor = 'FIRST_TIME_CONTRIBUTOR',\n  /** Author is a placeholder for an unclaimed user. */\n  Mannequin = 'MANNEQUIN',\n  /** Author is a member of the organization that owns the repository. */\n  Member = 'MEMBER',\n  /** Author has no association with the repository. */\n  None = 'NONE',\n  /** Author is the owner of the repository. */\n  Owner = 'OWNER'\n}\n\n/** The possible errors that will prevent a user from updating a comment. */\nexport enum CommentCannotUpdateReason {\n  /** Unable to create comment because repository is archived. */\n  Archived = 'ARCHIVED',\n  /** You cannot update this comment */\n  Denied = 'DENIED',\n  /** You must be the author or have write access to this repository to update this comment. */\n  InsufficientAccess = 'INSUFFICIENT_ACCESS',\n  /** Unable to create comment because issue is locked. */\n  Locked = 'LOCKED',\n  /** You must be logged in to update this comment. */\n  LoginRequired = 'LOGIN_REQUIRED',\n  /** Repository is under maintenance. */\n  Maintenance = 'MAINTENANCE',\n  /** At least one email address must be verified to update this comment. */\n  VerifiedEmailRequired = 'VERIFIED_EMAIL_REQUIRED'\n}\n\n/** Represents a 'comment_deleted' event on a given issue or pull request. */\nexport type CommentDeletedEvent = Node & {\n  __typename?: 'CommentDeletedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The user who authored the deleted comment. */\n  deletedCommentAuthor?: Maybe<Actor>;\n  id: Scalars['ID'];\n};\n\n/** Represents a Git commit. */\nexport type Commit = GitObject & Node & Subscribable & UniformResourceLocatable & {\n  __typename?: 'Commit';\n  /** An abbreviated version of the Git object ID */\n  abbreviatedOid: Scalars['String'];\n  /** The number of additions in this commit. */\n  additions: Scalars['Int'];\n  /** The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit */\n  associatedPullRequests?: Maybe<PullRequestConnection>;\n  /** Authorship details of the commit. */\n  author?: Maybe<GitActor>;\n  /** Check if the committer and the author match. */\n  authoredByCommitter: Scalars['Boolean'];\n  /** The datetime when this commit was authored. */\n  authoredDate: Scalars['DateTime'];\n  /**\n   * The list of authors for this commit based on the git author and the Co-authored-by\n   * message trailer. The git author will always be first.\n   *\n   */\n  authors: GitActorConnection;\n  /** Fetches `git blame` information. */\n  blame: Blame;\n  /** The number of changed files in this commit. */\n  changedFiles: Scalars['Int'];\n  /** The check suites associated with a commit. */\n  checkSuites?: Maybe<CheckSuiteConnection>;\n  /** Comments made on the commit. */\n  comments: CommitCommentConnection;\n  /** The HTTP path for this Git object */\n  commitResourcePath: Scalars['URI'];\n  /** The HTTP URL for this Git object */\n  commitUrl: Scalars['URI'];\n  /** The datetime when this commit was committed. */\n  committedDate: Scalars['DateTime'];\n  /** Check if committed via GitHub web UI. */\n  committedViaWeb: Scalars['Boolean'];\n  /** Committer details of the commit. */\n  committer?: Maybe<GitActor>;\n  /** The number of deletions in this commit. */\n  deletions: Scalars['Int'];\n  /** The deployments associated with a commit. */\n  deployments?: Maybe<DeploymentConnection>;\n  /** The tree entry representing the file located at the given path. */\n  file?: Maybe<TreeEntry>;\n  /** The linear commit history starting from (and including) this commit, in the same order as `git log`. */\n  history: CommitHistoryConnection;\n  id: Scalars['ID'];\n  /** The Git commit message */\n  message: Scalars['String'];\n  /** The Git commit message body */\n  messageBody: Scalars['String'];\n  /** The commit message body rendered to HTML. */\n  messageBodyHTML: Scalars['HTML'];\n  /** The Git commit message headline */\n  messageHeadline: Scalars['String'];\n  /** The commit message headline rendered to HTML. */\n  messageHeadlineHTML: Scalars['HTML'];\n  /** The Git object ID */\n  oid: Scalars['GitObjectID'];\n  /** The organization this commit was made on behalf of. */\n  onBehalfOf?: Maybe<Organization>;\n  /** The parents of a commit. */\n  parents: CommitConnection;\n  /** The datetime when this commit was pushed. */\n  pushedDate?: Maybe<Scalars['DateTime']>;\n  /** The Repository this commit belongs to */\n  repository: Repository;\n  /** The HTTP path for this commit */\n  resourcePath: Scalars['URI'];\n  /** Commit signing information, if present. */\n  signature?: Maybe<GitSignature>;\n  /** Status information for this commit */\n  status?: Maybe<Status>;\n  /** Check and Status rollup information for this commit. */\n  statusCheckRollup?: Maybe<StatusCheckRollup>;\n  /** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */\n  submodules: SubmoduleConnection;\n  /**\n   * Returns a URL to download a tarball archive for a repository.\n   * Note: For private repositories, these links are temporary and expire after five minutes.\n   */\n  tarballUrl: Scalars['URI'];\n  /** Commit's root Tree */\n  tree: Tree;\n  /** The HTTP path for the tree of this commit */\n  treeResourcePath: Scalars['URI'];\n  /** The HTTP URL for the tree of this commit */\n  treeUrl: Scalars['URI'];\n  /** The HTTP URL for this commit */\n  url: Scalars['URI'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n  /**\n   * Returns a URL to download a zipball archive for a repository.\n   * Note: For private repositories, these links are temporary and expire after five minutes.\n   */\n  zipballUrl: Scalars['URI'];\n};\n\n\n/** Represents a Git commit. */\nexport type CommitAssociatedPullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PullRequestOrder>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitAuthorsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitBlameArgs = {\n  path: Scalars['String'];\n};\n\n\n/** Represents a Git commit. */\nexport type CommitCheckSuitesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  filterBy?: InputMaybe<CheckSuiteFilter>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitDeploymentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  environments?: InputMaybe<Array<Scalars['String']>>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<DeploymentOrder>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitFileArgs = {\n  path: Scalars['String'];\n};\n\n\n/** Represents a Git commit. */\nexport type CommitHistoryArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  author?: InputMaybe<CommitAuthor>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  path?: InputMaybe<Scalars['String']>;\n  since?: InputMaybe<Scalars['GitTimestamp']>;\n  until?: InputMaybe<Scalars['GitTimestamp']>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitParentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitSubmodulesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** Specifies an author for filtering Git commits. */\nexport type CommitAuthor = {\n  /** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */\n  emails?: InputMaybe<Array<Scalars['String']>>;\n  /** ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails. */\n  id?: InputMaybe<Scalars['ID']>;\n};\n\n/** Represents a comment on a given Commit. */\nexport type CommitComment = Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment & {\n  __typename?: 'CommitComment';\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** Identifies the comment body. */\n  body: Scalars['String'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String'];\n  /** Identifies the commit associated with the comment, if the commit exists. */\n  commit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  id: Scalars['ID'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean'];\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']>;\n  /** Returns why the comment was minimized. */\n  minimizedReason?: Maybe<Scalars['String']>;\n  /** Identifies the file path associated with the comment. */\n  path?: Maybe<Scalars['String']>;\n  /** Identifies the line position associated with the comment. */\n  position?: Maybe<Scalars['Int']>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The HTTP path permalink for this commit comment. */\n  resourcePath: Scalars['URI'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL permalink for this commit comment. */\n  url: Scalars['URI'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean'];\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean'];\n};\n\n\n/** Represents a comment on a given Commit. */\nexport type CommitCommentReactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** Represents a comment on a given Commit. */\nexport type CommitCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for CommitComment. */\nexport type CommitCommentConnection = {\n  __typename?: 'CommitCommentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommitCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CommitComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CommitCommentEdge = {\n  __typename?: 'CommitCommentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CommitComment>;\n};\n\n/** A thread of comments on a commit. */\nexport type CommitCommentThread = Node & RepositoryNode & {\n  __typename?: 'CommitCommentThread';\n  /** The comments that exist in this thread. */\n  comments: CommitCommentConnection;\n  /** The commit the comments were made on. */\n  commit?: Maybe<Commit>;\n  id: Scalars['ID'];\n  /** The file the comments were made on. */\n  path?: Maybe<Scalars['String']>;\n  /** The position in the diff for the commit that the comment was made on. */\n  position?: Maybe<Scalars['Int']>;\n  /** The repository associated with this node. */\n  repository: Repository;\n};\n\n\n/** A thread of comments on a commit. */\nexport type CommitCommentThreadCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for Commit. */\nexport type CommitConnection = {\n  __typename?: 'CommitConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommitEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Commit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Ordering options for commit contribution connections. */\nexport type CommitContributionOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field by which to order commit contributions. */\n  field: CommitContributionOrderField;\n};\n\n/** Properties by which commit contribution connections can be ordered. */\nexport enum CommitContributionOrderField {\n  /** Order commit contributions by how many commits they represent. */\n  CommitCount = 'COMMIT_COUNT',\n  /** Order commit contributions by when they were made. */\n  OccurredAt = 'OCCURRED_AT'\n}\n\n/** This aggregates commits made by a user within one repository. */\nexport type CommitContributionsByRepository = {\n  __typename?: 'CommitContributionsByRepository';\n  /** The commit contributions, each representing a day. */\n  contributions: CreatedCommitContributionConnection;\n  /** The repository in which the commits were made. */\n  repository: Repository;\n  /** The HTTP path for the user's commits to the repository in this time range. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for the user's commits to the repository in this time range. */\n  url: Scalars['URI'];\n};\n\n\n/** This aggregates commits made by a user within one repository. */\nexport type CommitContributionsByRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<CommitContributionOrder>;\n};\n\n/** An edge in a connection. */\nexport type CommitEdge = {\n  __typename?: 'CommitEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Commit>;\n};\n\n/** The connection type for Commit. */\nexport type CommitHistoryConnection = {\n  __typename?: 'CommitHistoryConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommitEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Commit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A message to include with a new commit */\nexport type CommitMessage = {\n  /** The body of the message. */\n  body?: InputMaybe<Scalars['String']>;\n  /** The headline of the message. */\n  headline: Scalars['String'];\n};\n\n/**\n * A git ref for a commit to be appended to.\n *\n * The ref must be a branch, i.e. its fully qualified name must start\n * with `refs/heads/` (although the input is not required to be fully\n * qualified).\n *\n * The Ref may be specified by its global node ID or by the\n * repository nameWithOwner and branch name.\n *\n * ### Examples\n *\n * Specify a branch using a global node ID:\n *\n *     { \"id\": \"MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=\" }\n *\n * Specify a branch using nameWithOwner and branch name:\n *\n *     {\n *       \"nameWithOwner\": \"github/graphql-client\",\n *       \"branchName\": \"main\"\n *     }\n *\n *\n */\nexport type CommittableBranch = {\n  /** The unqualified name of the branch to append the commit to. */\n  branchName?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the Ref to be updated. */\n  id?: InputMaybe<Scalars['ID']>;\n  /** The nameWithOwner of the repository to commit to. */\n  repositoryNameWithOwner?: InputMaybe<Scalars['String']>;\n};\n\n/** Represents a 'connected' event on a given issue or pull request. */\nexport type ConnectedEvent = Node & {\n  __typename?: 'ConnectedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Reference originated in a different repository. */\n  isCrossRepository: Scalars['Boolean'];\n  /** Issue or pull request that made the reference. */\n  source: ReferencedSubject;\n  /** Issue or pull request which was connected. */\n  subject: ReferencedSubject;\n};\n\n/** Represents a contribution a user made on GitHub, such as opening an issue. */\nexport type Contribution = {\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   *\n   */\n  isRestricted: Scalars['Boolean'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime'];\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI'];\n  /**\n   * The user who made this contribution.\n   *\n   */\n  user: User;\n};\n\n/** A calendar of contributions made on GitHub by a user. */\nexport type ContributionCalendar = {\n  __typename?: 'ContributionCalendar';\n  /** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */\n  colors: Array<Scalars['String']>;\n  /** Determine if the color set was chosen because it's currently Halloween. */\n  isHalloween: Scalars['Boolean'];\n  /** A list of the months of contributions in this calendar. */\n  months: Array<ContributionCalendarMonth>;\n  /** The count of total contributions in the calendar. */\n  totalContributions: Scalars['Int'];\n  /** A list of the weeks of contributions in this calendar. */\n  weeks: Array<ContributionCalendarWeek>;\n};\n\n/** Represents a single day of contributions on GitHub by a user. */\nexport type ContributionCalendarDay = {\n  __typename?: 'ContributionCalendarDay';\n  /** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */\n  color: Scalars['String'];\n  /** How many contributions were made by the user on this day. */\n  contributionCount: Scalars['Int'];\n  /** Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar. */\n  contributionLevel: ContributionLevel;\n  /** The day this square represents. */\n  date: Scalars['Date'];\n  /** A number representing which day of the week this square represents, e.g., 1 is Monday. */\n  weekday: Scalars['Int'];\n};\n\n/** A month of contributions in a user's contribution graph. */\nexport type ContributionCalendarMonth = {\n  __typename?: 'ContributionCalendarMonth';\n  /** The date of the first day of this month. */\n  firstDay: Scalars['Date'];\n  /** The name of the month. */\n  name: Scalars['String'];\n  /** How many weeks started in this month. */\n  totalWeeks: Scalars['Int'];\n  /** The year the month occurred in. */\n  year: Scalars['Int'];\n};\n\n/** A week of contributions in a user's contribution graph. */\nexport type ContributionCalendarWeek = {\n  __typename?: 'ContributionCalendarWeek';\n  /** The days of contributions in this week. */\n  contributionDays: Array<ContributionCalendarDay>;\n  /** The date of the earliest square in this week. */\n  firstDay: Scalars['Date'];\n};\n\n/** Varying levels of contributions from none to many. */\nexport enum ContributionLevel {\n  /** Lowest 25% of days of contributions. */\n  FirstQuartile = 'FIRST_QUARTILE',\n  /** Highest 25% of days of contributions. More contributions than the third quartile. */\n  FourthQuartile = 'FOURTH_QUARTILE',\n  /** No contributions occurred. */\n  None = 'NONE',\n  /** Second lowest 25% of days of contributions. More contributions than the first quartile. */\n  SecondQuartile = 'SECOND_QUARTILE',\n  /** Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile. */\n  ThirdQuartile = 'THIRD_QUARTILE'\n}\n\n/** Ordering options for contribution connections. */\nexport type ContributionOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollection = {\n  __typename?: 'ContributionsCollection';\n  /** Commit contributions made by the user, grouped by repository. */\n  commitContributionsByRepository: Array<CommitContributionsByRepository>;\n  /** A calendar of this user's contributions on GitHub. */\n  contributionCalendar: ContributionCalendar;\n  /** The years the user has been making contributions with the most recent year first. */\n  contributionYears: Array<Scalars['Int']>;\n  /**\n   * Determine if this collection's time span ends in the current month.\n   *\n   */\n  doesEndInCurrentMonth: Scalars['Boolean'];\n  /** The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts. */\n  earliestRestrictedContributionDate?: Maybe<Scalars['Date']>;\n  /** The ending date and time of this collection. */\n  endedAt: Scalars['DateTime'];\n  /** The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned. */\n  firstIssueContribution?: Maybe<CreatedIssueOrRestrictedContribution>;\n  /** The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned. */\n  firstPullRequestContribution?: Maybe<CreatedPullRequestOrRestrictedContribution>;\n  /** The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned. */\n  firstRepositoryContribution?: Maybe<CreatedRepositoryOrRestrictedContribution>;\n  /** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */\n  hasActivityInThePast: Scalars['Boolean'];\n  /** Determine if there are any contributions in this collection. */\n  hasAnyContributions: Scalars['Boolean'];\n  /** Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts. */\n  hasAnyRestrictedContributions: Scalars['Boolean'];\n  /** Whether or not the collector's time span is all within the same day. */\n  isSingleDay: Scalars['Boolean'];\n  /** A list of issues the user opened. */\n  issueContributions: CreatedIssueContributionConnection;\n  /** Issue contributions made by the user, grouped by repository. */\n  issueContributionsByRepository: Array<IssueContributionsByRepository>;\n  /** When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false. */\n  joinedGitHubContribution?: Maybe<JoinedGitHubContribution>;\n  /** The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts. */\n  latestRestrictedContributionDate?: Maybe<Scalars['Date']>;\n  /**\n   * When this collection's time range does not include any activity from the user, use this\n   * to get a different collection from an earlier time range that does have activity.\n   *\n   */\n  mostRecentCollectionWithActivity?: Maybe<ContributionsCollection>;\n  /**\n   * Returns a different contributions collection from an earlier time range than this one\n   * that does not have any contributions.\n   *\n   */\n  mostRecentCollectionWithoutActivity?: Maybe<ContributionsCollection>;\n  /**\n   * The issue the user opened on GitHub that received the most comments in the specified\n   * time frame.\n   *\n   */\n  popularIssueContribution?: Maybe<CreatedIssueContribution>;\n  /**\n   * The pull request the user opened on GitHub that received the most comments in the\n   * specified time frame.\n   *\n   */\n  popularPullRequestContribution?: Maybe<CreatedPullRequestContribution>;\n  /** Pull request contributions made by the user. */\n  pullRequestContributions: CreatedPullRequestContributionConnection;\n  /** Pull request contributions made by the user, grouped by repository. */\n  pullRequestContributionsByRepository: Array<PullRequestContributionsByRepository>;\n  /** Pull request review contributions made by the user. */\n  pullRequestReviewContributions: CreatedPullRequestReviewContributionConnection;\n  /** Pull request review contributions made by the user, grouped by repository. */\n  pullRequestReviewContributionsByRepository: Array<PullRequestReviewContributionsByRepository>;\n  /** A list of repositories owned by the user that the user created in this time range. */\n  repositoryContributions: CreatedRepositoryContributionConnection;\n  /** A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts. */\n  restrictedContributionsCount: Scalars['Int'];\n  /** The beginning date and time of this collection. */\n  startedAt: Scalars['DateTime'];\n  /** How many commits were made by the user in this time span. */\n  totalCommitContributions: Scalars['Int'];\n  /** How many issues the user opened. */\n  totalIssueContributions: Scalars['Int'];\n  /** How many pull requests the user opened. */\n  totalPullRequestContributions: Scalars['Int'];\n  /** How many pull request reviews the user left. */\n  totalPullRequestReviewContributions: Scalars['Int'];\n  /** How many different repositories the user committed to. */\n  totalRepositoriesWithContributedCommits: Scalars['Int'];\n  /** How many different repositories the user opened issues in. */\n  totalRepositoriesWithContributedIssues: Scalars['Int'];\n  /** How many different repositories the user left pull request reviews in. */\n  totalRepositoriesWithContributedPullRequestReviews: Scalars['Int'];\n  /** How many different repositories the user opened pull requests in. */\n  totalRepositoriesWithContributedPullRequests: Scalars['Int'];\n  /** How many repositories the user created. */\n  totalRepositoryContributions: Scalars['Int'];\n  /** The user who made the contributions in this collection. */\n  user: User;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionCommitContributionsByRepositoryArgs = {\n  maxRepositories?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionIssueContributionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  excludeFirst?: InputMaybe<Scalars['Boolean']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionIssueContributionsByRepositoryArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']>;\n  maxRepositories?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionPullRequestContributionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  excludeFirst?: InputMaybe<Scalars['Boolean']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionPullRequestContributionsByRepositoryArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']>;\n  maxRepositories?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionPullRequestReviewContributionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionPullRequestReviewContributionsByRepositoryArgs = {\n  maxRepositories?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  excludeFirst?: InputMaybe<Scalars['Boolean']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalIssueContributionsArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalPullRequestContributionsArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalRepositoriesWithContributedIssuesArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalRepositoriesWithContributedPullRequestsArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalRepositoryContributionsArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** Autogenerated input type of ConvertProjectCardNoteToIssue */\nexport type ConvertProjectCardNoteToIssueInput = {\n  /** The body of the newly created issue. */\n  body?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ProjectCard ID to convert. */\n  projectCardId: Scalars['ID'];\n  /** The ID of the repository to create the issue in. */\n  repositoryId: Scalars['ID'];\n  /** The title of the newly created issue. Defaults to the card's note text. */\n  title?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ConvertProjectCardNoteToIssue */\nexport type ConvertProjectCardNoteToIssuePayload = {\n  __typename?: 'ConvertProjectCardNoteToIssuePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated ProjectCard. */\n  projectCard?: Maybe<ProjectCard>;\n};\n\n/** Autogenerated input type of ConvertPullRequestToDraft */\nexport type ConvertPullRequestToDraftInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** ID of the pull request to convert to draft */\n  pullRequestId: Scalars['ID'];\n};\n\n/** Autogenerated return type of ConvertPullRequestToDraft */\nexport type ConvertPullRequestToDraftPayload = {\n  __typename?: 'ConvertPullRequestToDraftPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The pull request that is now a draft. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'convert_to_draft' event on a given pull request. */\nexport type ConvertToDraftEvent = Node & UniformResourceLocatable & {\n  __typename?: 'ConvertToDraftEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** The HTTP path for this convert to draft event. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this convert to draft event. */\n  url: Scalars['URI'];\n};\n\n/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */\nexport type ConvertedNoteToIssueEvent = Node & {\n  __typename?: 'ConvertedNoteToIssueEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n/** Represents a 'converted_to_discussion' event on a given issue. */\nexport type ConvertedToDiscussionEvent = Node & {\n  __typename?: 'ConvertedToDiscussionEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The discussion that the issue was converted into. */\n  discussion?: Maybe<Discussion>;\n  id: Scalars['ID'];\n};\n\n/** Autogenerated input type of CreateBranchProtectionRule */\nexport type CreateBranchProtectionRuleInput = {\n  /** Can this branch be deleted. */\n  allowsDeletions?: InputMaybe<Scalars['Boolean']>;\n  /** Are force pushes allowed on this branch. */\n  allowsForcePushes?: InputMaybe<Scalars['Boolean']>;\n  /** A list of User or Team IDs allowed to bypass force push targeting matching branches. */\n  bypassForcePushActorIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** A list of User or Team IDs allowed to bypass pull requests targeting matching branches. */\n  bypassPullRequestActorIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Will new commits pushed to matching branches dismiss pull request review approvals. */\n  dismissesStaleReviews?: InputMaybe<Scalars['Boolean']>;\n  /** Can admins overwrite branch protection. */\n  isAdminEnforced?: InputMaybe<Scalars['Boolean']>;\n  /** The glob-like pattern used to determine matching branches. */\n  pattern: Scalars['String'];\n  /** A list of User, Team or App IDs allowed to push to matching branches. */\n  pushActorIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** The global relay id of the repository in which a new branch protection rule should be created in. */\n  repositoryId: Scalars['ID'];\n  /** Number of approving reviews required to update matching branches. */\n  requiredApprovingReviewCount?: InputMaybe<Scalars['Int']>;\n  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */\n  requiredStatusCheckContexts?: InputMaybe<Array<Scalars['String']>>;\n  /** The list of required status checks */\n  requiredStatusChecks?: InputMaybe<Array<RequiredStatusCheckInput>>;\n  /** Are approving reviews required to update matching branches. */\n  requiresApprovingReviews?: InputMaybe<Scalars['Boolean']>;\n  /** Are reviews from code owners required to update matching branches. */\n  requiresCodeOwnerReviews?: InputMaybe<Scalars['Boolean']>;\n  /** Are commits required to be signed. */\n  requiresCommitSignatures?: InputMaybe<Scalars['Boolean']>;\n  /** Are conversations required to be resolved before merging. */\n  requiresConversationResolution?: InputMaybe<Scalars['Boolean']>;\n  /** Are merge commits prohibited from being pushed to this branch. */\n  requiresLinearHistory?: InputMaybe<Scalars['Boolean']>;\n  /** Are status checks required to update matching branches. */\n  requiresStatusChecks?: InputMaybe<Scalars['Boolean']>;\n  /** Are branches required to be up to date before merging. */\n  requiresStrictStatusChecks?: InputMaybe<Scalars['Boolean']>;\n  /** Is pushing to matching branches restricted. */\n  restrictsPushes?: InputMaybe<Scalars['Boolean']>;\n  /** Is dismissal of pull request reviews restricted. */\n  restrictsReviewDismissals?: InputMaybe<Scalars['Boolean']>;\n  /** A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches. */\n  reviewDismissalActorIds?: InputMaybe<Array<Scalars['ID']>>;\n};\n\n/** Autogenerated return type of CreateBranchProtectionRule */\nexport type CreateBranchProtectionRulePayload = {\n  __typename?: 'CreateBranchProtectionRulePayload';\n  /** The newly created BranchProtectionRule. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of CreateCheckRun */\nexport type CreateCheckRunInput = {\n  /** Possible further actions the integrator can perform, which a user may trigger. */\n  actions?: InputMaybe<Array<CheckRunAction>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The time that the check run finished. */\n  completedAt?: InputMaybe<Scalars['DateTime']>;\n  /** The final conclusion of the check. */\n  conclusion?: InputMaybe<CheckConclusionState>;\n  /** The URL of the integrator's site that has the full details of the check. */\n  detailsUrl?: InputMaybe<Scalars['URI']>;\n  /** A reference for the run on the integrator's system. */\n  externalId?: InputMaybe<Scalars['String']>;\n  /** The SHA of the head commit. */\n  headSha: Scalars['GitObjectID'];\n  /** The name of the check. */\n  name: Scalars['String'];\n  /** Descriptive details about the run. */\n  output?: InputMaybe<CheckRunOutput>;\n  /** The node ID of the repository. */\n  repositoryId: Scalars['ID'];\n  /** The time that the check run began. */\n  startedAt?: InputMaybe<Scalars['DateTime']>;\n  /** The current status. */\n  status?: InputMaybe<RequestableCheckStatusState>;\n};\n\n/** Autogenerated return type of CreateCheckRun */\nexport type CreateCheckRunPayload = {\n  __typename?: 'CreateCheckRunPayload';\n  /** The newly created check run. */\n  checkRun?: Maybe<CheckRun>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of CreateCheckSuite */\nexport type CreateCheckSuiteInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The SHA of the head commit. */\n  headSha: Scalars['GitObjectID'];\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of CreateCheckSuite */\nexport type CreateCheckSuitePayload = {\n  __typename?: 'CreateCheckSuitePayload';\n  /** The newly created check suite. */\n  checkSuite?: Maybe<CheckSuite>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of CreateCommitOnBranch */\nexport type CreateCommitOnBranchInput = {\n  /** The Ref to be updated.  Must be a branch. */\n  branch: CommittableBranch;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The git commit oid expected at the head of the branch prior to the commit */\n  expectedHeadOid: Scalars['GitObjectID'];\n  /** A description of changes to files in this commit. */\n  fileChanges?: InputMaybe<FileChanges>;\n  /** The commit message the be included with the commit. */\n  message: CommitMessage;\n};\n\n/** Autogenerated return type of CreateCommitOnBranch */\nexport type CreateCommitOnBranchPayload = {\n  __typename?: 'CreateCommitOnBranchPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The new commit. */\n  commit?: Maybe<Commit>;\n  /** The ref which has been updated to point to the new commit. */\n  ref?: Maybe<Ref>;\n};\n\n/** Autogenerated input type of CreateDiscussion */\nexport type CreateDiscussionInput = {\n  /** The body of the discussion. */\n  body: Scalars['String'];\n  /** The id of the discussion category to associate with this discussion. */\n  categoryId: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The id of the repository on which to create the discussion. */\n  repositoryId: Scalars['ID'];\n  /** The title of the discussion. */\n  title: Scalars['String'];\n};\n\n/** Autogenerated return type of CreateDiscussion */\nexport type CreateDiscussionPayload = {\n  __typename?: 'CreateDiscussionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The discussion that was just created. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of CreateEnterpriseOrganization */\nexport type CreateEnterpriseOrganizationInput = {\n  /** The logins for the administrators of the new organization. */\n  adminLogins: Array<Scalars['String']>;\n  /** The email used for sending billing receipts. */\n  billingEmail: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise owning the new organization. */\n  enterpriseId: Scalars['ID'];\n  /** The login of the new organization. */\n  login: Scalars['String'];\n  /** The profile name of the new organization. */\n  profileName: Scalars['String'];\n};\n\n/** Autogenerated return type of CreateEnterpriseOrganization */\nexport type CreateEnterpriseOrganizationPayload = {\n  __typename?: 'CreateEnterpriseOrganizationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise that owns the created organization. */\n  enterprise?: Maybe<Enterprise>;\n  /** The organization that was created. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of CreateEnvironment */\nexport type CreateEnvironmentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The name of the environment. */\n  name: Scalars['String'];\n  /** The node ID of the repository. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of CreateEnvironment */\nexport type CreateEnvironmentPayload = {\n  __typename?: 'CreateEnvironmentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The new or existing environment. */\n  environment?: Maybe<Environment>;\n};\n\n/** Autogenerated input type of CreateIpAllowListEntry */\nexport type CreateIpAllowListEntryInput = {\n  /** An IP address or range of addresses in CIDR notation. */\n  allowListValue: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Whether the IP allow list entry is active when an IP allow list is enabled. */\n  isActive: Scalars['Boolean'];\n  /** An optional name for the IP allow list entry. */\n  name?: InputMaybe<Scalars['String']>;\n  /** The ID of the owner for which to create the new IP allow list entry. */\n  ownerId: Scalars['ID'];\n};\n\n/** Autogenerated return type of CreateIpAllowListEntry */\nexport type CreateIpAllowListEntryPayload = {\n  __typename?: 'CreateIpAllowListEntryPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The IP allow list entry that was created. */\n  ipAllowListEntry?: Maybe<IpAllowListEntry>;\n};\n\n/** Autogenerated input type of CreateIssue */\nexport type CreateIssueInput = {\n  /** The Node ID for the user assignee for this issue. */\n  assigneeIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** The body for the issue description. */\n  body?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */\n  issueTemplate?: InputMaybe<Scalars['String']>;\n  /** An array of Node IDs of labels for this issue. */\n  labelIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** The Node ID of the milestone for this issue. */\n  milestoneId?: InputMaybe<Scalars['ID']>;\n  /** An array of Node IDs for projects associated with this issue. */\n  projectIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID'];\n  /** The title for the issue. */\n  title: Scalars['String'];\n};\n\n/** Autogenerated return type of CreateIssue */\nexport type CreateIssuePayload = {\n  __typename?: 'CreateIssuePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The new issue. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of CreateMigrationSource */\nexport type CreateMigrationSourceInput = {\n  /** The Octoshift migration source access token. */\n  accessToken?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The GitHub personal access token of the user importing to the target repository. */\n  githubPat?: InputMaybe<Scalars['String']>;\n  /** The Octoshift migration source name. */\n  name: Scalars['String'];\n  /** The ID of the organization that will own the Octoshift migration source. */\n  ownerId: Scalars['ID'];\n  /** The Octoshift migration source type. */\n  type: MigrationSourceType;\n  /** The Octoshift migration source URL. */\n  url: Scalars['String'];\n};\n\n/** Autogenerated return type of CreateMigrationSource */\nexport type CreateMigrationSourcePayload = {\n  __typename?: 'CreateMigrationSourcePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The created Octoshift migration source. */\n  migrationSource?: Maybe<MigrationSource>;\n};\n\n/** Autogenerated input type of CreateProject */\nexport type CreateProjectInput = {\n  /** The description of project. */\n  body?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The name of project. */\n  name: Scalars['String'];\n  /** The owner ID to create the project under. */\n  ownerId: Scalars['ID'];\n  /** A list of repository IDs to create as linked repositories for the project */\n  repositoryIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** The name of the GitHub-provided template. */\n  template?: InputMaybe<ProjectTemplate>;\n};\n\n/** Autogenerated return type of CreateProject */\nexport type CreateProjectPayload = {\n  __typename?: 'CreateProjectPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The new project. */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of CreatePullRequest */\nexport type CreatePullRequestInput = {\n  /**\n   * The name of the branch you want your changes pulled into. This should be an existing branch\n   * on the current repository. You cannot update the base branch on a pull request to point\n   * to another repository.\n   *\n   */\n  baseRefName: Scalars['String'];\n  /** The contents of the pull request. */\n  body?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Indicates whether this pull request should be a draft. */\n  draft?: InputMaybe<Scalars['Boolean']>;\n  /**\n   * The name of the branch where your changes are implemented. For cross-repository pull requests\n   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.\n   *\n   */\n  headRefName: Scalars['String'];\n  /** Indicates whether maintainers can modify the pull request. */\n  maintainerCanModify?: InputMaybe<Scalars['Boolean']>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID'];\n  /** The title of the pull request. */\n  title: Scalars['String'];\n};\n\n/** Autogenerated return type of CreatePullRequest */\nexport type CreatePullRequestPayload = {\n  __typename?: 'CreatePullRequestPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The new pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of CreateRef */\nexport type CreateRefInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */\n  name: Scalars['String'];\n  /** The GitObjectID that the new Ref shall target. Must point to a commit. */\n  oid: Scalars['GitObjectID'];\n  /** The Node ID of the Repository to create the Ref in. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of CreateRef */\nexport type CreateRefPayload = {\n  __typename?: 'CreateRefPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The newly created ref. */\n  ref?: Maybe<Ref>;\n};\n\n/** Autogenerated input type of CreateRepository */\nexport type CreateRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** A short description of the new repository. */\n  description?: InputMaybe<Scalars['String']>;\n  /** Indicates if the repository should have the issues feature enabled. */\n  hasIssuesEnabled?: InputMaybe<Scalars['Boolean']>;\n  /** Indicates if the repository should have the wiki feature enabled. */\n  hasWikiEnabled?: InputMaybe<Scalars['Boolean']>;\n  /** The URL for a web page about this repository. */\n  homepageUrl?: InputMaybe<Scalars['URI']>;\n  /** The name of the new repository. */\n  name: Scalars['String'];\n  /** The ID of the owner for the new repository. */\n  ownerId?: InputMaybe<Scalars['ID']>;\n  /** When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository. */\n  teamId?: InputMaybe<Scalars['ID']>;\n  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */\n  template?: InputMaybe<Scalars['Boolean']>;\n  /** Indicates the repository's visibility level. */\n  visibility: RepositoryVisibility;\n};\n\n/** Autogenerated return type of CreateRepository */\nexport type CreateRepositoryPayload = {\n  __typename?: 'CreateRepositoryPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The new repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of CreateSponsorsTier */\nexport type CreateSponsorsTierInput = {\n  /** The value of the new tier in US dollars. Valid values: 1-12000. */\n  amount: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */\n  description: Scalars['String'];\n  /** Whether sponsorships using this tier should happen monthly/yearly or just once. */\n  isRecurring?: InputMaybe<Scalars['Boolean']>;\n  /** Whether to make the tier available immediately for sponsors to choose. Defaults to creating a draft tier that will not be publicly visible. */\n  publish?: InputMaybe<Scalars['Boolean']>;\n  /** Optional ID of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. */\n  repositoryId?: InputMaybe<Scalars['ID']>;\n  /** Optional name of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. Necessary if repositoryOwnerLogin is given. Will be ignored if repositoryId is given. */\n  repositoryName?: InputMaybe<Scalars['String']>;\n  /** Optional login of the organization owner of the private repository that sponsors at this tier should gain read-only access to. Necessary if repositoryName is given. Will be ignored if repositoryId is given. */\n  repositoryOwnerLogin?: InputMaybe<Scalars['String']>;\n  /** The ID of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableLogin is not given. */\n  sponsorableId?: InputMaybe<Scalars['ID']>;\n  /** The username of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableId is not given. */\n  sponsorableLogin?: InputMaybe<Scalars['String']>;\n  /** Optional message new sponsors at this tier will receive. */\n  welcomeMessage?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateSponsorsTier */\nexport type CreateSponsorsTierPayload = {\n  __typename?: 'CreateSponsorsTierPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The new tier. */\n  sponsorsTier?: Maybe<SponsorsTier>;\n};\n\n/** Autogenerated input type of CreateSponsorship */\nexport type CreateSponsorshipInput = {\n  /** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */\n  amount?: InputMaybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */\n  isRecurring?: InputMaybe<Scalars['Boolean']>;\n  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */\n  privacyLevel?: InputMaybe<SponsorshipPrivacy>;\n  /** Whether the sponsor should receive email updates from the sponsorable. */\n  receiveEmails?: InputMaybe<Scalars['Boolean']>;\n  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */\n  sponsorId?: InputMaybe<Scalars['ID']>;\n  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */\n  sponsorLogin?: InputMaybe<Scalars['String']>;\n  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */\n  sponsorableId?: InputMaybe<Scalars['ID']>;\n  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */\n  sponsorableLogin?: InputMaybe<Scalars['String']>;\n  /** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */\n  tierId?: InputMaybe<Scalars['ID']>;\n};\n\n/** Autogenerated return type of CreateSponsorship */\nexport type CreateSponsorshipPayload = {\n  __typename?: 'CreateSponsorshipPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The sponsorship that was started. */\n  sponsorship?: Maybe<Sponsorship>;\n};\n\n/** Autogenerated input type of CreateTeamDiscussionComment */\nexport type CreateTeamDiscussionCommentInput = {\n  /** The content of the comment. */\n  body: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the discussion to which the comment belongs. */\n  discussionId: Scalars['ID'];\n};\n\n/** Autogenerated return type of CreateTeamDiscussionComment */\nexport type CreateTeamDiscussionCommentPayload = {\n  __typename?: 'CreateTeamDiscussionCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The new comment. */\n  teamDiscussionComment?: Maybe<TeamDiscussionComment>;\n};\n\n/** Autogenerated input type of CreateTeamDiscussion */\nexport type CreateTeamDiscussionInput = {\n  /** The content of the discussion. */\n  body: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion. */\n  private?: InputMaybe<Scalars['Boolean']>;\n  /** The ID of the team to which the discussion belongs. */\n  teamId: Scalars['ID'];\n  /** The title of the discussion. */\n  title: Scalars['String'];\n};\n\n/** Autogenerated return type of CreateTeamDiscussion */\nexport type CreateTeamDiscussionPayload = {\n  __typename?: 'CreateTeamDiscussionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The new discussion. */\n  teamDiscussion?: Maybe<TeamDiscussion>;\n};\n\n/** Represents the contribution a user made by committing to a repository. */\nexport type CreatedCommitContribution = Contribution & {\n  __typename?: 'CreatedCommitContribution';\n  /** How many commits were made on this day to this repository by the user. */\n  commitCount: Scalars['Int'];\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   *\n   */\n  isRestricted: Scalars['Boolean'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime'];\n  /** The repository the user made a commit in. */\n  repository: Repository;\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI'];\n  /**\n   * The user who made this contribution.\n   *\n   */\n  user: User;\n};\n\n/** The connection type for CreatedCommitContribution. */\nexport type CreatedCommitContributionConnection = {\n  __typename?: 'CreatedCommitContributionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedCommitContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedCommitContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * Identifies the total count of commits across days and repositories in the connection.\n   *\n   */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CreatedCommitContributionEdge = {\n  __typename?: 'CreatedCommitContributionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedCommitContribution>;\n};\n\n/** Represents the contribution a user made on GitHub by opening an issue. */\nexport type CreatedIssueContribution = Contribution & {\n  __typename?: 'CreatedIssueContribution';\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   *\n   */\n  isRestricted: Scalars['Boolean'];\n  /** The issue that was opened. */\n  issue: Issue;\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime'];\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI'];\n  /**\n   * The user who made this contribution.\n   *\n   */\n  user: User;\n};\n\n/** The connection type for CreatedIssueContribution. */\nexport type CreatedIssueContributionConnection = {\n  __typename?: 'CreatedIssueContributionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedIssueContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedIssueContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CreatedIssueContributionEdge = {\n  __typename?: 'CreatedIssueContributionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedIssueContribution>;\n};\n\n/** Represents either a issue the viewer can access or a restricted contribution. */\nexport type CreatedIssueOrRestrictedContribution = CreatedIssueContribution | RestrictedContribution;\n\n/** Represents the contribution a user made on GitHub by opening a pull request. */\nexport type CreatedPullRequestContribution = Contribution & {\n  __typename?: 'CreatedPullRequestContribution';\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   *\n   */\n  isRestricted: Scalars['Boolean'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime'];\n  /** The pull request that was opened. */\n  pullRequest: PullRequest;\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI'];\n  /**\n   * The user who made this contribution.\n   *\n   */\n  user: User;\n};\n\n/** The connection type for CreatedPullRequestContribution. */\nexport type CreatedPullRequestContributionConnection = {\n  __typename?: 'CreatedPullRequestContributionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedPullRequestContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedPullRequestContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CreatedPullRequestContributionEdge = {\n  __typename?: 'CreatedPullRequestContributionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedPullRequestContribution>;\n};\n\n/** Represents either a pull request the viewer can access or a restricted contribution. */\nexport type CreatedPullRequestOrRestrictedContribution = CreatedPullRequestContribution | RestrictedContribution;\n\n/** Represents the contribution a user made by leaving a review on a pull request. */\nexport type CreatedPullRequestReviewContribution = Contribution & {\n  __typename?: 'CreatedPullRequestReviewContribution';\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   *\n   */\n  isRestricted: Scalars['Boolean'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime'];\n  /** The pull request the user reviewed. */\n  pullRequest: PullRequest;\n  /** The review the user left on the pull request. */\n  pullRequestReview: PullRequestReview;\n  /** The repository containing the pull request that the user reviewed. */\n  repository: Repository;\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI'];\n  /**\n   * The user who made this contribution.\n   *\n   */\n  user: User;\n};\n\n/** The connection type for CreatedPullRequestReviewContribution. */\nexport type CreatedPullRequestReviewContributionConnection = {\n  __typename?: 'CreatedPullRequestReviewContributionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedPullRequestReviewContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedPullRequestReviewContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CreatedPullRequestReviewContributionEdge = {\n  __typename?: 'CreatedPullRequestReviewContributionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedPullRequestReviewContribution>;\n};\n\n/** Represents the contribution a user made on GitHub by creating a repository. */\nexport type CreatedRepositoryContribution = Contribution & {\n  __typename?: 'CreatedRepositoryContribution';\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   *\n   */\n  isRestricted: Scalars['Boolean'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime'];\n  /** The repository that was created. */\n  repository: Repository;\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI'];\n  /**\n   * The user who made this contribution.\n   *\n   */\n  user: User;\n};\n\n/** The connection type for CreatedRepositoryContribution. */\nexport type CreatedRepositoryContributionConnection = {\n  __typename?: 'CreatedRepositoryContributionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedRepositoryContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedRepositoryContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CreatedRepositoryContributionEdge = {\n  __typename?: 'CreatedRepositoryContributionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedRepositoryContribution>;\n};\n\n/** Represents either a repository the viewer can access or a restricted contribution. */\nexport type CreatedRepositoryOrRestrictedContribution = CreatedRepositoryContribution | RestrictedContribution;\n\n/** Represents a mention made by one issue or pull request to another. */\nexport type CrossReferencedEvent = Node & UniformResourceLocatable & {\n  __typename?: 'CrossReferencedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Reference originated in a different repository. */\n  isCrossRepository: Scalars['Boolean'];\n  /** Identifies when the reference was made. */\n  referencedAt: Scalars['DateTime'];\n  /** The HTTP path for this pull request. */\n  resourcePath: Scalars['URI'];\n  /** Issue or pull request that made the reference. */\n  source: ReferencedSubject;\n  /** Issue or pull request to which the reference was made. */\n  target: ReferencedSubject;\n  /** The HTTP URL for this pull request. */\n  url: Scalars['URI'];\n  /** Checks if the target will be closed when the source is merged. */\n  willCloseTarget: Scalars['Boolean'];\n};\n\n/** Autogenerated input type of DeclineTopicSuggestion */\nexport type DeclineTopicSuggestionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The name of the suggested topic. */\n  name: Scalars['String'];\n  /** The reason why the suggested topic is declined. */\n  reason: TopicSuggestionDeclineReason;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeclineTopicSuggestion */\nexport type DeclineTopicSuggestionPayload = {\n  __typename?: 'DeclineTopicSuggestionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The declined topic. */\n  topic?: Maybe<Topic>;\n};\n\n/** The possible base permissions for repositories. */\nexport enum DefaultRepositoryPermissionField {\n  /** Can read, write, and administrate repos by default */\n  Admin = 'ADMIN',\n  /** No access */\n  None = 'NONE',\n  /** Can read repos by default */\n  Read = 'READ',\n  /** Can read and write repos by default */\n  Write = 'WRITE'\n}\n\n/** Entities that can be deleted. */\nexport type Deletable = {\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean'];\n};\n\n/** Autogenerated input type of DeleteBranchProtectionRule */\nexport type DeleteBranchProtectionRuleInput = {\n  /** The global relay id of the branch protection rule to be deleted. */\n  branchProtectionRuleId: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteBranchProtectionRule */\nexport type DeleteBranchProtectionRulePayload = {\n  __typename?: 'DeleteBranchProtectionRulePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of DeleteDeployment */\nexport type DeleteDeploymentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the deployment to be deleted. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteDeployment */\nexport type DeleteDeploymentPayload = {\n  __typename?: 'DeleteDeploymentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of DeleteDiscussionComment */\nexport type DeleteDiscussionCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node id of the discussion comment to delete. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteDiscussionComment */\nexport type DeleteDiscussionCommentPayload = {\n  __typename?: 'DeleteDiscussionCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The discussion comment that was just deleted. */\n  comment?: Maybe<DiscussionComment>;\n};\n\n/** Autogenerated input type of DeleteDiscussion */\nexport type DeleteDiscussionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The id of the discussion to delete. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteDiscussion */\nexport type DeleteDiscussionPayload = {\n  __typename?: 'DeleteDiscussionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The discussion that was just deleted. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of DeleteEnvironment */\nexport type DeleteEnvironmentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the environment to be deleted. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteEnvironment */\nexport type DeleteEnvironmentPayload = {\n  __typename?: 'DeleteEnvironmentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of DeleteIpAllowListEntry */\nexport type DeleteIpAllowListEntryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the IP allow list entry to delete. */\n  ipAllowListEntryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteIpAllowListEntry */\nexport type DeleteIpAllowListEntryPayload = {\n  __typename?: 'DeleteIpAllowListEntryPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The IP allow list entry that was deleted. */\n  ipAllowListEntry?: Maybe<IpAllowListEntry>;\n};\n\n/** Autogenerated input type of DeleteIssueComment */\nexport type DeleteIssueCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the comment to delete. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteIssueComment */\nexport type DeleteIssueCommentPayload = {\n  __typename?: 'DeleteIssueCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of DeleteIssue */\nexport type DeleteIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the issue to delete. */\n  issueId: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteIssue */\nexport type DeleteIssuePayload = {\n  __typename?: 'DeleteIssuePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The repository the issue belonged to */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of DeleteProjectCard */\nexport type DeleteProjectCardInput = {\n  /** The id of the card to delete. */\n  cardId: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteProjectCard */\nexport type DeleteProjectCardPayload = {\n  __typename?: 'DeleteProjectCardPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The column the deleted card was in. */\n  column?: Maybe<ProjectColumn>;\n  /** The deleted card ID. */\n  deletedCardId?: Maybe<Scalars['ID']>;\n};\n\n/** Autogenerated input type of DeleteProjectColumn */\nexport type DeleteProjectColumnInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The id of the column to delete. */\n  columnId: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteProjectColumn */\nexport type DeleteProjectColumnPayload = {\n  __typename?: 'DeleteProjectColumnPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The deleted column ID. */\n  deletedColumnId?: Maybe<Scalars['ID']>;\n  /** The project the deleted column was in. */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of DeleteProject */\nexport type DeleteProjectInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Project ID to update. */\n  projectId: Scalars['ID'];\n};\n\n/** Autogenerated input type of DeleteProjectNextItem */\nexport type DeleteProjectNextItemInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the item to be removed. */\n  itemId: Scalars['ID'];\n  /** The ID of the Project from which the item should be removed. */\n  projectId: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteProjectNextItem */\nexport type DeleteProjectNextItemPayload = {\n  __typename?: 'DeleteProjectNextItemPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The ID of the deleted item. */\n  deletedItemId?: Maybe<Scalars['ID']>;\n};\n\n/** Autogenerated return type of DeleteProject */\nexport type DeleteProjectPayload = {\n  __typename?: 'DeleteProjectPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The repository or organization the project was removed from. */\n  owner?: Maybe<ProjectOwner>;\n};\n\n/** Autogenerated input type of DeletePullRequestReviewComment */\nexport type DeletePullRequestReviewCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the comment to delete. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeletePullRequestReviewComment */\nexport type DeletePullRequestReviewCommentPayload = {\n  __typename?: 'DeletePullRequestReviewCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The pull request review the deleted comment belonged to. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** Autogenerated input type of DeletePullRequestReview */\nexport type DeletePullRequestReviewInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the pull request review to delete. */\n  pullRequestReviewId: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeletePullRequestReview */\nexport type DeletePullRequestReviewPayload = {\n  __typename?: 'DeletePullRequestReviewPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The deleted pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** Autogenerated input type of DeleteRef */\nexport type DeleteRefInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the Ref to be deleted. */\n  refId: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteRef */\nexport type DeleteRefPayload = {\n  __typename?: 'DeleteRefPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of DeleteTeamDiscussionComment */\nexport type DeleteTeamDiscussionCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the comment to delete. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteTeamDiscussionComment */\nexport type DeleteTeamDiscussionCommentPayload = {\n  __typename?: 'DeleteTeamDiscussionCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of DeleteTeamDiscussion */\nexport type DeleteTeamDiscussionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The discussion ID to delete. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteTeamDiscussion */\nexport type DeleteTeamDiscussionPayload = {\n  __typename?: 'DeleteTeamDiscussionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of DeleteVerifiableDomain */\nexport type DeleteVerifiableDomainInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the verifiable domain to delete. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of DeleteVerifiableDomain */\nexport type DeleteVerifiableDomainPayload = {\n  __typename?: 'DeleteVerifiableDomainPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The owning account from which the domain was deleted. */\n  owner?: Maybe<VerifiableDomainOwner>;\n};\n\n/** Represents a 'demilestoned' event on a given issue or pull request. */\nexport type DemilestonedEvent = Node & {\n  __typename?: 'DemilestonedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Identifies the milestone title associated with the 'demilestoned' event. */\n  milestoneTitle: Scalars['String'];\n  /** Object referenced by event. */\n  subject: MilestoneItem;\n};\n\n/** The possible ecosystems of a dependency graph package. */\nexport enum DependencyGraphEcosystem {\n  /** GitHub Actions */\n  Actions = 'ACTIONS',\n  /** PHP packages hosted at packagist.org */\n  Composer = 'COMPOSER',\n  /** Go modules */\n  Go = 'GO',\n  /** Java artifacts hosted at the Maven central repository */\n  Maven = 'MAVEN',\n  /** JavaScript packages hosted at npmjs.com */\n  Npm = 'NPM',\n  /** .NET packages hosted at the NuGet Gallery */\n  Nuget = 'NUGET',\n  /** Python packages hosted at PyPI.org */\n  Pip = 'PIP',\n  /** Ruby gems hosted at RubyGems.org */\n  Rubygems = 'RUBYGEMS'\n}\n\n/** A repository deploy key. */\nexport type DeployKey = Node & {\n  __typename?: 'DeployKey';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** The deploy key. */\n  key: Scalars['String'];\n  /** Whether or not the deploy key is read only. */\n  readOnly: Scalars['Boolean'];\n  /** The deploy key title. */\n  title: Scalars['String'];\n  /** Whether or not the deploy key has been verified. */\n  verified: Scalars['Boolean'];\n};\n\n/** The connection type for DeployKey. */\nexport type DeployKeyConnection = {\n  __typename?: 'DeployKeyConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeployKeyEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeployKey>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type DeployKeyEdge = {\n  __typename?: 'DeployKeyEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeployKey>;\n};\n\n/** Represents a 'deployed' event on a given pull request. */\nexport type DeployedEvent = Node & {\n  __typename?: 'DeployedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The deployment associated with the 'deployed' event. */\n  deployment: Deployment;\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** The ref associated with the 'deployed' event. */\n  ref?: Maybe<Ref>;\n};\n\n/** Represents triggered deployment instance. */\nexport type Deployment = Node & {\n  __typename?: 'Deployment';\n  /** Identifies the commit sha of the deployment. */\n  commit?: Maybe<Commit>;\n  /** Identifies the oid of the deployment commit, even if the commit has been deleted. */\n  commitOid: Scalars['String'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the actor who triggered the deployment. */\n  creator: Actor;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The deployment description. */\n  description?: Maybe<Scalars['String']>;\n  /** The latest environment to which this deployment was made. */\n  environment?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** The latest environment to which this deployment was made. */\n  latestEnvironment?: Maybe<Scalars['String']>;\n  /** The latest status of this deployment. */\n  latestStatus?: Maybe<DeploymentStatus>;\n  /** The original environment to which this deployment was made. */\n  originalEnvironment?: Maybe<Scalars['String']>;\n  /** Extra information that a deployment system might need. */\n  payload?: Maybe<Scalars['String']>;\n  /** Identifies the Ref of the deployment, if the deployment was created by ref. */\n  ref?: Maybe<Ref>;\n  /** Identifies the repository associated with the deployment. */\n  repository: Repository;\n  /** The current state of the deployment. */\n  state?: Maybe<DeploymentState>;\n  /** A list of statuses associated with the deployment. */\n  statuses?: Maybe<DeploymentStatusConnection>;\n  /** The deployment task. */\n  task?: Maybe<Scalars['String']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n\n/** Represents triggered deployment instance. */\nexport type DeploymentStatusesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for Deployment. */\nexport type DeploymentConnection = {\n  __typename?: 'DeploymentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Deployment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type DeploymentEdge = {\n  __typename?: 'DeploymentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Deployment>;\n};\n\n/** Represents a 'deployment_environment_changed' event on a given pull request. */\nexport type DeploymentEnvironmentChangedEvent = Node & {\n  __typename?: 'DeploymentEnvironmentChangedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The deployment status that updated the deployment environment. */\n  deploymentStatus: DeploymentStatus;\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Ordering options for deployment connections */\nexport type DeploymentOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order deployments by. */\n  field: DeploymentOrderField;\n};\n\n/** Properties by which deployment connections can be ordered. */\nexport enum DeploymentOrderField {\n  /** Order collection by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** A protection rule. */\nexport type DeploymentProtectionRule = {\n  __typename?: 'DeploymentProtectionRule';\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The teams or users that can review the deployment */\n  reviewers: DeploymentReviewerConnection;\n  /** The timeout in minutes for this protection rule. */\n  timeout: Scalars['Int'];\n  /** The type of protection rule. */\n  type: DeploymentProtectionRuleType;\n};\n\n\n/** A protection rule. */\nexport type DeploymentProtectionRuleReviewersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for DeploymentProtectionRule. */\nexport type DeploymentProtectionRuleConnection = {\n  __typename?: 'DeploymentProtectionRuleConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentProtectionRuleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentProtectionRule>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type DeploymentProtectionRuleEdge = {\n  __typename?: 'DeploymentProtectionRuleEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentProtectionRule>;\n};\n\n/** The possible protection rule types. */\nexport enum DeploymentProtectionRuleType {\n  /** Required reviewers */\n  RequiredReviewers = 'REQUIRED_REVIEWERS',\n  /** Wait timer */\n  WaitTimer = 'WAIT_TIMER'\n}\n\n/** A request to deploy a workflow run to an environment. */\nexport type DeploymentRequest = {\n  __typename?: 'DeploymentRequest';\n  /** Whether or not the current user can approve the deployment */\n  currentUserCanApprove: Scalars['Boolean'];\n  /** The target environment of the deployment */\n  environment: Environment;\n  /** The teams or users that can review the deployment */\n  reviewers: DeploymentReviewerConnection;\n  /** The wait timer in minutes configured in the environment */\n  waitTimer: Scalars['Int'];\n  /** The wait timer in minutes configured in the environment */\n  waitTimerStartedAt?: Maybe<Scalars['DateTime']>;\n};\n\n\n/** A request to deploy a workflow run to an environment. */\nexport type DeploymentRequestReviewersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for DeploymentRequest. */\nexport type DeploymentRequestConnection = {\n  __typename?: 'DeploymentRequestConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentRequestEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentRequest>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type DeploymentRequestEdge = {\n  __typename?: 'DeploymentRequestEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentRequest>;\n};\n\n/** A deployment review. */\nexport type DeploymentReview = Node & {\n  __typename?: 'DeploymentReview';\n  /** The comment the user left. */\n  comment: Scalars['String'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The environments approved or rejected */\n  environments: EnvironmentConnection;\n  id: Scalars['ID'];\n  /** The decision of the user. */\n  state: DeploymentReviewState;\n  /** The user that reviewed the deployment. */\n  user: User;\n};\n\n\n/** A deployment review. */\nexport type DeploymentReviewEnvironmentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for DeploymentReview. */\nexport type DeploymentReviewConnection = {\n  __typename?: 'DeploymentReviewConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentReviewEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentReview>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type DeploymentReviewEdge = {\n  __typename?: 'DeploymentReviewEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentReview>;\n};\n\n/** The possible states for a deployment review. */\nexport enum DeploymentReviewState {\n  /** The deployment was approved. */\n  Approved = 'APPROVED',\n  /** The deployment was rejected. */\n  Rejected = 'REJECTED'\n}\n\n/** Users and teams. */\nexport type DeploymentReviewer = Team | User;\n\n/** The connection type for DeploymentReviewer. */\nexport type DeploymentReviewerConnection = {\n  __typename?: 'DeploymentReviewerConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentReviewerEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentReviewer>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type DeploymentReviewerEdge = {\n  __typename?: 'DeploymentReviewerEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentReviewer>;\n};\n\n/** The possible states in which a deployment can be. */\nexport enum DeploymentState {\n  /** The pending deployment was not updated after 30 minutes. */\n  Abandoned = 'ABANDONED',\n  /** The deployment is currently active. */\n  Active = 'ACTIVE',\n  /** An inactive transient deployment. */\n  Destroyed = 'DESTROYED',\n  /** The deployment experienced an error. */\n  Error = 'ERROR',\n  /** The deployment has failed. */\n  Failure = 'FAILURE',\n  /** The deployment is inactive. */\n  Inactive = 'INACTIVE',\n  /** The deployment is in progress. */\n  InProgress = 'IN_PROGRESS',\n  /** The deployment is pending. */\n  Pending = 'PENDING',\n  /** The deployment has queued */\n  Queued = 'QUEUED',\n  /** The deployment is waiting. */\n  Waiting = 'WAITING'\n}\n\n/** Describes the status of a given deployment attempt. */\nexport type DeploymentStatus = Node & {\n  __typename?: 'DeploymentStatus';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the actor who triggered the deployment. */\n  creator: Actor;\n  /** Identifies the deployment associated with status. */\n  deployment: Deployment;\n  /** Identifies the description of the deployment. */\n  description?: Maybe<Scalars['String']>;\n  /** Identifies the environment URL of the deployment. */\n  environmentUrl?: Maybe<Scalars['URI']>;\n  id: Scalars['ID'];\n  /** Identifies the log URL of the deployment. */\n  logUrl?: Maybe<Scalars['URI']>;\n  /** Identifies the current state of the deployment. */\n  state: DeploymentStatusState;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** The connection type for DeploymentStatus. */\nexport type DeploymentStatusConnection = {\n  __typename?: 'DeploymentStatusConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentStatusEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentStatus>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type DeploymentStatusEdge = {\n  __typename?: 'DeploymentStatusEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentStatus>;\n};\n\n/** The possible states for a deployment status. */\nexport enum DeploymentStatusState {\n  /** The deployment experienced an error. */\n  Error = 'ERROR',\n  /** The deployment has failed. */\n  Failure = 'FAILURE',\n  /** The deployment is inactive. */\n  Inactive = 'INACTIVE',\n  /** The deployment is in progress. */\n  InProgress = 'IN_PROGRESS',\n  /** The deployment is pending. */\n  Pending = 'PENDING',\n  /** The deployment is queued */\n  Queued = 'QUEUED',\n  /** The deployment was successful. */\n  Success = 'SUCCESS',\n  /** The deployment is waiting. */\n  Waiting = 'WAITING'\n}\n\n/** The possible sides of a diff. */\nexport enum DiffSide {\n  /** The left side of the diff. */\n  Left = 'LEFT',\n  /** The right side of the diff. */\n  Right = 'RIGHT'\n}\n\n/** Autogenerated input type of DisablePullRequestAutoMerge */\nexport type DisablePullRequestAutoMergeInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** ID of the pull request to disable auto merge on. */\n  pullRequestId: Scalars['ID'];\n};\n\n/** Autogenerated return type of DisablePullRequestAutoMerge */\nexport type DisablePullRequestAutoMergePayload = {\n  __typename?: 'DisablePullRequestAutoMergePayload';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The pull request auto merge was disabled on. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'disconnected' event on a given issue or pull request. */\nexport type DisconnectedEvent = Node & {\n  __typename?: 'DisconnectedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Reference originated in a different repository. */\n  isCrossRepository: Scalars['Boolean'];\n  /** Issue or pull request from which the issue was disconnected. */\n  source: ReferencedSubject;\n  /** Issue or pull request which was disconnected. */\n  subject: ReferencedSubject;\n};\n\n/** A discussion in a repository. */\nexport type Discussion = Comment & Deletable & Labelable & Lockable & Node & Reactable & RepositoryNode & Subscribable & Updatable & Votable & {\n  __typename?: 'Discussion';\n  /** Reason that the conversation was locked. */\n  activeLockReason?: Maybe<LockReason>;\n  /** The comment chosen as this discussion's answer, if any. */\n  answer?: Maybe<DiscussionComment>;\n  /** The time when a user chose this discussion's answer, if answered. */\n  answerChosenAt?: Maybe<Scalars['DateTime']>;\n  /** The user who chose this discussion's answer, if answered. */\n  answerChosenBy?: Maybe<Actor>;\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The main text of the discussion post. */\n  body: Scalars['String'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String'];\n  /** The category for this discussion. */\n  category: DiscussionCategory;\n  /** The replies to the discussion. */\n  comments: DiscussionCommentConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  id: Scalars['ID'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean'];\n  /** A list of labels associated with the object. */\n  labels?: Maybe<LabelConnection>;\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']>;\n  /** `true` if the object is locked */\n  locked: Scalars['Boolean'];\n  /** The number identifying this discussion within the repository. */\n  number: Scalars['Int'];\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The path for this discussion. */\n  resourcePath: Scalars['URI'];\n  /** The title of this discussion. */\n  title: Scalars['String'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** Number of upvotes that this subject has received. */\n  upvoteCount: Scalars['Int'];\n  /** The URL for this discussion. */\n  url: Scalars['URI'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n  /** Whether or not the current user can add or remove an upvote on this subject. */\n  viewerCanUpvote: Scalars['Boolean'];\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean'];\n  /** Whether or not the current user has already upvoted this subject. */\n  viewerHasUpvoted: Scalars['Boolean'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n};\n\n\n/** A discussion in a repository. */\nexport type DiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A discussion in a repository. */\nexport type DiscussionLabelsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n\n/** A discussion in a repository. */\nexport type DiscussionReactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A discussion in a repository. */\nexport type DiscussionUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A category for discussions in a repository. */\nexport type DiscussionCategory = Node & RepositoryNode & {\n  __typename?: 'DiscussionCategory';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** A description of this category. */\n  description?: Maybe<Scalars['String']>;\n  /** An emoji representing this category. */\n  emoji: Scalars['String'];\n  /** This category's emoji rendered as HTML. */\n  emojiHTML: Scalars['HTML'];\n  id: Scalars['ID'];\n  /** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */\n  isAnswerable: Scalars['Boolean'];\n  /** The name of this category. */\n  name: Scalars['String'];\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** The connection type for DiscussionCategory. */\nexport type DiscussionCategoryConnection = {\n  __typename?: 'DiscussionCategoryConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DiscussionCategoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DiscussionCategory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type DiscussionCategoryEdge = {\n  __typename?: 'DiscussionCategoryEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DiscussionCategory>;\n};\n\n/** A comment on a discussion. */\nexport type DiscussionComment = Comment & Deletable & Minimizable & Node & Reactable & Updatable & UpdatableComment & Votable & {\n  __typename?: 'DiscussionComment';\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The body as Markdown. */\n  body: Scalars['String'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The time when this replied-to comment was deleted */\n  deletedAt?: Maybe<Scalars['DateTime']>;\n  /** The discussion this comment was created in */\n  discussion?: Maybe<Discussion>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  id: Scalars['ID'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean'];\n  /** Has this comment been chosen as the answer of its discussion? */\n  isAnswer: Scalars['Boolean'];\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']>;\n  /** Returns why the comment was minimized. */\n  minimizedReason?: Maybe<Scalars['String']>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The threaded replies to this comment. */\n  replies: DiscussionCommentConnection;\n  /** The discussion comment this comment is a reply to */\n  replyTo?: Maybe<DiscussionComment>;\n  /** The path for this discussion comment. */\n  resourcePath: Scalars['URI'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** Number of upvotes that this subject has received. */\n  upvoteCount: Scalars['Int'];\n  /** The URL for this discussion comment. */\n  url: Scalars['URI'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean'];\n  /** Can the current user mark this comment as an answer? */\n  viewerCanMarkAsAnswer: Scalars['Boolean'];\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean'];\n  /** Can the current user unmark this comment as an answer? */\n  viewerCanUnmarkAsAnswer: Scalars['Boolean'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n  /** Whether or not the current user can add or remove an upvote on this subject. */\n  viewerCanUpvote: Scalars['Boolean'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean'];\n  /** Whether or not the current user has already upvoted this subject. */\n  viewerHasUpvoted: Scalars['Boolean'];\n};\n\n\n/** A comment on a discussion. */\nexport type DiscussionCommentReactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A comment on a discussion. */\nexport type DiscussionCommentRepliesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A comment on a discussion. */\nexport type DiscussionCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for DiscussionComment. */\nexport type DiscussionCommentConnection = {\n  __typename?: 'DiscussionCommentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DiscussionCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DiscussionComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type DiscussionCommentEdge = {\n  __typename?: 'DiscussionCommentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DiscussionComment>;\n};\n\n/** The connection type for Discussion. */\nexport type DiscussionConnection = {\n  __typename?: 'DiscussionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DiscussionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Discussion>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type DiscussionEdge = {\n  __typename?: 'DiscussionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Discussion>;\n};\n\n/** Ways in which lists of discussions can be ordered upon return. */\nexport type DiscussionOrder = {\n  /** The direction in which to order discussions by the specified field. */\n  direction: OrderDirection;\n  /** The field by which to order discussions. */\n  field: DiscussionOrderField;\n};\n\n/** Properties by which discussion connections can be ordered. */\nexport enum DiscussionOrderField {\n  /** Order discussions by creation time. */\n  CreatedAt = 'CREATED_AT',\n  /** Order discussions by most recent modification time. */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** Autogenerated input type of DismissPullRequestReview */\nexport type DismissPullRequestReviewInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The contents of the pull request review dismissal message. */\n  message: Scalars['String'];\n  /** The Node ID of the pull request review to modify. */\n  pullRequestReviewId: Scalars['ID'];\n};\n\n/** Autogenerated return type of DismissPullRequestReview */\nexport type DismissPullRequestReviewPayload = {\n  __typename?: 'DismissPullRequestReviewPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The dismissed pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** The possible reasons that a Dependabot alert was dismissed. */\nexport enum DismissReason {\n  /** A fix has already been started */\n  FixStarted = 'FIX_STARTED',\n  /** This alert is inaccurate or incorrect */\n  Inaccurate = 'INACCURATE',\n  /** Vulnerable code is not actually used */\n  NotUsed = 'NOT_USED',\n  /** No bandwidth to fix this */\n  NoBandwidth = 'NO_BANDWIDTH',\n  /** Risk is tolerable to this project */\n  TolerableRisk = 'TOLERABLE_RISK'\n}\n\n/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */\nexport type DismissRepositoryVulnerabilityAlertInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The reason the Dependabot alert is being dismissed. */\n  dismissReason: DismissReason;\n  /** The Dependabot alert ID to dismiss. */\n  repositoryVulnerabilityAlertId: Scalars['ID'];\n};\n\n/** Autogenerated return type of DismissRepositoryVulnerabilityAlert */\nexport type DismissRepositoryVulnerabilityAlertPayload = {\n  __typename?: 'DismissRepositoryVulnerabilityAlertPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The Dependabot alert that was dismissed */\n  repositoryVulnerabilityAlert?: Maybe<RepositoryVulnerabilityAlert>;\n};\n\n/** A draft issue within a project. */\nexport type DraftIssue = Node & {\n  __typename?: 'DraftIssue';\n  /** A list of users to assigned to this draft issue. */\n  assignees: UserConnection;\n  /** The body of the draft issue. */\n  body: Scalars['String'];\n  /** The body of the draft issue rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The body of the draft issue rendered to text. */\n  bodyText: Scalars['String'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The actor who created this draft issue. */\n  creator?: Maybe<Actor>;\n  id: Scalars['ID'];\n  /** The project that contains this draft issue. */\n  project: ProjectNext;\n  /** The project item that wraps this draft issue. */\n  projectItem: ProjectNextItem;\n  /** The title of the draft issue */\n  title: Scalars['String'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n\n/** A draft issue within a project. */\nexport type DraftIssueAssigneesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** Specifies a review comment to be left with a Pull Request Review. */\nexport type DraftPullRequestReviewComment = {\n  /** Body of the comment to leave. */\n  body: Scalars['String'];\n  /** Path to the file being commented on. */\n  path: Scalars['String'];\n  /** Position in the file to leave a comment on. */\n  position: Scalars['Int'];\n};\n\n/** Specifies a review comment thread to be left with a Pull Request Review. */\nexport type DraftPullRequestReviewThread = {\n  /** Body of the comment to leave. */\n  body: Scalars['String'];\n  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */\n  line: Scalars['Int'];\n  /** Path to the file being commented on. */\n  path: Scalars['String'];\n  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */\n  side?: InputMaybe<DiffSide>;\n  /** The first line of the range to which the comment refers. */\n  startLine?: InputMaybe<Scalars['Int']>;\n  /** The side of the diff on which the start line resides. */\n  startSide?: InputMaybe<DiffSide>;\n};\n\n/** Autogenerated input type of EnablePullRequestAutoMerge */\nexport type EnablePullRequestAutoMergeInput = {\n  /** The email address to associate with this merge. */\n  authorEmail?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used. */\n  commitBody?: InputMaybe<Scalars['String']>;\n  /** Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used. */\n  commitHeadline?: InputMaybe<Scalars['String']>;\n  /** The merge method to use. If omitted, defaults to 'MERGE' */\n  mergeMethod?: InputMaybe<PullRequestMergeMethod>;\n  /** ID of the pull request to enable auto-merge on. */\n  pullRequestId: Scalars['ID'];\n};\n\n/** Autogenerated return type of EnablePullRequestAutoMerge */\nexport type EnablePullRequestAutoMergePayload = {\n  __typename?: 'EnablePullRequestAutoMergePayload';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The pull request auto-merge was enabled on. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type Enterprise = Node & {\n  __typename?: 'Enterprise';\n  /** A URL pointing to the enterprise's public avatar. */\n  avatarUrl: Scalars['URI'];\n  /** Enterprise billing information visible to enterprise billing managers. */\n  billingInfo?: Maybe<EnterpriseBillingInfo>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The description of the enterprise. */\n  description?: Maybe<Scalars['String']>;\n  /** The description of the enterprise as HTML. */\n  descriptionHTML: Scalars['HTML'];\n  id: Scalars['ID'];\n  /** The location of the enterprise. */\n  location?: Maybe<Scalars['String']>;\n  /** A list of users who are members of this enterprise. */\n  members: EnterpriseMemberConnection;\n  /** The name of the enterprise. */\n  name: Scalars['String'];\n  /** A list of organizations that belong to this enterprise. */\n  organizations: OrganizationConnection;\n  /** Enterprise information only visible to enterprise owners. */\n  ownerInfo?: Maybe<EnterpriseOwnerInfo>;\n  /** The HTTP path for this enterprise. */\n  resourcePath: Scalars['URI'];\n  /** The URL-friendly identifier for the enterprise. */\n  slug: Scalars['String'];\n  /** The HTTP URL for this enterprise. */\n  url: Scalars['URI'];\n  /**\n   * A list of user accounts on this enterprise.\n   * @deprecated The `Enterprise.userAccounts` field is being removed. Use the `Enterprise.members` field instead. Removal on 2022-07-01 UTC.\n   */\n  userAccounts: EnterpriseUserAccountConnection;\n  /** Is the current viewer an admin of this enterprise? */\n  viewerIsAdmin: Scalars['Boolean'];\n  /** The URL of the enterprise website. */\n  websiteUrl?: Maybe<Scalars['URI']>;\n};\n\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type EnterpriseAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type EnterpriseMembersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  deployment?: InputMaybe<EnterpriseUserDeployment>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<EnterpriseMemberOrder>;\n  organizationLogins?: InputMaybe<Array<Scalars['String']>>;\n  query?: InputMaybe<Scalars['String']>;\n  role?: InputMaybe<EnterpriseUserAccountMembershipRole>;\n};\n\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type EnterpriseOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  query?: InputMaybe<Scalars['String']>;\n  viewerOrganizationRole?: InputMaybe<RoleInOrganization>;\n};\n\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type EnterpriseUserAccountsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for User. */\nexport type EnterpriseAdministratorConnection = {\n  __typename?: 'EnterpriseAdministratorConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseAdministratorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A User who is an administrator of an enterprise. */\nexport type EnterpriseAdministratorEdge = {\n  __typename?: 'EnterpriseAdministratorEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n  /** The role of the administrator. */\n  role: EnterpriseAdministratorRole;\n};\n\n/** An invitation for a user to become an owner or billing manager of an enterprise. */\nexport type EnterpriseAdministratorInvitation = Node & {\n  __typename?: 'EnterpriseAdministratorInvitation';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The email of the person who was invited to the enterprise. */\n  email?: Maybe<Scalars['String']>;\n  /** The enterprise the invitation is for. */\n  enterprise: Enterprise;\n  id: Scalars['ID'];\n  /** The user who was invited to the enterprise. */\n  invitee?: Maybe<User>;\n  /** The user who created the invitation. */\n  inviter?: Maybe<User>;\n  /** The invitee's pending role in the enterprise (owner or billing_manager). */\n  role: EnterpriseAdministratorRole;\n};\n\n/** The connection type for EnterpriseAdministratorInvitation. */\nexport type EnterpriseAdministratorInvitationConnection = {\n  __typename?: 'EnterpriseAdministratorInvitationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseAdministratorInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseAdministratorInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseAdministratorInvitationEdge = {\n  __typename?: 'EnterpriseAdministratorInvitationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseAdministratorInvitation>;\n};\n\n/** Ordering options for enterprise administrator invitation connections */\nexport type EnterpriseAdministratorInvitationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order enterprise administrator invitations by. */\n  field: EnterpriseAdministratorInvitationOrderField;\n};\n\n/** Properties by which enterprise administrator invitation connections can be ordered. */\nexport enum EnterpriseAdministratorInvitationOrderField {\n  /** Order enterprise administrator member invitations by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** The possible administrator roles in an enterprise account. */\nexport enum EnterpriseAdministratorRole {\n  /** Represents a billing manager of the enterprise account. */\n  BillingManager = 'BILLING_MANAGER',\n  /** Represents an owner of the enterprise account. */\n  Owner = 'OWNER'\n}\n\n/** Metadata for an audit entry containing enterprise account information. */\nexport type EnterpriseAuditEntryData = {\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Enterprise billing information visible to enterprise billing managers and owners. */\nexport type EnterpriseBillingInfo = {\n  __typename?: 'EnterpriseBillingInfo';\n  /** The number of licenseable users/emails across the enterprise. */\n  allLicensableUsersCount: Scalars['Int'];\n  /** The number of data packs used by all organizations owned by the enterprise. */\n  assetPacks: Scalars['Int'];\n  /**\n   * The number of available seats across all owned organizations based on the unique number of billable users.\n   * @deprecated `availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.\n   */\n  availableSeats: Scalars['Int'];\n  /** The bandwidth quota in GB for all organizations owned by the enterprise. */\n  bandwidthQuota: Scalars['Float'];\n  /** The bandwidth usage in GB for all organizations owned by the enterprise. */\n  bandwidthUsage: Scalars['Float'];\n  /** The bandwidth usage as a percentage of the bandwidth quota. */\n  bandwidthUsagePercentage: Scalars['Int'];\n  /**\n   * The total seats across all organizations owned by the enterprise.\n   * @deprecated `seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.\n   */\n  seats: Scalars['Int'];\n  /** The storage quota in GB for all organizations owned by the enterprise. */\n  storageQuota: Scalars['Float'];\n  /** The storage usage in GB for all organizations owned by the enterprise. */\n  storageUsage: Scalars['Float'];\n  /** The storage usage as a percentage of the storage quota. */\n  storageUsagePercentage: Scalars['Int'];\n  /** The number of available licenses across all owned organizations based on the unique number of billable users. */\n  totalAvailableLicenses: Scalars['Int'];\n  /** The total number of licenses allocated. */\n  totalLicenses: Scalars['Int'];\n};\n\n/** The possible values for the enterprise base repository permission setting. */\nexport enum EnterpriseDefaultRepositoryPermissionSettingValue {\n  /** Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories. */\n  Admin = 'ADMIN',\n  /** Organization members will only be able to clone and pull public repositories. */\n  None = 'NONE',\n  /** Organizations in the enterprise choose base repository permissions for their members. */\n  NoPolicy = 'NO_POLICY',\n  /** Organization members will be able to clone and pull all organization repositories. */\n  Read = 'READ',\n  /** Organization members will be able to clone, pull, and push all organization repositories. */\n  Write = 'WRITE'\n}\n\n/** The possible values for an enabled/disabled enterprise setting. */\nexport enum EnterpriseEnabledDisabledSettingValue {\n  /** The setting is disabled for organizations in the enterprise. */\n  Disabled = 'DISABLED',\n  /** The setting is enabled for organizations in the enterprise. */\n  Enabled = 'ENABLED',\n  /** There is no policy set for organizations in the enterprise. */\n  NoPolicy = 'NO_POLICY'\n}\n\n/** The possible values for an enabled/no policy enterprise setting. */\nexport enum EnterpriseEnabledSettingValue {\n  /** The setting is enabled for organizations in the enterprise. */\n  Enabled = 'ENABLED',\n  /** There is no policy set for organizations in the enterprise. */\n  NoPolicy = 'NO_POLICY'\n}\n\n/** An identity provider configured to provision identities for an enterprise. */\nexport type EnterpriseIdentityProvider = Node & {\n  __typename?: 'EnterpriseIdentityProvider';\n  /** The digest algorithm used to sign SAML requests for the identity provider. */\n  digestMethod?: Maybe<SamlDigestAlgorithm>;\n  /** The enterprise this identity provider belongs to. */\n  enterprise?: Maybe<Enterprise>;\n  /** ExternalIdentities provisioned by this identity provider. */\n  externalIdentities: ExternalIdentityConnection;\n  id: Scalars['ID'];\n  /** The x509 certificate used by the identity provider to sign assertions and responses. */\n  idpCertificate?: Maybe<Scalars['X509Certificate']>;\n  /** The Issuer Entity ID for the SAML identity provider. */\n  issuer?: Maybe<Scalars['String']>;\n  /** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */\n  recoveryCodes?: Maybe<Array<Scalars['String']>>;\n  /** The signature algorithm used to sign SAML requests for the identity provider. */\n  signatureMethod?: Maybe<SamlSignatureAlgorithm>;\n  /** The URL endpoint for the identity provider's SAML SSO. */\n  ssoUrl?: Maybe<Scalars['URI']>;\n};\n\n\n/** An identity provider configured to provision identities for an enterprise. */\nexport type EnterpriseIdentityProviderExternalIdentitiesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  login?: InputMaybe<Scalars['String']>;\n  membersOnly?: InputMaybe<Scalars['Boolean']>;\n  userName?: InputMaybe<Scalars['String']>;\n};\n\n/** An object that is a member of an enterprise. */\nexport type EnterpriseMember = EnterpriseUserAccount | User;\n\n/** The connection type for EnterpriseMember. */\nexport type EnterpriseMemberConnection = {\n  __typename?: 'EnterpriseMemberConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseMemberEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseMember>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A User who is a member of an enterprise through one or more organizations. */\nexport type EnterpriseMemberEdge = {\n  __typename?: 'EnterpriseMemberEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /**\n   * Whether the user does not have a license for the enterprise.\n   * @deprecated All members consume a license Removal on 2021-01-01 UTC.\n   */\n  isUnlicensed: Scalars['Boolean'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseMember>;\n};\n\n/** Ordering options for enterprise member connections. */\nexport type EnterpriseMemberOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order enterprise members by. */\n  field: EnterpriseMemberOrderField;\n};\n\n/** Properties by which enterprise member connections can be ordered. */\nexport enum EnterpriseMemberOrderField {\n  /** Order enterprise members by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order enterprise members by login */\n  Login = 'LOGIN'\n}\n\n/** The possible values for the enterprise members can create repositories setting. */\nexport enum EnterpriseMembersCanCreateRepositoriesSettingValue {\n  /** Members will be able to create public and private repositories. */\n  All = 'ALL',\n  /** Members will not be able to create public or private repositories. */\n  Disabled = 'DISABLED',\n  /** Organization administrators choose whether to allow members to create repositories. */\n  NoPolicy = 'NO_POLICY',\n  /** Members will be able to create only private repositories. */\n  Private = 'PRIVATE',\n  /** Members will be able to create only public repositories. */\n  Public = 'PUBLIC'\n}\n\n/** The possible values for the members can make purchases setting. */\nexport enum EnterpriseMembersCanMakePurchasesSettingValue {\n  /** The setting is disabled for organizations in the enterprise. */\n  Disabled = 'DISABLED',\n  /** The setting is enabled for organizations in the enterprise. */\n  Enabled = 'ENABLED'\n}\n\n/** The connection type for Organization. */\nexport type EnterpriseOrganizationMembershipConnection = {\n  __typename?: 'EnterpriseOrganizationMembershipConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseOrganizationMembershipEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Organization>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An enterprise organization that a user is a member of. */\nexport type EnterpriseOrganizationMembershipEdge = {\n  __typename?: 'EnterpriseOrganizationMembershipEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Organization>;\n  /** The role of the user in the enterprise membership. */\n  role: EnterpriseUserAccountMembershipRole;\n};\n\n/** The connection type for User. */\nexport type EnterpriseOutsideCollaboratorConnection = {\n  __typename?: 'EnterpriseOutsideCollaboratorConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseOutsideCollaboratorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A User who is an outside collaborator of an enterprise through one or more organizations. */\nexport type EnterpriseOutsideCollaboratorEdge = {\n  __typename?: 'EnterpriseOutsideCollaboratorEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /**\n   * Whether the outside collaborator does not have a license for the enterprise.\n   * @deprecated All outside collaborators consume a license Removal on 2021-01-01 UTC.\n   */\n  isUnlicensed: Scalars['Boolean'];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n  /** The enterprise organization repositories this user is a member of. */\n  repositories: EnterpriseRepositoryInfoConnection;\n};\n\n\n/** A User who is an outside collaborator of an enterprise through one or more organizations. */\nexport type EnterpriseOutsideCollaboratorEdgeRepositoriesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfo = {\n  __typename?: 'EnterpriseOwnerInfo';\n  /** A list of all of the administrators for this enterprise. */\n  admins: EnterpriseAdministratorConnection;\n  /** A list of users in the enterprise who currently have two-factor authentication disabled. */\n  affiliatedUsersWithTwoFactorDisabled: UserConnection;\n  /** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */\n  affiliatedUsersWithTwoFactorDisabledExist: Scalars['Boolean'];\n  /** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */\n  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided private repository forking setting value. */\n  allowPrivateRepositoryForkingSettingOrganizations: OrganizationConnection;\n  /** The setting value for base repository permissions for organizations in this enterprise. */\n  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue;\n  /** A list of enterprise organizations configured with the provided base repository permission. */\n  defaultRepositoryPermissionSettingOrganizations: OrganizationConnection;\n  /** A list of domains owned by the enterprise. */\n  domains: VerifiableDomainConnection;\n  /** Enterprise Server installations owned by the enterprise. */\n  enterpriseServerInstallations: EnterpriseServerInstallationConnection;\n  /** The setting value for whether the enterprise has an IP allow list enabled. */\n  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue;\n  /** The IP addresses that are allowed to access resources owned by the enterprise. */\n  ipAllowListEntries: IpAllowListEntryConnection;\n  /** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */\n  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue;\n  /** Whether or not the base repository permission is currently being updated. */\n  isUpdatingDefaultRepositoryPermission: Scalars['Boolean'];\n  /** Whether the two-factor authentication requirement is currently being enforced. */\n  isUpdatingTwoFactorRequirement: Scalars['Boolean'];\n  /** The setting value for whether organization members with admin permissions on a repository can change repository visibility. */\n  membersCanChangeRepositoryVisibilitySetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided can change repository visibility setting value. */\n  membersCanChangeRepositoryVisibilitySettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members of organizations in the enterprise can create internal repositories. */\n  membersCanCreateInternalRepositoriesSetting?: Maybe<Scalars['Boolean']>;\n  /** The setting value for whether members of organizations in the enterprise can create private repositories. */\n  membersCanCreatePrivateRepositoriesSetting?: Maybe<Scalars['Boolean']>;\n  /** The setting value for whether members of organizations in the enterprise can create public repositories. */\n  membersCanCreatePublicRepositoriesSetting?: Maybe<Scalars['Boolean']>;\n  /** The setting value for whether members of organizations in the enterprise can create repositories. */\n  membersCanCreateRepositoriesSetting?: Maybe<EnterpriseMembersCanCreateRepositoriesSettingValue>;\n  /** A list of enterprise organizations configured with the provided repository creation setting value. */\n  membersCanCreateRepositoriesSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members with admin permissions for repositories can delete issues. */\n  membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can delete issues setting value. */\n  membersCanDeleteIssuesSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */\n  membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can delete repositories setting value. */\n  membersCanDeleteRepositoriesSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */\n  membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */\n  membersCanInviteCollaboratorsSettingOrganizations: OrganizationConnection;\n  /** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */\n  membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue;\n  /** The setting value for whether members with admin permissions for repositories can update protected branches. */\n  membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can update protected branches setting value. */\n  membersCanUpdateProtectedBranchesSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members can view dependency insights. */\n  membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */\n  membersCanViewDependencyInsightsSettingOrganizations: OrganizationConnection;\n  /** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */\n  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue;\n  /** The OIDC Identity Provider for the enterprise. */\n  oidcProvider?: Maybe<OidcProvider>;\n  /** The setting value for whether organization projects are enabled for organizations in this enterprise. */\n  organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided organization projects setting value. */\n  organizationProjectsSettingOrganizations: OrganizationConnection;\n  /** A list of outside collaborators across the repositories in the enterprise. */\n  outsideCollaborators: EnterpriseOutsideCollaboratorConnection;\n  /** A list of pending administrator invitations for the enterprise. */\n  pendingAdminInvitations: EnterpriseAdministratorInvitationConnection;\n  /** A list of pending collaborator invitations across the repositories in the enterprise. */\n  pendingCollaboratorInvitations: RepositoryInvitationConnection;\n  /** A list of pending member invitations for organizations in the enterprise. */\n  pendingMemberInvitations: EnterprisePendingMemberInvitationConnection;\n  /** The setting value for whether repository projects are enabled in this enterprise. */\n  repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided repository projects setting value. */\n  repositoryProjectsSettingOrganizations: OrganizationConnection;\n  /** The SAML Identity Provider for the enterprise. When used by a GitHub App, requires an installation token with read and write access to members. */\n  samlIdentityProvider?: Maybe<EnterpriseIdentityProvider>;\n  /** A list of enterprise organizations configured with the SAML single sign-on setting value. */\n  samlIdentityProviderSettingOrganizations: OrganizationConnection;\n  /** A list of members with a support entitlement. */\n  supportEntitlements: EnterpriseMemberConnection;\n  /** The setting value for whether team discussions are enabled for organizations in this enterprise. */\n  teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided team discussions setting value. */\n  teamDiscussionsSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */\n  twoFactorRequiredSetting: EnterpriseEnabledSettingValue;\n  /** A list of enterprise organizations configured with the two-factor authentication setting value. */\n  twoFactorRequiredSettingOrganizations: OrganizationConnection;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoAdminsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<EnterpriseMemberOrder>;\n  query?: InputMaybe<Scalars['String']>;\n  role?: InputMaybe<EnterpriseAdministratorRole>;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoAffiliatedUsersWithTwoFactorDisabledArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoAllowPrivateRepositoryForkingSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean'];\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoDefaultRepositoryPermissionSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: DefaultRepositoryPermissionField;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoDomainsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  isApproved?: InputMaybe<Scalars['Boolean']>;\n  isVerified?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VerifiableDomainOrder>;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoEnterpriseServerInstallationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  connectedOnly?: InputMaybe<Scalars['Boolean']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<EnterpriseServerInstallationOrder>;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoIpAllowListEntriesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IpAllowListEntryOrder>;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanChangeRepositoryVisibilitySettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean'];\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanCreateRepositoriesSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: OrganizationMembersCanCreateRepositoriesSettingValue;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanDeleteIssuesSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean'];\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanDeleteRepositoriesSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean'];\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanInviteCollaboratorsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean'];\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanUpdateProtectedBranchesSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean'];\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanViewDependencyInsightsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean'];\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoOrganizationProjectsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean'];\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoOutsideCollaboratorsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  login?: InputMaybe<Scalars['String']>;\n  orderBy?: InputMaybe<EnterpriseMemberOrder>;\n  query?: InputMaybe<Scalars['String']>;\n  visibility?: InputMaybe<RepositoryVisibility>;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoPendingAdminInvitationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<EnterpriseAdministratorInvitationOrder>;\n  query?: InputMaybe<Scalars['String']>;\n  role?: InputMaybe<EnterpriseAdministratorRole>;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoPendingCollaboratorInvitationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RepositoryInvitationOrder>;\n  query?: InputMaybe<Scalars['String']>;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoPendingMemberInvitationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  query?: InputMaybe<Scalars['String']>;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoRepositoryProjectsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean'];\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoSamlIdentityProviderSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: IdentityProviderConfigurationState;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoSupportEntitlementsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<EnterpriseMemberOrder>;\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoTeamDiscussionsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean'];\n};\n\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoTwoFactorRequiredSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean'];\n};\n\n/** The connection type for OrganizationInvitation. */\nexport type EnterprisePendingMemberInvitationConnection = {\n  __typename?: 'EnterprisePendingMemberInvitationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterprisePendingMemberInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrganizationInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n  /** Identifies the total count of unique users in the connection. */\n  totalUniqueUserCount: Scalars['Int'];\n};\n\n/** An invitation to be a member in an enterprise organization. */\nexport type EnterprisePendingMemberInvitationEdge = {\n  __typename?: 'EnterprisePendingMemberInvitationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /**\n   * Whether the invitation has a license for the enterprise.\n   * @deprecated All pending members consume a license Removal on 2020-07-01 UTC.\n   */\n  isUnlicensed: Scalars['Boolean'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrganizationInvitation>;\n};\n\n/** A subset of repository information queryable from an enterprise. */\nexport type EnterpriseRepositoryInfo = Node & {\n  __typename?: 'EnterpriseRepositoryInfo';\n  id: Scalars['ID'];\n  /** Identifies if the repository is private or internal. */\n  isPrivate: Scalars['Boolean'];\n  /** The repository's name. */\n  name: Scalars['String'];\n  /** The repository's name with owner. */\n  nameWithOwner: Scalars['String'];\n};\n\n/** The connection type for EnterpriseRepositoryInfo. */\nexport type EnterpriseRepositoryInfoConnection = {\n  __typename?: 'EnterpriseRepositoryInfoConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseRepositoryInfoEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseRepositoryInfo>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseRepositoryInfoEdge = {\n  __typename?: 'EnterpriseRepositoryInfoEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseRepositoryInfo>;\n};\n\n/** An Enterprise Server installation. */\nexport type EnterpriseServerInstallation = Node & {\n  __typename?: 'EnterpriseServerInstallation';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The customer name to which the Enterprise Server installation belongs. */\n  customerName: Scalars['String'];\n  /** The host name of the Enterprise Server installation. */\n  hostName: Scalars['String'];\n  id: Scalars['ID'];\n  /** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */\n  isConnected: Scalars['Boolean'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** User accounts on this Enterprise Server installation. */\n  userAccounts: EnterpriseServerUserAccountConnection;\n  /** User accounts uploads for the Enterprise Server installation. */\n  userAccountsUploads: EnterpriseServerUserAccountsUploadConnection;\n};\n\n\n/** An Enterprise Server installation. */\nexport type EnterpriseServerInstallationUserAccountsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<EnterpriseServerUserAccountOrder>;\n};\n\n\n/** An Enterprise Server installation. */\nexport type EnterpriseServerInstallationUserAccountsUploadsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<EnterpriseServerUserAccountsUploadOrder>;\n};\n\n/** The connection type for EnterpriseServerInstallation. */\nexport type EnterpriseServerInstallationConnection = {\n  __typename?: 'EnterpriseServerInstallationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerInstallationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerInstallation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseServerInstallationEdge = {\n  __typename?: 'EnterpriseServerInstallationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerInstallation>;\n};\n\n/** Ordering options for Enterprise Server installation connections. */\nexport type EnterpriseServerInstallationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order Enterprise Server installations by. */\n  field: EnterpriseServerInstallationOrderField;\n};\n\n/** Properties by which Enterprise Server installation connections can be ordered. */\nexport enum EnterpriseServerInstallationOrderField {\n  /** Order Enterprise Server installations by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order Enterprise Server installations by customer name */\n  CustomerName = 'CUSTOMER_NAME',\n  /** Order Enterprise Server installations by host name */\n  HostName = 'HOST_NAME'\n}\n\n/** A user account on an Enterprise Server installation. */\nexport type EnterpriseServerUserAccount = Node & {\n  __typename?: 'EnterpriseServerUserAccount';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** User emails belonging to this user account. */\n  emails: EnterpriseServerUserAccountEmailConnection;\n  /** The Enterprise Server installation on which this user account exists. */\n  enterpriseServerInstallation: EnterpriseServerInstallation;\n  id: Scalars['ID'];\n  /** Whether the user account is a site administrator on the Enterprise Server installation. */\n  isSiteAdmin: Scalars['Boolean'];\n  /** The login of the user account on the Enterprise Server installation. */\n  login: Scalars['String'];\n  /** The profile name of the user account on the Enterprise Server installation. */\n  profileName?: Maybe<Scalars['String']>;\n  /** The date and time when the user account was created on the Enterprise Server installation. */\n  remoteCreatedAt: Scalars['DateTime'];\n  /** The ID of the user account on the Enterprise Server installation. */\n  remoteUserId: Scalars['Int'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n\n/** A user account on an Enterprise Server installation. */\nexport type EnterpriseServerUserAccountEmailsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<EnterpriseServerUserAccountEmailOrder>;\n};\n\n/** The connection type for EnterpriseServerUserAccount. */\nexport type EnterpriseServerUserAccountConnection = {\n  __typename?: 'EnterpriseServerUserAccountConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccount>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseServerUserAccountEdge = {\n  __typename?: 'EnterpriseServerUserAccountEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerUserAccount>;\n};\n\n/** An email belonging to a user account on an Enterprise Server installation. */\nexport type EnterpriseServerUserAccountEmail = Node & {\n  __typename?: 'EnterpriseServerUserAccountEmail';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The email address. */\n  email: Scalars['String'];\n  id: Scalars['ID'];\n  /** Indicates whether this is the primary email of the associated user account. */\n  isPrimary: Scalars['Boolean'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The user account to which the email belongs. */\n  userAccount: EnterpriseServerUserAccount;\n};\n\n/** The connection type for EnterpriseServerUserAccountEmail. */\nexport type EnterpriseServerUserAccountEmailConnection = {\n  __typename?: 'EnterpriseServerUserAccountEmailConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountEmailEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccountEmail>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseServerUserAccountEmailEdge = {\n  __typename?: 'EnterpriseServerUserAccountEmailEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerUserAccountEmail>;\n};\n\n/** Ordering options for Enterprise Server user account email connections. */\nexport type EnterpriseServerUserAccountEmailOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order emails by. */\n  field: EnterpriseServerUserAccountEmailOrderField;\n};\n\n/** Properties by which Enterprise Server user account email connections can be ordered. */\nexport enum EnterpriseServerUserAccountEmailOrderField {\n  /** Order emails by email */\n  Email = 'EMAIL'\n}\n\n/** Ordering options for Enterprise Server user account connections. */\nexport type EnterpriseServerUserAccountOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order user accounts by. */\n  field: EnterpriseServerUserAccountOrderField;\n};\n\n/** Properties by which Enterprise Server user account connections can be ordered. */\nexport enum EnterpriseServerUserAccountOrderField {\n  /** Order user accounts by login */\n  Login = 'LOGIN',\n  /** Order user accounts by creation time on the Enterprise Server installation */\n  RemoteCreatedAt = 'REMOTE_CREATED_AT'\n}\n\n/** A user accounts upload from an Enterprise Server installation. */\nexport type EnterpriseServerUserAccountsUpload = Node & {\n  __typename?: 'EnterpriseServerUserAccountsUpload';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The enterprise to which this upload belongs. */\n  enterprise: Enterprise;\n  /** The Enterprise Server installation for which this upload was generated. */\n  enterpriseServerInstallation: EnterpriseServerInstallation;\n  id: Scalars['ID'];\n  /** The name of the file uploaded. */\n  name: Scalars['String'];\n  /** The synchronization state of the upload */\n  syncState: EnterpriseServerUserAccountsUploadSyncState;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** The connection type for EnterpriseServerUserAccountsUpload. */\nexport type EnterpriseServerUserAccountsUploadConnection = {\n  __typename?: 'EnterpriseServerUserAccountsUploadConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountsUploadEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccountsUpload>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseServerUserAccountsUploadEdge = {\n  __typename?: 'EnterpriseServerUserAccountsUploadEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerUserAccountsUpload>;\n};\n\n/** Ordering options for Enterprise Server user accounts upload connections. */\nexport type EnterpriseServerUserAccountsUploadOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order user accounts uploads by. */\n  field: EnterpriseServerUserAccountsUploadOrderField;\n};\n\n/** Properties by which Enterprise Server user accounts upload connections can be ordered. */\nexport enum EnterpriseServerUserAccountsUploadOrderField {\n  /** Order user accounts uploads by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Synchronization state of the Enterprise Server user accounts upload */\nexport enum EnterpriseServerUserAccountsUploadSyncState {\n  /** The synchronization of the upload failed. */\n  Failure = 'FAILURE',\n  /** The synchronization of the upload is pending. */\n  Pending = 'PENDING',\n  /** The synchronization of the upload succeeded. */\n  Success = 'SUCCESS'\n}\n\n/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */\nexport type EnterpriseUserAccount = Actor & Node & {\n  __typename?: 'EnterpriseUserAccount';\n  /** A URL pointing to the enterprise user account's public avatar. */\n  avatarUrl: Scalars['URI'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The enterprise in which this user account exists. */\n  enterprise: Enterprise;\n  id: Scalars['ID'];\n  /** An identifier for the enterprise user account, a login or email address */\n  login: Scalars['String'];\n  /** The name of the enterprise user account */\n  name?: Maybe<Scalars['String']>;\n  /** A list of enterprise organizations this user is a member of. */\n  organizations: EnterpriseOrganizationMembershipConnection;\n  /** The HTTP path for this user. */\n  resourcePath: Scalars['URI'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this user. */\n  url: Scalars['URI'];\n  /** The user within the enterprise. */\n  user?: Maybe<User>;\n};\n\n\n/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */\nexport type EnterpriseUserAccountAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */\nexport type EnterpriseUserAccountOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  query?: InputMaybe<Scalars['String']>;\n  role?: InputMaybe<EnterpriseUserAccountMembershipRole>;\n};\n\n/** The connection type for EnterpriseUserAccount. */\nexport type EnterpriseUserAccountConnection = {\n  __typename?: 'EnterpriseUserAccountConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseUserAccountEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseUserAccount>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseUserAccountEdge = {\n  __typename?: 'EnterpriseUserAccountEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseUserAccount>;\n};\n\n/** The possible roles for enterprise membership. */\nexport enum EnterpriseUserAccountMembershipRole {\n  /** The user is a member of the enterprise membership. */\n  Member = 'MEMBER',\n  /** The user is an owner of the enterprise membership. */\n  Owner = 'OWNER'\n}\n\n/** The possible GitHub Enterprise deployments where this user can exist. */\nexport enum EnterpriseUserDeployment {\n  /** The user is part of a GitHub Enterprise Cloud deployment. */\n  Cloud = 'CLOUD',\n  /** The user is part of a GitHub Enterprise Server deployment. */\n  Server = 'SERVER'\n}\n\n/** An environment. */\nexport type Environment = Node & {\n  __typename?: 'Environment';\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** The name of the environment */\n  name: Scalars['String'];\n  /** The protection rules defined for this environment */\n  protectionRules: DeploymentProtectionRuleConnection;\n};\n\n\n/** An environment. */\nexport type EnvironmentProtectionRulesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for Environment. */\nexport type EnvironmentConnection = {\n  __typename?: 'EnvironmentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnvironmentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Environment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type EnvironmentEdge = {\n  __typename?: 'EnvironmentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Environment>;\n};\n\n/** An external identity provisioned by SAML SSO or SCIM. */\nexport type ExternalIdentity = Node & {\n  __typename?: 'ExternalIdentity';\n  /** The GUID for this identity */\n  guid: Scalars['String'];\n  id: Scalars['ID'];\n  /** Organization invitation for this SCIM-provisioned external identity */\n  organizationInvitation?: Maybe<OrganizationInvitation>;\n  /** SAML Identity attributes */\n  samlIdentity?: Maybe<ExternalIdentitySamlAttributes>;\n  /** SCIM Identity attributes */\n  scimIdentity?: Maybe<ExternalIdentityScimAttributes>;\n  /** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */\n  user?: Maybe<User>;\n};\n\n/** The connection type for ExternalIdentity. */\nexport type ExternalIdentityConnection = {\n  __typename?: 'ExternalIdentityConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ExternalIdentityEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ExternalIdentity>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ExternalIdentityEdge = {\n  __typename?: 'ExternalIdentityEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ExternalIdentity>;\n};\n\n/** SAML attributes for the External Identity */\nexport type ExternalIdentitySamlAttributes = {\n  __typename?: 'ExternalIdentitySamlAttributes';\n  /** The emails associated with the SAML identity */\n  emails?: Maybe<Array<UserEmailMetadata>>;\n  /** Family name of the SAML identity */\n  familyName?: Maybe<Scalars['String']>;\n  /** Given name of the SAML identity */\n  givenName?: Maybe<Scalars['String']>;\n  /** The groups linked to this identity in IDP */\n  groups?: Maybe<Array<Scalars['String']>>;\n  /** The NameID of the SAML identity */\n  nameId?: Maybe<Scalars['String']>;\n  /** The userName of the SAML identity */\n  username?: Maybe<Scalars['String']>;\n};\n\n/** SCIM attributes for the External Identity */\nexport type ExternalIdentityScimAttributes = {\n  __typename?: 'ExternalIdentityScimAttributes';\n  /** The emails associated with the SCIM identity */\n  emails?: Maybe<Array<UserEmailMetadata>>;\n  /** Family name of the SCIM identity */\n  familyName?: Maybe<Scalars['String']>;\n  /** Given name of the SCIM identity */\n  givenName?: Maybe<Scalars['String']>;\n  /** The groups linked to this identity in IDP */\n  groups?: Maybe<Array<Scalars['String']>>;\n  /** The userName of the SCIM identity */\n  username?: Maybe<Scalars['String']>;\n};\n\n/** A command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced. */\nexport type FileAddition = {\n  /** The base64 encoded contents of the file */\n  contents: Scalars['Base64String'];\n  /** The path in the repository where the file will be located */\n  path: Scalars['String'];\n};\n\n/**\n * A description of a set of changes to a file tree to be made as part of\n * a git commit, modeled as zero or more file `additions` and zero or more\n * file `deletions`.\n *\n * Both fields are optional; omitting both will produce a commit with no\n * file changes.\n *\n * `deletions` and `additions` describe changes to files identified\n * by their path in the git tree using unix-style path separators, i.e.\n * `/`.  The root of a git tree is an empty string, so paths are not\n * slash-prefixed.\n *\n * `path` values must be unique across all `additions` and `deletions`\n * provided.  Any duplication will result in a validation error.\n *\n * ### Encoding\n *\n * File contents must be provided in full for each `FileAddition`.\n *\n * The `contents` of a `FileAddition` must be encoded using RFC 4648\n * compliant base64, i.e. correct padding is required and no characters\n * outside the standard alphabet may be used.  Invalid base64\n * encoding will be rejected with a validation error.\n *\n * The encoded contents may be binary.\n *\n * For text files, no assumptions are made about the character encoding of\n * the file contents (after base64 decoding).  No charset transcoding or\n * line-ending normalization will be performed; it is the client's\n * responsibility to manage the character encoding of files they provide.\n * However, for maximum compatibility we recommend using UTF-8 encoding\n * and ensuring that all files in a repository use a consistent\n * line-ending convention (`\\n` or `\\r\\n`), and that all files end\n * with a newline.\n *\n * ### Modeling file changes\n *\n * Each of the the five types of conceptual changes that can be made in a\n * git commit can be described using the `FileChanges` type as follows:\n *\n * 1. New file addition: create file `hello world\\n` at path `docs/README.txt`:\n *\n *        {\n *          \"additions\" [\n *            {\n *              \"path\": \"docs/README.txt\",\n *              \"contents\": base64encode(\"hello world\\n\")\n *            }\n *          ]\n *        }\n *\n * 2. Existing file modification: change existing `docs/README.txt` to have new\n *    content `new content here\\n`:\n *\n *        {\n *          \"additions\" [\n *            {\n *              \"path\": \"docs/README.txt\",\n *              \"contents\": base64encode(\"new content here\\n\")\n *            }\n *          ]\n *        }\n *\n * 3. Existing file deletion: remove existing file `docs/README.txt`.\n *    Note that the path is required to exist -- specifying a\n *    path that does not exist on the given branch will abort the\n *    commit and return an error.\n *\n *        {\n *          \"deletions\" [\n *            {\n *              \"path\": \"docs/README.txt\"\n *            }\n *          ]\n *        }\n *\n *\n * 4. File rename with no changes: rename `docs/README.txt` with\n *    previous content `hello world\\n` to the same content at\n *    `newdocs/README.txt`:\n *\n *        {\n *          \"deletions\" [\n *            {\n *              \"path\": \"docs/README.txt\",\n *            }\n *          ],\n *          \"additions\" [\n *            {\n *              \"path\": \"newdocs/README.txt\",\n *              \"contents\": base64encode(\"hello world\\n\")\n *            }\n *          ]\n *        }\n *\n *\n * 5. File rename with changes: rename `docs/README.txt` with\n *    previous content `hello world\\n` to a file at path\n *    `newdocs/README.txt` with content `new contents\\n`:\n *\n *        {\n *          \"deletions\" [\n *            {\n *              \"path\": \"docs/README.txt\",\n *            }\n *          ],\n *          \"additions\" [\n *            {\n *              \"path\": \"newdocs/README.txt\",\n *              \"contents\": base64encode(\"new contents\\n\")\n *            }\n *          ]\n *        }\n *\n */\nexport type FileChanges = {\n  /** File to add or change. */\n  additions?: InputMaybe<Array<FileAddition>>;\n  /** Files to delete. */\n  deletions?: InputMaybe<Array<FileDeletion>>;\n};\n\n/** A command to delete the file at the given path as part of a commit. */\nexport type FileDeletion = {\n  /** The path to delete */\n  path: Scalars['String'];\n};\n\n/** The possible viewed states of a file . */\nexport enum FileViewedState {\n  /** The file has new changes since last viewed. */\n  Dismissed = 'DISMISSED',\n  /** The file has not been marked as viewed. */\n  Unviewed = 'UNVIEWED',\n  /** The file has been marked as viewed. */\n  Viewed = 'VIEWED'\n}\n\n/** Autogenerated input type of FollowUser */\nexport type FollowUserInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** ID of the user to follow. */\n  userId: Scalars['ID'];\n};\n\n/** Autogenerated return type of FollowUser */\nexport type FollowUserPayload = {\n  __typename?: 'FollowUserPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The user that was followed. */\n  user?: Maybe<User>;\n};\n\n/** The connection type for User. */\nexport type FollowerConnection = {\n  __typename?: 'FollowerConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** The connection type for User. */\nexport type FollowingConnection = {\n  __typename?: 'FollowingConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A funding platform link for a repository. */\nexport type FundingLink = {\n  __typename?: 'FundingLink';\n  /** The funding platform this link is for. */\n  platform: FundingPlatform;\n  /** The configured URL for this funding link. */\n  url: Scalars['URI'];\n};\n\n/** The possible funding platforms for repository funding links. */\nexport enum FundingPlatform {\n  /** Community Bridge funding platform. */\n  CommunityBridge = 'COMMUNITY_BRIDGE',\n  /** Custom funding platform. */\n  Custom = 'CUSTOM',\n  /** GitHub funding platform. */\n  Github = 'GITHUB',\n  /** IssueHunt funding platform. */\n  Issuehunt = 'ISSUEHUNT',\n  /** Ko-fi funding platform. */\n  KoFi = 'KO_FI',\n  /** LFX Crowdfunding funding platform. */\n  LfxCrowdfunding = 'LFX_CROWDFUNDING',\n  /** Liberapay funding platform. */\n  Liberapay = 'LIBERAPAY',\n  /** Open Collective funding platform. */\n  OpenCollective = 'OPEN_COLLECTIVE',\n  /** Otechie funding platform. */\n  Otechie = 'OTECHIE',\n  /** Patreon funding platform. */\n  Patreon = 'PATREON',\n  /** Tidelift funding platform. */\n  Tidelift = 'TIDELIFT'\n}\n\n/** A generic hovercard context with a message and icon */\nexport type GenericHovercardContext = HovercardContext & {\n  __typename?: 'GenericHovercardContext';\n  /** A string describing this context */\n  message: Scalars['String'];\n  /** An octicon to accompany this context */\n  octicon: Scalars['String'];\n};\n\n/** A Gist. */\nexport type Gist = Node & Starrable & UniformResourceLocatable & {\n  __typename?: 'Gist';\n  /** A list of comments associated with the gist */\n  comments: GistCommentConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The gist description. */\n  description?: Maybe<Scalars['String']>;\n  /** The files in this gist. */\n  files?: Maybe<Array<Maybe<GistFile>>>;\n  /** A list of forks associated with the gist */\n  forks: GistConnection;\n  id: Scalars['ID'];\n  /** Identifies if the gist is a fork. */\n  isFork: Scalars['Boolean'];\n  /** Whether the gist is public or not. */\n  isPublic: Scalars['Boolean'];\n  /** The gist name. */\n  name: Scalars['String'];\n  /** The gist owner. */\n  owner?: Maybe<RepositoryOwner>;\n  /** Identifies when the gist was last pushed to. */\n  pushedAt?: Maybe<Scalars['DateTime']>;\n  /** The HTML path to this resource. */\n  resourcePath: Scalars['URI'];\n  /**\n   * Returns a count of how many stargazers there are on this object\n   *\n   */\n  stargazerCount: Scalars['Int'];\n  /** A list of users who have starred this starrable. */\n  stargazers: StargazerConnection;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this Gist. */\n  url: Scalars['URI'];\n  /** Returns a boolean indicating whether the viewing user has starred this starrable. */\n  viewerHasStarred: Scalars['Boolean'];\n};\n\n\n/** A Gist. */\nexport type GistCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A Gist. */\nexport type GistFilesArgs = {\n  limit?: InputMaybe<Scalars['Int']>;\n  oid?: InputMaybe<Scalars['GitObjectID']>;\n};\n\n\n/** A Gist. */\nexport type GistForksArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GistOrder>;\n};\n\n\n/** A Gist. */\nexport type GistStargazersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<StarOrder>;\n};\n\n/** Represents a comment on an Gist. */\nexport type GistComment = Comment & Deletable & Minimizable & Node & Updatable & UpdatableComment & {\n  __typename?: 'GistComment';\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the gist. */\n  authorAssociation: CommentAuthorAssociation;\n  /** Identifies the comment body. */\n  body: Scalars['String'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** The associated gist. */\n  gist: Gist;\n  id: Scalars['ID'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean'];\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']>;\n  /** Returns why the comment was minimized. */\n  minimizedReason?: Maybe<Scalars['String']>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean'];\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean'];\n};\n\n\n/** Represents a comment on an Gist. */\nexport type GistCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for GistComment. */\nexport type GistCommentConnection = {\n  __typename?: 'GistCommentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GistCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GistComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GistCommentEdge = {\n  __typename?: 'GistCommentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GistComment>;\n};\n\n/** The connection type for Gist. */\nexport type GistConnection = {\n  __typename?: 'GistConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GistEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Gist>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GistEdge = {\n  __typename?: 'GistEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Gist>;\n};\n\n/** A file in a gist. */\nexport type GistFile = {\n  __typename?: 'GistFile';\n  /** The file name encoded to remove characters that are invalid in URL paths. */\n  encodedName?: Maybe<Scalars['String']>;\n  /** The gist file encoding. */\n  encoding?: Maybe<Scalars['String']>;\n  /** The file extension from the file name. */\n  extension?: Maybe<Scalars['String']>;\n  /** Indicates if this file is an image. */\n  isImage: Scalars['Boolean'];\n  /** Whether the file's contents were truncated. */\n  isTruncated: Scalars['Boolean'];\n  /** The programming language this file is written in. */\n  language?: Maybe<Language>;\n  /** The gist file name. */\n  name?: Maybe<Scalars['String']>;\n  /** The gist file size in bytes. */\n  size?: Maybe<Scalars['Int']>;\n  /** UTF8 text data or null if the file is binary */\n  text?: Maybe<Scalars['String']>;\n};\n\n\n/** A file in a gist. */\nexport type GistFileTextArgs = {\n  truncate?: InputMaybe<Scalars['Int']>;\n};\n\n/** Ordering options for gist connections */\nexport type GistOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repositories by. */\n  field: GistOrderField;\n};\n\n/** Properties by which gist connections can be ordered. */\nexport enum GistOrderField {\n  /** Order gists by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order gists by push time */\n  PushedAt = 'PUSHED_AT',\n  /** Order gists by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The privacy of a Gist */\nexport enum GistPrivacy {\n  /** Gists that are public and secret */\n  All = 'ALL',\n  /** Public */\n  Public = 'PUBLIC',\n  /** Secret */\n  Secret = 'SECRET'\n}\n\n/** Represents an actor in a Git commit (ie. an author or committer). */\nexport type GitActor = {\n  __typename?: 'GitActor';\n  /** A URL pointing to the author's public avatar. */\n  avatarUrl: Scalars['URI'];\n  /** The timestamp of the Git action (authoring or committing). */\n  date?: Maybe<Scalars['GitTimestamp']>;\n  /** The email in the Git commit. */\n  email?: Maybe<Scalars['String']>;\n  /** The name in the Git commit. */\n  name?: Maybe<Scalars['String']>;\n  /** The GitHub user corresponding to the email field. Null if no such user exists. */\n  user?: Maybe<User>;\n};\n\n\n/** Represents an actor in a Git commit (ie. an author or committer). */\nexport type GitActorAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for GitActor. */\nexport type GitActorConnection = {\n  __typename?: 'GitActorConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GitActorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GitActor>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type GitActorEdge = {\n  __typename?: 'GitActorEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GitActor>;\n};\n\n/** Represents information about the GitHub instance. */\nexport type GitHubMetadata = {\n  __typename?: 'GitHubMetadata';\n  /** Returns a String that's a SHA of `github-services` */\n  gitHubServicesSha: Scalars['GitObjectID'];\n  /** IP addresses that users connect to for git operations */\n  gitIpAddresses?: Maybe<Array<Scalars['String']>>;\n  /** IP addresses that service hooks are sent from */\n  hookIpAddresses?: Maybe<Array<Scalars['String']>>;\n  /** IP addresses that the importer connects from */\n  importerIpAddresses?: Maybe<Array<Scalars['String']>>;\n  /** Whether or not users are verified */\n  isPasswordAuthenticationVerifiable: Scalars['Boolean'];\n  /** IP addresses for GitHub Pages' A records */\n  pagesIpAddresses?: Maybe<Array<Scalars['String']>>;\n};\n\n/** Represents a Git object. */\nexport type GitObject = {\n  /** An abbreviated version of the Git object ID */\n  abbreviatedOid: Scalars['String'];\n  /** The HTTP path for this Git object */\n  commitResourcePath: Scalars['URI'];\n  /** The HTTP URL for this Git object */\n  commitUrl: Scalars['URI'];\n  id: Scalars['ID'];\n  /** The Git object ID */\n  oid: Scalars['GitObjectID'];\n  /** The Repository the Git object belongs to */\n  repository: Repository;\n};\n\n/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */\nexport type GitSignature = {\n  /** Email used to sign this object. */\n  email: Scalars['String'];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars['Boolean'];\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars['String'];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars['String'];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars['Boolean'];\n};\n\n/** The state of a Git signature. */\nexport enum GitSignatureState {\n  /** The signing certificate or its chain could not be verified */\n  BadCert = 'BAD_CERT',\n  /** Invalid email used for signing */\n  BadEmail = 'BAD_EMAIL',\n  /** Signing key expired */\n  ExpiredKey = 'EXPIRED_KEY',\n  /** Internal error - the GPG verification service misbehaved */\n  GpgverifyError = 'GPGVERIFY_ERROR',\n  /** Internal error - the GPG verification service is unavailable at the moment */\n  GpgverifyUnavailable = 'GPGVERIFY_UNAVAILABLE',\n  /** Invalid signature */\n  Invalid = 'INVALID',\n  /** Malformed signature */\n  MalformedSig = 'MALFORMED_SIG',\n  /** The usage flags for the key that signed this don't allow signing */\n  NotSigningKey = 'NOT_SIGNING_KEY',\n  /** Email used for signing not known to GitHub */\n  NoUser = 'NO_USER',\n  /** Valid signature, though certificate revocation check failed */\n  OcspError = 'OCSP_ERROR',\n  /** Valid signature, pending certificate revocation checking */\n  OcspPending = 'OCSP_PENDING',\n  /** One or more certificates in chain has been revoked */\n  OcspRevoked = 'OCSP_REVOKED',\n  /** Key used for signing not known to GitHub */\n  UnknownKey = 'UNKNOWN_KEY',\n  /** Unknown signature type */\n  UnknownSigType = 'UNKNOWN_SIG_TYPE',\n  /** Unsigned */\n  Unsigned = 'UNSIGNED',\n  /** Email used for signing unverified on GitHub */\n  UnverifiedEmail = 'UNVERIFIED_EMAIL',\n  /** Valid signature and verified by GitHub */\n  Valid = 'VALID'\n}\n\n/** Represents a GPG signature on a Commit or Tag. */\nexport type GpgSignature = GitSignature & {\n  __typename?: 'GpgSignature';\n  /** Email used to sign this object. */\n  email: Scalars['String'];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars['Boolean'];\n  /** Hex-encoded ID of the key that signed this object. */\n  keyId?: Maybe<Scalars['String']>;\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars['String'];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars['String'];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars['Boolean'];\n};\n\n/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */\nexport type GrantEnterpriseOrganizationsMigratorRoleInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */\n  enterpriseId: Scalars['ID'];\n  /** The login of the user to grant the migrator role */\n  login: Scalars['String'];\n};\n\n/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */\nexport type GrantEnterpriseOrganizationsMigratorRolePayload = {\n  __typename?: 'GrantEnterpriseOrganizationsMigratorRolePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The organizations that had the migrator role applied to for the given user. */\n  organizations?: Maybe<OrganizationConnection>;\n};\n\n\n/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */\nexport type GrantEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** Autogenerated input type of GrantMigratorRole */\nexport type GrantMigratorRoleInput = {\n  /** The user login or Team slug to grant the migrator role. */\n  actor: Scalars['String'];\n  /** Specifies the type of the actor, can be either USER or TEAM. */\n  actorType: ActorType;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the organization that the user/team belongs to. */\n  organizationId: Scalars['ID'];\n};\n\n/** Autogenerated return type of GrantMigratorRole */\nexport type GrantMigratorRolePayload = {\n  __typename?: 'GrantMigratorRolePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** Did the operation succeed? */\n  success?: Maybe<Scalars['Boolean']>;\n};\n\n/** Represents a 'head_ref_deleted' event on a given pull request. */\nexport type HeadRefDeletedEvent = Node & {\n  __typename?: 'HeadRefDeletedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the Ref associated with the `head_ref_deleted` event. */\n  headRef?: Maybe<Ref>;\n  /** Identifies the name of the Ref associated with the `head_ref_deleted` event. */\n  headRefName: Scalars['String'];\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'head_ref_force_pushed' event on a given pull request. */\nexport type HeadRefForcePushedEvent = Node & {\n  __typename?: 'HeadRefForcePushedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */\n  afterCommit?: Maybe<Commit>;\n  /** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */\n  beforeCommit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */\n  ref?: Maybe<Ref>;\n};\n\n/** Represents a 'head_ref_restored' event on a given pull request. */\nexport type HeadRefRestoredEvent = Node & {\n  __typename?: 'HeadRefRestoredEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Detail needed to display a hovercard for a user */\nexport type Hovercard = {\n  __typename?: 'Hovercard';\n  /** Each of the contexts for this hovercard */\n  contexts: Array<HovercardContext>;\n};\n\n/** An individual line of a hovercard */\nexport type HovercardContext = {\n  /** A string describing this context */\n  message: Scalars['String'];\n  /** An octicon to accompany this context */\n  octicon: Scalars['String'];\n};\n\n/** The possible states in which authentication can be configured with an identity provider. */\nexport enum IdentityProviderConfigurationState {\n  /** Authentication with an identity provider is configured but not enforced. */\n  Configured = 'CONFIGURED',\n  /** Authentication with an identity provider is configured and enforced. */\n  Enforced = 'ENFORCED',\n  /** Authentication with an identity provider is not configured. */\n  Unconfigured = 'UNCONFIGURED'\n}\n\n/** Autogenerated input type of InviteEnterpriseAdmin */\nexport type InviteEnterpriseAdminInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The email of the person to invite as an administrator. */\n  email?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise to which you want to invite an administrator. */\n  enterpriseId: Scalars['ID'];\n  /** The login of a user to invite as an administrator. */\n  invitee?: InputMaybe<Scalars['String']>;\n  /** The role of the administrator. */\n  role?: InputMaybe<EnterpriseAdministratorRole>;\n};\n\n/** Autogenerated return type of InviteEnterpriseAdmin */\nexport type InviteEnterpriseAdminPayload = {\n  __typename?: 'InviteEnterpriseAdminPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The created enterprise administrator invitation. */\n  invitation?: Maybe<EnterpriseAdministratorInvitation>;\n};\n\n/** The possible values for the IP allow list enabled setting. */\nexport enum IpAllowListEnabledSettingValue {\n  /** The setting is disabled for the owner. */\n  Disabled = 'DISABLED',\n  /** The setting is enabled for the owner. */\n  Enabled = 'ENABLED'\n}\n\n/** An IP address or range of addresses that is allowed to access an owner's resources. */\nexport type IpAllowListEntry = Node & {\n  __typename?: 'IpAllowListEntry';\n  /** A single IP address or range of IP addresses in CIDR notation. */\n  allowListValue: Scalars['String'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Whether the entry is currently active. */\n  isActive: Scalars['Boolean'];\n  /** The name of the IP allow list entry. */\n  name?: Maybe<Scalars['String']>;\n  /** The owner of the IP allow list entry. */\n  owner: IpAllowListOwner;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** The connection type for IpAllowListEntry. */\nexport type IpAllowListEntryConnection = {\n  __typename?: 'IpAllowListEntryConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IpAllowListEntryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<IpAllowListEntry>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type IpAllowListEntryEdge = {\n  __typename?: 'IpAllowListEntryEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<IpAllowListEntry>;\n};\n\n/** Ordering options for IP allow list entry connections. */\nexport type IpAllowListEntryOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order IP allow list entries by. */\n  field: IpAllowListEntryOrderField;\n};\n\n/** Properties by which IP allow list entry connections can be ordered. */\nexport enum IpAllowListEntryOrderField {\n  /** Order IP allow list entries by the allow list value. */\n  AllowListValue = 'ALLOW_LIST_VALUE',\n  /** Order IP allow list entries by creation time. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */\nexport enum IpAllowListForInstalledAppsEnabledSettingValue {\n  /** The setting is disabled for the owner. */\n  Disabled = 'DISABLED',\n  /** The setting is enabled for the owner. */\n  Enabled = 'ENABLED'\n}\n\n/** Types that can own an IP allow list. */\nexport type IpAllowListOwner = App | Enterprise | Organization;\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type Issue = Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectNextOwner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment & {\n  __typename?: 'Issue';\n  /** Reason that the conversation was locked. */\n  activeLockReason?: Maybe<LockReason>;\n  /** A list of Users assigned to this object. */\n  assignees: UserConnection;\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** Identifies the body of the issue. */\n  body: Scalars['String'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The http path for this issue body */\n  bodyResourcePath: Scalars['URI'];\n  /** Identifies the body of the issue rendered to text. */\n  bodyText: Scalars['String'];\n  /** The http URL for this issue body */\n  bodyUrl: Scalars['URI'];\n  /** `true` if the object is closed (definition of closed may depend on type) */\n  closed: Scalars['Boolean'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']>;\n  /** A list of comments associated with the Issue. */\n  comments: IssueCommentConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** The hovercard information for this issue */\n  hovercard: Hovercard;\n  id: Scalars['ID'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean'];\n  /** Indicates whether or not this issue is currently pinned to the repository issues list */\n  isPinned?: Maybe<Scalars['Boolean']>;\n  /** Is this issue read by the viewer */\n  isReadByViewer?: Maybe<Scalars['Boolean']>;\n  /** A list of labels associated with the object. */\n  labels?: Maybe<LabelConnection>;\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']>;\n  /** `true` if the object is locked */\n  locked: Scalars['Boolean'];\n  /** Identifies the milestone associated with the issue. */\n  milestone?: Maybe<Milestone>;\n  /** Identifies the issue number. */\n  number: Scalars['Int'];\n  /** A list of Users that are participating in the Issue conversation. */\n  participants: UserConnection;\n  /** List of project cards associated with this issue. */\n  projectCards: ProjectCardConnection;\n  /** Find a project by project (beta) number. */\n  projectNext?: Maybe<ProjectNext>;\n  /** List of project (beta) items associated with this issue. */\n  projectNextItems: ProjectNextItemConnection;\n  /** A list of projects (beta) under the owner. */\n  projectsNext: ProjectNextConnection;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The HTTP path for this issue */\n  resourcePath: Scalars['URI'];\n  /** Identifies the state of the issue. */\n  state: IssueState;\n  /**\n   * A list of events, comments, commits, etc. associated with the issue.\n   * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.\n   */\n  timeline: IssueTimelineConnection;\n  /** A list of events, comments, commits, etc. associated with the issue. */\n  timelineItems: IssueTimelineItemsConnection;\n  /** Identifies the issue title. */\n  title: Scalars['String'];\n  /** Identifies the issue title rendered to HTML. */\n  titleHTML: Scalars['String'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this issue */\n  url: Scalars['URI'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueAssigneesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueCommentOrder>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueHovercardArgs = {\n  includeNotificationContexts?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueLabelsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueParticipantsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueProjectCardsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueProjectNextArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueProjectNextItemsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  includeArchived?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueProjectsNextArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  query?: InputMaybe<Scalars['String']>;\n  sortBy?: InputMaybe<ProjectNextOrderField>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueReactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueTimelineArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  since?: InputMaybe<Scalars['DateTime']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueTimelineItemsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  itemTypes?: InputMaybe<Array<IssueTimelineItemsItemType>>;\n  last?: InputMaybe<Scalars['Int']>;\n  since?: InputMaybe<Scalars['DateTime']>;\n  skip?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** Represents a comment on an Issue. */\nexport type IssueComment = Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment & {\n  __typename?: 'IssueComment';\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The body as Markdown. */\n  body: Scalars['String'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  id: Scalars['ID'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean'];\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean'];\n  /** Identifies the issue associated with the comment. */\n  issue: Issue;\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']>;\n  /** Returns why the comment was minimized. */\n  minimizedReason?: Maybe<Scalars['String']>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /**\n   * Returns the pull request associated with the comment, if this comment was made on a\n   * pull request.\n   *\n   */\n  pullRequest?: Maybe<PullRequest>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The HTTP path for this issue comment */\n  resourcePath: Scalars['URI'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this issue comment */\n  url: Scalars['URI'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean'];\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean'];\n};\n\n\n/** Represents a comment on an Issue. */\nexport type IssueCommentReactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** Represents a comment on an Issue. */\nexport type IssueCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for IssueComment. */\nexport type IssueCommentConnection = {\n  __typename?: 'IssueCommentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IssueCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<IssueComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type IssueCommentEdge = {\n  __typename?: 'IssueCommentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<IssueComment>;\n};\n\n/** Ways in which lists of issue comments can be ordered upon return. */\nexport type IssueCommentOrder = {\n  /** The direction in which to order issue comments by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order issue comments by. */\n  field: IssueCommentOrderField;\n};\n\n/** Properties by which issue comment connections can be ordered. */\nexport enum IssueCommentOrderField {\n  /** Order issue comments by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The connection type for Issue. */\nexport type IssueConnection = {\n  __typename?: 'IssueConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IssueEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Issue>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** This aggregates issues opened by a user within one repository. */\nexport type IssueContributionsByRepository = {\n  __typename?: 'IssueContributionsByRepository';\n  /** The issue contributions. */\n  contributions: CreatedIssueContributionConnection;\n  /** The repository in which the issues were opened. */\n  repository: Repository;\n};\n\n\n/** This aggregates issues opened by a user within one repository. */\nexport type IssueContributionsByRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** An edge in a connection. */\nexport type IssueEdge = {\n  __typename?: 'IssueEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Issue>;\n};\n\n/** Ways in which to filter lists of issues. */\nexport type IssueFilters = {\n  /** List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user. */\n  assignee?: InputMaybe<Scalars['String']>;\n  /** List issues created by given name. */\n  createdBy?: InputMaybe<Scalars['String']>;\n  /** List issues where the list of label names exist on the issue. */\n  labels?: InputMaybe<Array<Scalars['String']>>;\n  /** List issues where the given name is mentioned in the issue. */\n  mentioned?: InputMaybe<Scalars['String']>;\n  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its database ID. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */\n  milestone?: InputMaybe<Scalars['String']>;\n  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */\n  milestoneNumber?: InputMaybe<Scalars['String']>;\n  /** List issues that have been updated at or after the given date. */\n  since?: InputMaybe<Scalars['DateTime']>;\n  /** List issues filtered by the list of states given. */\n  states?: InputMaybe<Array<IssueState>>;\n  /** List issues subscribed to by viewer. */\n  viewerSubscribed?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** Used for return value of Repository.issueOrPullRequest. */\nexport type IssueOrPullRequest = Issue | PullRequest;\n\n/** Ways in which lists of issues can be ordered upon return. */\nexport type IssueOrder = {\n  /** The direction in which to order issues by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order issues by. */\n  field: IssueOrderField;\n};\n\n/** Properties by which issue connections can be ordered. */\nexport enum IssueOrderField {\n  /** Order issues by comment count */\n  Comments = 'COMMENTS',\n  /** Order issues by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order issues by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The possible states of an issue. */\nexport enum IssueState {\n  /** An issue that has been closed */\n  Closed = 'CLOSED',\n  /** An issue that is still open */\n  Open = 'OPEN'\n}\n\n/** A repository issue template. */\nexport type IssueTemplate = {\n  __typename?: 'IssueTemplate';\n  /** The template purpose. */\n  about?: Maybe<Scalars['String']>;\n  /** The suggested issue body. */\n  body?: Maybe<Scalars['String']>;\n  /** The template name. */\n  name: Scalars['String'];\n  /** The suggested issue title. */\n  title?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for IssueTimelineItem. */\nexport type IssueTimelineConnection = {\n  __typename?: 'IssueTimelineConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IssueTimelineItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<IssueTimelineItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An item in an issue timeline */\nexport type IssueTimelineItem = AssignedEvent | ClosedEvent | Commit | CrossReferencedEvent | DemilestonedEvent | IssueComment | LabeledEvent | LockedEvent | MilestonedEvent | ReferencedEvent | RenamedTitleEvent | ReopenedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnsubscribedEvent | UserBlockedEvent;\n\n/** An edge in a connection. */\nexport type IssueTimelineItemEdge = {\n  __typename?: 'IssueTimelineItemEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<IssueTimelineItem>;\n};\n\n/** An item in an issue timeline */\nexport type IssueTimelineItems = AddedToProjectEvent | AssignedEvent | ClosedEvent | CommentDeletedEvent | ConnectedEvent | ConvertedNoteToIssueEvent | ConvertedToDiscussionEvent | CrossReferencedEvent | DemilestonedEvent | DisconnectedEvent | IssueComment | LabeledEvent | LockedEvent | MarkedAsDuplicateEvent | MentionedEvent | MilestonedEvent | MovedColumnsInProjectEvent | PinnedEvent | ReferencedEvent | RemovedFromProjectEvent | RenamedTitleEvent | ReopenedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnmarkedAsDuplicateEvent | UnpinnedEvent | UnsubscribedEvent | UserBlockedEvent;\n\n/** The connection type for IssueTimelineItems. */\nexport type IssueTimelineItemsConnection = {\n  __typename?: 'IssueTimelineItemsConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IssueTimelineItemsEdge>>>;\n  /** Identifies the count of items after applying `before` and `after` filters. */\n  filteredCount: Scalars['Int'];\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<IssueTimelineItems>>>;\n  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */\n  pageCount: Scalars['Int'];\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n  /** Identifies the date and time when the timeline was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** An edge in a connection. */\nexport type IssueTimelineItemsEdge = {\n  __typename?: 'IssueTimelineItemsEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<IssueTimelineItems>;\n};\n\n/** The possible item types found in a timeline. */\nexport enum IssueTimelineItemsItemType {\n  /** Represents a 'added_to_project' event on a given issue or pull request. */\n  AddedToProjectEvent = 'ADDED_TO_PROJECT_EVENT',\n  /** Represents an 'assigned' event on any assignable object. */\n  AssignedEvent = 'ASSIGNED_EVENT',\n  /** Represents a 'closed' event on any `Closable`. */\n  ClosedEvent = 'CLOSED_EVENT',\n  /** Represents a 'comment_deleted' event on a given issue or pull request. */\n  CommentDeletedEvent = 'COMMENT_DELETED_EVENT',\n  /** Represents a 'connected' event on a given issue or pull request. */\n  ConnectedEvent = 'CONNECTED_EVENT',\n  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */\n  ConvertedNoteToIssueEvent = 'CONVERTED_NOTE_TO_ISSUE_EVENT',\n  /** Represents a 'converted_to_discussion' event on a given issue. */\n  ConvertedToDiscussionEvent = 'CONVERTED_TO_DISCUSSION_EVENT',\n  /** Represents a mention made by one issue or pull request to another. */\n  CrossReferencedEvent = 'CROSS_REFERENCED_EVENT',\n  /** Represents a 'demilestoned' event on a given issue or pull request. */\n  DemilestonedEvent = 'DEMILESTONED_EVENT',\n  /** Represents a 'disconnected' event on a given issue or pull request. */\n  DisconnectedEvent = 'DISCONNECTED_EVENT',\n  /** Represents a comment on an Issue. */\n  IssueComment = 'ISSUE_COMMENT',\n  /** Represents a 'labeled' event on a given issue or pull request. */\n  LabeledEvent = 'LABELED_EVENT',\n  /** Represents a 'locked' event on a given issue or pull request. */\n  LockedEvent = 'LOCKED_EVENT',\n  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */\n  MarkedAsDuplicateEvent = 'MARKED_AS_DUPLICATE_EVENT',\n  /** Represents a 'mentioned' event on a given issue or pull request. */\n  MentionedEvent = 'MENTIONED_EVENT',\n  /** Represents a 'milestoned' event on a given issue or pull request. */\n  MilestonedEvent = 'MILESTONED_EVENT',\n  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */\n  MovedColumnsInProjectEvent = 'MOVED_COLUMNS_IN_PROJECT_EVENT',\n  /** Represents a 'pinned' event on a given issue or pull request. */\n  PinnedEvent = 'PINNED_EVENT',\n  /** Represents a 'referenced' event on a given `ReferencedSubject`. */\n  ReferencedEvent = 'REFERENCED_EVENT',\n  /** Represents a 'removed_from_project' event on a given issue or pull request. */\n  RemovedFromProjectEvent = 'REMOVED_FROM_PROJECT_EVENT',\n  /** Represents a 'renamed' event on a given issue or pull request */\n  RenamedTitleEvent = 'RENAMED_TITLE_EVENT',\n  /** Represents a 'reopened' event on any `Closable`. */\n  ReopenedEvent = 'REOPENED_EVENT',\n  /** Represents a 'subscribed' event on a given `Subscribable`. */\n  SubscribedEvent = 'SUBSCRIBED_EVENT',\n  /** Represents a 'transferred' event on a given issue or pull request. */\n  TransferredEvent = 'TRANSFERRED_EVENT',\n  /** Represents an 'unassigned' event on any assignable object. */\n  UnassignedEvent = 'UNASSIGNED_EVENT',\n  /** Represents an 'unlabeled' event on a given issue or pull request. */\n  UnlabeledEvent = 'UNLABELED_EVENT',\n  /** Represents an 'unlocked' event on a given issue or pull request. */\n  UnlockedEvent = 'UNLOCKED_EVENT',\n  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */\n  UnmarkedAsDuplicateEvent = 'UNMARKED_AS_DUPLICATE_EVENT',\n  /** Represents an 'unpinned' event on a given issue or pull request. */\n  UnpinnedEvent = 'UNPINNED_EVENT',\n  /** Represents an 'unsubscribed' event on a given `Subscribable`. */\n  UnsubscribedEvent = 'UNSUBSCRIBED_EVENT',\n  /** Represents a 'user_blocked' event on a given user. */\n  UserBlockedEvent = 'USER_BLOCKED_EVENT'\n}\n\n/** Represents a user signing up for a GitHub account. */\nexport type JoinedGitHubContribution = Contribution & {\n  __typename?: 'JoinedGitHubContribution';\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   *\n   */\n  isRestricted: Scalars['Boolean'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime'];\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI'];\n  /**\n   * The user who made this contribution.\n   *\n   */\n  user: User;\n};\n\n/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */\nexport type Label = Node & {\n  __typename?: 'Label';\n  /** Identifies the label color. */\n  color: Scalars['String'];\n  /** Identifies the date and time when the label was created. */\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** A brief description of this label. */\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** Indicates whether or not this is a default label. */\n  isDefault: Scalars['Boolean'];\n  /** A list of issues associated with this label. */\n  issues: IssueConnection;\n  /** Identifies the label name. */\n  name: Scalars['String'];\n  /** A list of pull requests associated with this label. */\n  pullRequests: PullRequestConnection;\n  /** The repository associated with this label. */\n  repository: Repository;\n  /** The HTTP path for this label. */\n  resourcePath: Scalars['URI'];\n  /** Identifies the date and time when the label was last updated. */\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  /** The HTTP URL for this label. */\n  url: Scalars['URI'];\n};\n\n\n/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */\nexport type LabelIssuesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  filterBy?: InputMaybe<IssueFilters>;\n  first?: InputMaybe<Scalars['Int']>;\n  labels?: InputMaybe<Array<Scalars['String']>>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<IssueState>>;\n};\n\n\n/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */\nexport type LabelPullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  baseRefName?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  headRefName?: InputMaybe<Scalars['String']>;\n  labels?: InputMaybe<Array<Scalars['String']>>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** The connection type for Label. */\nexport type LabelConnection = {\n  __typename?: 'LabelConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<LabelEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Label>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type LabelEdge = {\n  __typename?: 'LabelEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Label>;\n};\n\n/** Ways in which lists of labels can be ordered upon return. */\nexport type LabelOrder = {\n  /** The direction in which to order labels by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order labels by. */\n  field: LabelOrderField;\n};\n\n/** Properties by which label connections can be ordered. */\nexport enum LabelOrderField {\n  /** Order labels by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order labels by name  */\n  Name = 'NAME'\n}\n\n/** An object that can have labels assigned to it. */\nexport type Labelable = {\n  /** A list of labels associated with the object. */\n  labels?: Maybe<LabelConnection>;\n};\n\n\n/** An object that can have labels assigned to it. */\nexport type LabelableLabelsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n/** Represents a 'labeled' event on a given issue or pull request. */\nexport type LabeledEvent = Node & {\n  __typename?: 'LabeledEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Identifies the label associated with the 'labeled' event. */\n  label: Label;\n  /** Identifies the `Labelable` associated with the event. */\n  labelable: Labelable;\n};\n\n/** Represents a given language found in repositories. */\nexport type Language = Node & {\n  __typename?: 'Language';\n  /** The color defined for the current language. */\n  color?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** The name of the current language. */\n  name: Scalars['String'];\n};\n\n/** A list of languages associated with the parent. */\nexport type LanguageConnection = {\n  __typename?: 'LanguageConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<LanguageEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Language>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n  /** The total size in bytes of files written in that language. */\n  totalSize: Scalars['Int'];\n};\n\n/** Represents the language of a repository. */\nexport type LanguageEdge = {\n  __typename?: 'LanguageEdge';\n  cursor: Scalars['String'];\n  node: Language;\n  /** The number of bytes of code written in the language. */\n  size: Scalars['Int'];\n};\n\n/** Ordering options for language connections. */\nexport type LanguageOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order languages by. */\n  field: LanguageOrderField;\n};\n\n/** Properties by which language connections can be ordered. */\nexport enum LanguageOrderField {\n  /** Order languages by the size of all files containing the language */\n  Size = 'SIZE'\n}\n\n/** A repository's open source license */\nexport type License = Node & {\n  __typename?: 'License';\n  /** The full text of the license */\n  body: Scalars['String'];\n  /** The conditions set by the license */\n  conditions: Array<Maybe<LicenseRule>>;\n  /** A human-readable description of the license */\n  description?: Maybe<Scalars['String']>;\n  /** Whether the license should be featured */\n  featured: Scalars['Boolean'];\n  /** Whether the license should be displayed in license pickers */\n  hidden: Scalars['Boolean'];\n  id: Scalars['ID'];\n  /** Instructions on how to implement the license */\n  implementation?: Maybe<Scalars['String']>;\n  /** The lowercased SPDX ID of the license */\n  key: Scalars['String'];\n  /** The limitations set by the license */\n  limitations: Array<Maybe<LicenseRule>>;\n  /** The license full name specified by <https://spdx.org/licenses> */\n  name: Scalars['String'];\n  /** Customary short name if applicable (e.g, GPLv3) */\n  nickname?: Maybe<Scalars['String']>;\n  /** The permissions set by the license */\n  permissions: Array<Maybe<LicenseRule>>;\n  /** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */\n  pseudoLicense: Scalars['Boolean'];\n  /** Short identifier specified by <https://spdx.org/licenses> */\n  spdxId?: Maybe<Scalars['String']>;\n  /** URL to the license on <https://choosealicense.com> */\n  url?: Maybe<Scalars['URI']>;\n};\n\n/** Describes a License's conditions, permissions, and limitations */\nexport type LicenseRule = {\n  __typename?: 'LicenseRule';\n  /** A description of the rule */\n  description: Scalars['String'];\n  /** The machine-readable rule key */\n  key: Scalars['String'];\n  /** The human-readable rule label */\n  label: Scalars['String'];\n};\n\n/** Autogenerated input type of LinkRepositoryToProject */\nexport type LinkRepositoryToProjectInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the Project to link to a Repository */\n  projectId: Scalars['ID'];\n  /** The ID of the Repository to link to a Project. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of LinkRepositoryToProject */\nexport type LinkRepositoryToProjectPayload = {\n  __typename?: 'LinkRepositoryToProjectPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The linked Project. */\n  project?: Maybe<Project>;\n  /** The linked Repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of LockLockable */\nexport type LockLockableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** A reason for why the item will be locked. */\n  lockReason?: InputMaybe<LockReason>;\n  /** ID of the item to be locked. */\n  lockableId: Scalars['ID'];\n};\n\n/** Autogenerated return type of LockLockable */\nexport type LockLockablePayload = {\n  __typename?: 'LockLockablePayload';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The item that was locked. */\n  lockedRecord?: Maybe<Lockable>;\n};\n\n/** The possible reasons that an issue or pull request was locked. */\nexport enum LockReason {\n  /** The issue or pull request was locked because the conversation was off-topic. */\n  OffTopic = 'OFF_TOPIC',\n  /** The issue or pull request was locked because the conversation was resolved. */\n  Resolved = 'RESOLVED',\n  /** The issue or pull request was locked because the conversation was spam. */\n  Spam = 'SPAM',\n  /** The issue or pull request was locked because the conversation was too heated. */\n  TooHeated = 'TOO_HEATED'\n}\n\n/** An object that can be locked. */\nexport type Lockable = {\n  /** Reason that the conversation was locked. */\n  activeLockReason?: Maybe<LockReason>;\n  /** `true` if the object is locked */\n  locked: Scalars['Boolean'];\n};\n\n/** Represents a 'locked' event on a given issue or pull request. */\nexport type LockedEvent = Node & {\n  __typename?: 'LockedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Reason that the conversation was locked (optional). */\n  lockReason?: Maybe<LockReason>;\n  /** Object that was locked. */\n  lockable: Lockable;\n};\n\n/** A placeholder user for attribution of imported data on GitHub. */\nexport type Mannequin = Actor & Node & UniformResourceLocatable & {\n  __typename?: 'Mannequin';\n  /** A URL pointing to the GitHub App's public avatar. */\n  avatarUrl: Scalars['URI'];\n  /** The user that has claimed the data attributed to this mannequin. */\n  claimant?: Maybe<User>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The mannequin's email on the source instance. */\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** The username of the actor. */\n  login: Scalars['String'];\n  /** The HTML path to this resource. */\n  resourcePath: Scalars['URI'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The URL to this resource. */\n  url: Scalars['URI'];\n};\n\n\n/** A placeholder user for attribution of imported data on GitHub. */\nexport type MannequinAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n/** Autogenerated input type of MarkDiscussionCommentAsAnswer */\nexport type MarkDiscussionCommentAsAnswerInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the discussion comment to mark as an answer. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of MarkDiscussionCommentAsAnswer */\nexport type MarkDiscussionCommentAsAnswerPayload = {\n  __typename?: 'MarkDiscussionCommentAsAnswerPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The discussion that includes the chosen comment. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of MarkFileAsViewed */\nexport type MarkFileAsViewedInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The path of the file to mark as viewed */\n  path: Scalars['String'];\n  /** The Node ID of the pull request. */\n  pullRequestId: Scalars['ID'];\n};\n\n/** Autogenerated return type of MarkFileAsViewed */\nexport type MarkFileAsViewedPayload = {\n  __typename?: 'MarkFileAsViewedPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of MarkPullRequestReadyForReview */\nexport type MarkPullRequestReadyForReviewInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** ID of the pull request to be marked as ready for review. */\n  pullRequestId: Scalars['ID'];\n};\n\n/** Autogenerated return type of MarkPullRequestReadyForReview */\nexport type MarkPullRequestReadyForReviewPayload = {\n  __typename?: 'MarkPullRequestReadyForReviewPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The pull request that is ready for review. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */\nexport type MarkedAsDuplicateEvent = Node & {\n  __typename?: 'MarkedAsDuplicateEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** The authoritative issue or pull request which has been duplicated by another. */\n  canonical?: Maybe<IssueOrPullRequest>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The issue or pull request which has been marked as a duplicate of another. */\n  duplicate?: Maybe<IssueOrPullRequest>;\n  id: Scalars['ID'];\n  /** Canonical and duplicate belong to different repositories. */\n  isCrossRepository: Scalars['Boolean'];\n};\n\n/** A public description of a Marketplace category. */\nexport type MarketplaceCategory = Node & {\n  __typename?: 'MarketplaceCategory';\n  /** The category's description. */\n  description?: Maybe<Scalars['String']>;\n  /** The technical description of how apps listed in this category work with GitHub. */\n  howItWorks?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** The category's name. */\n  name: Scalars['String'];\n  /** How many Marketplace listings have this as their primary category. */\n  primaryListingCount: Scalars['Int'];\n  /** The HTTP path for this Marketplace category. */\n  resourcePath: Scalars['URI'];\n  /** How many Marketplace listings have this as their secondary category. */\n  secondaryListingCount: Scalars['Int'];\n  /** The short name of the category used in its URL. */\n  slug: Scalars['String'];\n  /** The HTTP URL for this Marketplace category. */\n  url: Scalars['URI'];\n};\n\n/** A listing in the GitHub integration marketplace. */\nexport type MarketplaceListing = Node & {\n  __typename?: 'MarketplaceListing';\n  /** The GitHub App this listing represents. */\n  app?: Maybe<App>;\n  /** URL to the listing owner's company site. */\n  companyUrl?: Maybe<Scalars['URI']>;\n  /** The HTTP path for configuring access to the listing's integration or OAuth app */\n  configurationResourcePath: Scalars['URI'];\n  /** The HTTP URL for configuring access to the listing's integration or OAuth app */\n  configurationUrl: Scalars['URI'];\n  /** URL to the listing's documentation. */\n  documentationUrl?: Maybe<Scalars['URI']>;\n  /** The listing's detailed description. */\n  extendedDescription?: Maybe<Scalars['String']>;\n  /** The listing's detailed description rendered to HTML. */\n  extendedDescriptionHTML: Scalars['HTML'];\n  /** The listing's introductory description. */\n  fullDescription: Scalars['String'];\n  /** The listing's introductory description rendered to HTML. */\n  fullDescriptionHTML: Scalars['HTML'];\n  /** Does this listing have any plans with a free trial? */\n  hasPublishedFreeTrialPlans: Scalars['Boolean'];\n  /** Does this listing have a terms of service link? */\n  hasTermsOfService: Scalars['Boolean'];\n  /** Whether the creator of the app is a verified org */\n  hasVerifiedOwner: Scalars['Boolean'];\n  /** A technical description of how this app works with GitHub. */\n  howItWorks?: Maybe<Scalars['String']>;\n  /** The listing's technical description rendered to HTML. */\n  howItWorksHTML: Scalars['HTML'];\n  id: Scalars['ID'];\n  /** URL to install the product to the viewer's account or organization. */\n  installationUrl?: Maybe<Scalars['URI']>;\n  /** Whether this listing's app has been installed for the current viewer */\n  installedForViewer: Scalars['Boolean'];\n  /** Whether this listing has been removed from the Marketplace. */\n  isArchived: Scalars['Boolean'];\n  /** Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace. */\n  isDraft: Scalars['Boolean'];\n  /** Whether the product this listing represents is available as part of a paid plan. */\n  isPaid: Scalars['Boolean'];\n  /** Whether this listing has been approved for display in the Marketplace. */\n  isPublic: Scalars['Boolean'];\n  /** Whether this listing has been rejected by GitHub for display in the Marketplace. */\n  isRejected: Scalars['Boolean'];\n  /** Whether this listing has been approved for unverified display in the Marketplace. */\n  isUnverified: Scalars['Boolean'];\n  /** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */\n  isUnverifiedPending: Scalars['Boolean'];\n  /** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */\n  isVerificationPendingFromDraft: Scalars['Boolean'];\n  /** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */\n  isVerificationPendingFromUnverified: Scalars['Boolean'];\n  /** Whether this listing has been approved for verified display in the Marketplace. */\n  isVerified: Scalars['Boolean'];\n  /** The hex color code, without the leading '#', for the logo background. */\n  logoBackgroundColor: Scalars['String'];\n  /** URL for the listing's logo image. */\n  logoUrl?: Maybe<Scalars['URI']>;\n  /** The listing's full name. */\n  name: Scalars['String'];\n  /** The listing's very short description without a trailing period or ampersands. */\n  normalizedShortDescription: Scalars['String'];\n  /** URL to the listing's detailed pricing. */\n  pricingUrl?: Maybe<Scalars['URI']>;\n  /** The category that best describes the listing. */\n  primaryCategory: MarketplaceCategory;\n  /** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */\n  privacyPolicyUrl: Scalars['URI'];\n  /** The HTTP path for the Marketplace listing. */\n  resourcePath: Scalars['URI'];\n  /** The URLs for the listing's screenshots. */\n  screenshotUrls: Array<Maybe<Scalars['String']>>;\n  /** An alternate category that describes the listing. */\n  secondaryCategory?: Maybe<MarketplaceCategory>;\n  /** The listing's very short description. */\n  shortDescription: Scalars['String'];\n  /** The short name of the listing used in its URL. */\n  slug: Scalars['String'];\n  /** URL to the listing's status page. */\n  statusUrl?: Maybe<Scalars['URI']>;\n  /** An email address for support for this listing's app. */\n  supportEmail?: Maybe<Scalars['String']>;\n  /** Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL. */\n  supportUrl: Scalars['URI'];\n  /** URL to the listing's terms of service. */\n  termsOfServiceUrl?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the Marketplace listing. */\n  url: Scalars['URI'];\n  /** Can the current viewer add plans for this Marketplace listing. */\n  viewerCanAddPlans: Scalars['Boolean'];\n  /** Can the current viewer approve this Marketplace listing. */\n  viewerCanApprove: Scalars['Boolean'];\n  /** Can the current viewer delist this Marketplace listing. */\n  viewerCanDelist: Scalars['Boolean'];\n  /** Can the current viewer edit this Marketplace listing. */\n  viewerCanEdit: Scalars['Boolean'];\n  /**\n   * Can the current viewer edit the primary and secondary category of this\n   * Marketplace listing.\n   *\n   */\n  viewerCanEditCategories: Scalars['Boolean'];\n  /** Can the current viewer edit the plans for this Marketplace listing. */\n  viewerCanEditPlans: Scalars['Boolean'];\n  /**\n   * Can the current viewer return this Marketplace listing to draft state\n   * so it becomes editable again.\n   *\n   */\n  viewerCanRedraft: Scalars['Boolean'];\n  /**\n   * Can the current viewer reject this Marketplace listing by returning it to\n   * an editable draft state or rejecting it entirely.\n   *\n   */\n  viewerCanReject: Scalars['Boolean'];\n  /**\n   * Can the current viewer request this listing be reviewed for display in\n   * the Marketplace as verified.\n   *\n   */\n  viewerCanRequestApproval: Scalars['Boolean'];\n  /**\n   * Indicates whether the current user has an active subscription to this Marketplace listing.\n   *\n   */\n  viewerHasPurchased: Scalars['Boolean'];\n  /**\n   * Indicates if the current user has purchased a subscription to this Marketplace listing\n   * for all of the organizations the user owns.\n   *\n   */\n  viewerHasPurchasedForAllOrganizations: Scalars['Boolean'];\n  /**\n   * Does the current viewer role allow them to administer this Marketplace listing.\n   *\n   */\n  viewerIsListingAdmin: Scalars['Boolean'];\n};\n\n\n/** A listing in the GitHub integration marketplace. */\nexport type MarketplaceListingLogoUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n/** Look up Marketplace Listings */\nexport type MarketplaceListingConnection = {\n  __typename?: 'MarketplaceListingConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MarketplaceListingEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<MarketplaceListing>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type MarketplaceListingEdge = {\n  __typename?: 'MarketplaceListingEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<MarketplaceListing>;\n};\n\n/** Entities that have members who can set status messages. */\nexport type MemberStatusable = {\n  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */\n  memberStatuses: UserStatusConnection;\n};\n\n\n/** Entities that have members who can set status messages. */\nexport type MemberStatusableMemberStatusesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserStatusOrder>;\n};\n\n/** Audit log entry for a members_can_delete_repos.clear event. */\nexport type MembersCanDeleteReposClearAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & {\n  __typename?: 'MembersCanDeleteReposClearAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']>;\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a members_can_delete_repos.disable event. */\nexport type MembersCanDeleteReposDisableAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & {\n  __typename?: 'MembersCanDeleteReposDisableAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']>;\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a members_can_delete_repos.enable event. */\nexport type MembersCanDeleteReposEnableAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & {\n  __typename?: 'MembersCanDeleteReposEnableAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']>;\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Represents a 'mentioned' event on a given issue or pull request. */\nexport type MentionedEvent = Node & {\n  __typename?: 'MentionedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n/** Autogenerated input type of MergeBranch */\nexport type MergeBranchInput = {\n  /** The email address to associate with this commit. */\n  authorEmail?: InputMaybe<Scalars['String']>;\n  /** The name of the base branch that the provided head will be merged into. */\n  base: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Message to use for the merge commit. If omitted, a default will be used. */\n  commitMessage?: InputMaybe<Scalars['String']>;\n  /** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */\n  head: Scalars['String'];\n  /** The Node ID of the Repository containing the base branch that will be modified. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of MergeBranch */\nexport type MergeBranchPayload = {\n  __typename?: 'MergeBranchPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The resulting merge Commit. */\n  mergeCommit?: Maybe<Commit>;\n};\n\n/** Autogenerated input type of MergePullRequest */\nexport type MergePullRequestInput = {\n  /** The email address to associate with this merge. */\n  authorEmail?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Commit body to use for the merge commit; if omitted, a default message will be used */\n  commitBody?: InputMaybe<Scalars['String']>;\n  /** Commit headline to use for the merge commit; if omitted, a default message will be used. */\n  commitHeadline?: InputMaybe<Scalars['String']>;\n  /** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */\n  expectedHeadOid?: InputMaybe<Scalars['GitObjectID']>;\n  /** The merge method to use. If omitted, defaults to 'MERGE' */\n  mergeMethod?: InputMaybe<PullRequestMergeMethod>;\n  /** ID of the pull request to be merged. */\n  pullRequestId: Scalars['ID'];\n};\n\n/** Autogenerated return type of MergePullRequest */\nexport type MergePullRequestPayload = {\n  __typename?: 'MergePullRequestPayload';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The pull request that was merged. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Whether or not a PullRequest can be merged. */\nexport enum MergeableState {\n  /** The pull request cannot be merged due to merge conflicts. */\n  Conflicting = 'CONFLICTING',\n  /** The pull request can be merged. */\n  Mergeable = 'MERGEABLE',\n  /** The mergeability of the pull request is still being calculated. */\n  Unknown = 'UNKNOWN'\n}\n\n/** Represents a 'merged' event on a given pull request. */\nexport type MergedEvent = Node & UniformResourceLocatable & {\n  __typename?: 'MergedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the commit associated with the `merge` event. */\n  commit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Identifies the Ref associated with the `merge` event. */\n  mergeRef?: Maybe<Ref>;\n  /** Identifies the name of the Ref associated with the `merge` event. */\n  mergeRefName: Scalars['String'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** The HTTP path for this merged event. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this merged event. */\n  url: Scalars['URI'];\n};\n\n/** Represents an Octoshift migration. */\nexport type Migration = {\n  /** The Octoshift migration flag to continue on error. */\n  continueOnError: Scalars['Boolean'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The reason the migration failed. */\n  failureReason?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** The Octoshift migration source. */\n  migrationSource: MigrationSource;\n  /** The Octoshift migration source URL. */\n  sourceUrl: Scalars['URI'];\n  /** The Octoshift migration state. */\n  state: MigrationState;\n};\n\n/** An Octoshift migration source. */\nexport type MigrationSource = Node & {\n  __typename?: 'MigrationSource';\n  id: Scalars['ID'];\n  /** The Octoshift migration source name. */\n  name: Scalars['String'];\n  /** The Octoshift migration source type. */\n  type: MigrationSourceType;\n  /** The Octoshift migration source URL. */\n  url: Scalars['URI'];\n};\n\n/** Represents the different Octoshift migration sources. */\nexport enum MigrationSourceType {\n  /** An Azure DevOps migration source. */\n  AzureDevops = 'AZURE_DEVOPS',\n  /** A Bitbucket Server migration source. */\n  BitbucketServer = 'BITBUCKET_SERVER',\n  /** A GitHub migration source. */\n  Github = 'GITHUB',\n  /** A GitHub Migration API source. */\n  GithubArchive = 'GITHUB_ARCHIVE',\n  /** A GitLab migration source. */\n  Gitlab = 'GITLAB'\n}\n\n/** The Octoshift migration state. */\nexport enum MigrationState {\n  /** The Octoshift migration has failed. */\n  Failed = 'FAILED',\n  /** The Octoshift migration is in progress. */\n  InProgress = 'IN_PROGRESS',\n  /** The Octoshift migration has not started. */\n  NotStarted = 'NOT_STARTED',\n  /** The Octoshift migration has been queued. */\n  Queued = 'QUEUED',\n  /** The Octoshift migration has succeeded. */\n  Succeeded = 'SUCCEEDED'\n}\n\n/** Represents a Milestone object on a given repository. */\nexport type Milestone = Closable & Node & UniformResourceLocatable & {\n  __typename?: 'Milestone';\n  /** `true` if the object is closed (definition of closed may depend on type) */\n  closed: Scalars['Boolean'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the actor who created the milestone. */\n  creator?: Maybe<Actor>;\n  /** Identifies the description of the milestone. */\n  description?: Maybe<Scalars['String']>;\n  /** Identifies the due date of the milestone. */\n  dueOn?: Maybe<Scalars['DateTime']>;\n  id: Scalars['ID'];\n  /** A list of issues associated with the milestone. */\n  issues: IssueConnection;\n  /** Identifies the number of the milestone. */\n  number: Scalars['Int'];\n  /** Identifies the percentage complete for the milestone */\n  progressPercentage: Scalars['Float'];\n  /** A list of pull requests associated with the milestone. */\n  pullRequests: PullRequestConnection;\n  /** The repository associated with this milestone. */\n  repository: Repository;\n  /** The HTTP path for this milestone */\n  resourcePath: Scalars['URI'];\n  /** Identifies the state of the milestone. */\n  state: MilestoneState;\n  /** Identifies the title of the milestone. */\n  title: Scalars['String'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this milestone */\n  url: Scalars['URI'];\n};\n\n\n/** Represents a Milestone object on a given repository. */\nexport type MilestoneIssuesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  filterBy?: InputMaybe<IssueFilters>;\n  first?: InputMaybe<Scalars['Int']>;\n  labels?: InputMaybe<Array<Scalars['String']>>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<IssueState>>;\n};\n\n\n/** Represents a Milestone object on a given repository. */\nexport type MilestonePullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  baseRefName?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  headRefName?: InputMaybe<Scalars['String']>;\n  labels?: InputMaybe<Array<Scalars['String']>>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** The connection type for Milestone. */\nexport type MilestoneConnection = {\n  __typename?: 'MilestoneConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MilestoneEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Milestone>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type MilestoneEdge = {\n  __typename?: 'MilestoneEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Milestone>;\n};\n\n/** Types that can be inside a Milestone. */\nexport type MilestoneItem = Issue | PullRequest;\n\n/** Ordering options for milestone connections. */\nexport type MilestoneOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order milestones by. */\n  field: MilestoneOrderField;\n};\n\n/** Properties by which milestone connections can be ordered. */\nexport enum MilestoneOrderField {\n  /** Order milestones by when they were created. */\n  CreatedAt = 'CREATED_AT',\n  /** Order milestones by when they are due. */\n  DueDate = 'DUE_DATE',\n  /** Order milestones by their number. */\n  Number = 'NUMBER',\n  /** Order milestones by when they were last updated. */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The possible states of a milestone. */\nexport enum MilestoneState {\n  /** A milestone that has been closed. */\n  Closed = 'CLOSED',\n  /** A milestone that is still open. */\n  Open = 'OPEN'\n}\n\n/** Represents a 'milestoned' event on a given issue or pull request. */\nexport type MilestonedEvent = Node & {\n  __typename?: 'MilestonedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Identifies the milestone title associated with the 'milestoned' event. */\n  milestoneTitle: Scalars['String'];\n  /** Object referenced by event. */\n  subject: MilestoneItem;\n};\n\n/** Entities that can be minimized. */\nexport type Minimizable = {\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean'];\n  /** Returns why the comment was minimized. */\n  minimizedReason?: Maybe<Scalars['String']>;\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean'];\n};\n\n/** Autogenerated input type of MinimizeComment */\nexport type MinimizeCommentInput = {\n  /** The classification of comment */\n  classifier: ReportedContentClassifiers;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars['ID'];\n};\n\n/** Autogenerated return type of MinimizeComment */\nexport type MinimizeCommentPayload = {\n  __typename?: 'MinimizeCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The comment that was minimized. */\n  minimizedComment?: Maybe<Minimizable>;\n};\n\n/** Autogenerated input type of MoveProjectCard */\nexport type MoveProjectCardInput = {\n  /** Place the new card after the card with this id. Pass null to place it at the top. */\n  afterCardId?: InputMaybe<Scalars['ID']>;\n  /** The id of the card to move. */\n  cardId: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The id of the column to move it into. */\n  columnId: Scalars['ID'];\n};\n\n/** Autogenerated return type of MoveProjectCard */\nexport type MoveProjectCardPayload = {\n  __typename?: 'MoveProjectCardPayload';\n  /** The new edge of the moved card. */\n  cardEdge?: Maybe<ProjectCardEdge>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of MoveProjectColumn */\nexport type MoveProjectColumnInput = {\n  /** Place the new column after the column with this id. Pass null to place it at the front. */\n  afterColumnId?: InputMaybe<Scalars['ID']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The id of the column to move. */\n  columnId: Scalars['ID'];\n};\n\n/** Autogenerated return type of MoveProjectColumn */\nexport type MoveProjectColumnPayload = {\n  __typename?: 'MoveProjectColumnPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The new edge of the moved column. */\n  columnEdge?: Maybe<ProjectColumnEdge>;\n};\n\n/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */\nexport type MovedColumnsInProjectEvent = Node & {\n  __typename?: 'MovedColumnsInProjectEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type Mutation = {\n  __typename?: 'Mutation';\n  /** Clear all of a customer's queued migrations */\n  abortQueuedMigrations?: Maybe<AbortQueuedMigrationsPayload>;\n  /** Accepts a pending invitation for a user to become an administrator of an enterprise. */\n  acceptEnterpriseAdministratorInvitation?: Maybe<AcceptEnterpriseAdministratorInvitationPayload>;\n  /** Applies a suggested topic to the repository. */\n  acceptTopicSuggestion?: Maybe<AcceptTopicSuggestionPayload>;\n  /** Adds assignees to an assignable object. */\n  addAssigneesToAssignable?: Maybe<AddAssigneesToAssignablePayload>;\n  /** Adds a comment to an Issue or Pull Request. */\n  addComment?: Maybe<AddCommentPayload>;\n  /** Adds a comment to a Discussion, possibly as a reply to another comment. */\n  addDiscussionComment?: Maybe<AddDiscussionCommentPayload>;\n  /** Adds a support entitlement to an enterprise member. */\n  addEnterpriseSupportEntitlement?: Maybe<AddEnterpriseSupportEntitlementPayload>;\n  /** Adds labels to a labelable object. */\n  addLabelsToLabelable?: Maybe<AddLabelsToLabelablePayload>;\n  /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */\n  addProjectCard?: Maybe<AddProjectCardPayload>;\n  /** Adds a column to a Project. */\n  addProjectColumn?: Maybe<AddProjectColumnPayload>;\n  /** Adds an existing item (Issue or PullRequest) to a Project. */\n  addProjectNextItem?: Maybe<AddProjectNextItemPayload>;\n  /** Adds a review to a Pull Request. */\n  addPullRequestReview?: Maybe<AddPullRequestReviewPayload>;\n  /** Adds a comment to a review. */\n  addPullRequestReviewComment?: Maybe<AddPullRequestReviewCommentPayload>;\n  /** Adds a new thread to a pending Pull Request Review. */\n  addPullRequestReviewThread?: Maybe<AddPullRequestReviewThreadPayload>;\n  /** Adds a reaction to a subject. */\n  addReaction?: Maybe<AddReactionPayload>;\n  /** Adds a star to a Starrable. */\n  addStar?: Maybe<AddStarPayload>;\n  /** Add an upvote to a discussion or discussion comment. */\n  addUpvote?: Maybe<AddUpvotePayload>;\n  /** Adds a verifiable domain to an owning account. */\n  addVerifiableDomain?: Maybe<AddVerifiableDomainPayload>;\n  /** Approve all pending deployments under one or more environments */\n  approveDeployments?: Maybe<ApproveDeploymentsPayload>;\n  /** Approve a verifiable domain for notification delivery. */\n  approveVerifiableDomain?: Maybe<ApproveVerifiableDomainPayload>;\n  /** Marks a repository as archived. */\n  archiveRepository?: Maybe<ArchiveRepositoryPayload>;\n  /** Cancels a pending invitation for an administrator to join an enterprise. */\n  cancelEnterpriseAdminInvitation?: Maybe<CancelEnterpriseAdminInvitationPayload>;\n  /** Cancel an active sponsorship. */\n  cancelSponsorship?: Maybe<CancelSponsorshipPayload>;\n  /** Update your status on GitHub. */\n  changeUserStatus?: Maybe<ChangeUserStatusPayload>;\n  /** Clears all labels from a labelable object. */\n  clearLabelsFromLabelable?: Maybe<ClearLabelsFromLabelablePayload>;\n  /** Creates a new project by cloning configuration from an existing project. */\n  cloneProject?: Maybe<CloneProjectPayload>;\n  /** Create a new repository with the same files and directory structure as a template repository. */\n  cloneTemplateRepository?: Maybe<CloneTemplateRepositoryPayload>;\n  /** Close an issue. */\n  closeIssue?: Maybe<CloseIssuePayload>;\n  /** Close a pull request. */\n  closePullRequest?: Maybe<ClosePullRequestPayload>;\n  /** Convert a project note card to one associated with a newly created issue. */\n  convertProjectCardNoteToIssue?: Maybe<ConvertProjectCardNoteToIssuePayload>;\n  /** Converts a pull request to draft */\n  convertPullRequestToDraft?: Maybe<ConvertPullRequestToDraftPayload>;\n  /** Create a new branch protection rule */\n  createBranchProtectionRule?: Maybe<CreateBranchProtectionRulePayload>;\n  /** Create a check run. */\n  createCheckRun?: Maybe<CreateCheckRunPayload>;\n  /** Create a check suite */\n  createCheckSuite?: Maybe<CreateCheckSuitePayload>;\n  /**\n   * Appends a commit to the given branch as the authenticated user.\n   *\n   * This mutation creates a commit whose parent is the HEAD of the provided\n   * branch and also updates that branch to point to the new commit.\n   * It can be thought of as similar to `git commit`.\n   *\n   * ### Locating a Branch\n   *\n   * Commits are appended to a `branch` of type `Ref`.\n   * This must refer to a git branch (i.e.  the fully qualified path must\n   * begin with `refs/heads/`, although including this prefix is optional.\n   *\n   * Callers may specify the `branch` to commit to either by its global node\n   * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For\n   * more details see the documentation for `CommittableBranch`.\n   *\n   * ### Describing Changes\n   *\n   * `fileChanges` are specified as a `FilesChanges` object describing\n   * `FileAdditions` and `FileDeletions`.\n   *\n   * Please see the documentation for `FileChanges` for more information on\n   * how to use this argument to describe any set of file changes.\n   *\n   * ### Authorship\n   *\n   * Similar to the web commit interface, this mutation does not support\n   * specifying the author or committer of the commit and will not add\n   * support for this in the future.\n   *\n   * A commit created by a successful execution of this mutation will be\n   * authored by the owner of the credential which authenticates the API\n   * request.  The committer will be identical to that of commits authored\n   * using the web interface.\n   *\n   * If you need full control over author and committer information, please\n   * use the Git Database REST API instead.\n   *\n   * ### Commit Signing\n   *\n   * Commits made using this mutation are automatically signed by GitHub if\n   * supported and will be marked as verified in the user interface.\n   *\n   */\n  createCommitOnBranch?: Maybe<CreateCommitOnBranchPayload>;\n  /** Create a discussion. */\n  createDiscussion?: Maybe<CreateDiscussionPayload>;\n  /** Creates an organization as part of an enterprise account. */\n  createEnterpriseOrganization?: Maybe<CreateEnterpriseOrganizationPayload>;\n  /** Creates an environment or simply returns it if already exists. */\n  createEnvironment?: Maybe<CreateEnvironmentPayload>;\n  /** Creates a new IP allow list entry. */\n  createIpAllowListEntry?: Maybe<CreateIpAllowListEntryPayload>;\n  /** Creates a new issue. */\n  createIssue?: Maybe<CreateIssuePayload>;\n  /** Creates an Octoshift migration source. */\n  createMigrationSource?: Maybe<CreateMigrationSourcePayload>;\n  /** Creates a new project. */\n  createProject?: Maybe<CreateProjectPayload>;\n  /** Create a new pull request */\n  createPullRequest?: Maybe<CreatePullRequestPayload>;\n  /** Create a new Git Ref. */\n  createRef?: Maybe<CreateRefPayload>;\n  /** Create a new repository. */\n  createRepository?: Maybe<CreateRepositoryPayload>;\n  /** Create a new payment tier for your GitHub Sponsors profile. */\n  createSponsorsTier?: Maybe<CreateSponsorsTierPayload>;\n  /** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */\n  createSponsorship?: Maybe<CreateSponsorshipPayload>;\n  /** Creates a new team discussion. */\n  createTeamDiscussion?: Maybe<CreateTeamDiscussionPayload>;\n  /** Creates a new team discussion comment. */\n  createTeamDiscussionComment?: Maybe<CreateTeamDiscussionCommentPayload>;\n  /** Rejects a suggested topic for the repository. */\n  declineTopicSuggestion?: Maybe<DeclineTopicSuggestionPayload>;\n  /** Delete a branch protection rule */\n  deleteBranchProtectionRule?: Maybe<DeleteBranchProtectionRulePayload>;\n  /** Deletes a deployment. */\n  deleteDeployment?: Maybe<DeleteDeploymentPayload>;\n  /** Delete a discussion and all of its replies. */\n  deleteDiscussion?: Maybe<DeleteDiscussionPayload>;\n  /** Delete a discussion comment. If it has replies, wipe it instead. */\n  deleteDiscussionComment?: Maybe<DeleteDiscussionCommentPayload>;\n  /** Deletes an environment */\n  deleteEnvironment?: Maybe<DeleteEnvironmentPayload>;\n  /** Deletes an IP allow list entry. */\n  deleteIpAllowListEntry?: Maybe<DeleteIpAllowListEntryPayload>;\n  /** Deletes an Issue object. */\n  deleteIssue?: Maybe<DeleteIssuePayload>;\n  /** Deletes an IssueComment object. */\n  deleteIssueComment?: Maybe<DeleteIssueCommentPayload>;\n  /** Deletes a project. */\n  deleteProject?: Maybe<DeleteProjectPayload>;\n  /** Deletes a project card. */\n  deleteProjectCard?: Maybe<DeleteProjectCardPayload>;\n  /** Deletes a project column. */\n  deleteProjectColumn?: Maybe<DeleteProjectColumnPayload>;\n  /** Deletes an item from a Project. */\n  deleteProjectNextItem?: Maybe<DeleteProjectNextItemPayload>;\n  /** Deletes a pull request review. */\n  deletePullRequestReview?: Maybe<DeletePullRequestReviewPayload>;\n  /** Deletes a pull request review comment. */\n  deletePullRequestReviewComment?: Maybe<DeletePullRequestReviewCommentPayload>;\n  /** Delete a Git Ref. */\n  deleteRef?: Maybe<DeleteRefPayload>;\n  /** Deletes a team discussion. */\n  deleteTeamDiscussion?: Maybe<DeleteTeamDiscussionPayload>;\n  /** Deletes a team discussion comment. */\n  deleteTeamDiscussionComment?: Maybe<DeleteTeamDiscussionCommentPayload>;\n  /** Deletes a verifiable domain. */\n  deleteVerifiableDomain?: Maybe<DeleteVerifiableDomainPayload>;\n  /** Disable auto merge on the given pull request */\n  disablePullRequestAutoMerge?: Maybe<DisablePullRequestAutoMergePayload>;\n  /** Dismisses an approved or rejected pull request review. */\n  dismissPullRequestReview?: Maybe<DismissPullRequestReviewPayload>;\n  /** Dismisses the Dependabot alert. */\n  dismissRepositoryVulnerabilityAlert?: Maybe<DismissRepositoryVulnerabilityAlertPayload>;\n  /** Enable the default auto-merge on a pull request. */\n  enablePullRequestAutoMerge?: Maybe<EnablePullRequestAutoMergePayload>;\n  /** Follow a user. */\n  followUser?: Maybe<FollowUserPayload>;\n  /** Grant the migrator role to a user for all organizations under an enterprise account. */\n  grantEnterpriseOrganizationsMigratorRole?: Maybe<GrantEnterpriseOrganizationsMigratorRolePayload>;\n  /** Grant the migrator role to a user or a team. */\n  grantMigratorRole?: Maybe<GrantMigratorRolePayload>;\n  /** Invite someone to become an administrator of the enterprise. */\n  inviteEnterpriseAdmin?: Maybe<InviteEnterpriseAdminPayload>;\n  /** Creates a repository link for a project. */\n  linkRepositoryToProject?: Maybe<LinkRepositoryToProjectPayload>;\n  /** Lock a lockable object */\n  lockLockable?: Maybe<LockLockablePayload>;\n  /** Mark a discussion comment as the chosen answer for discussions in an answerable category. */\n  markDiscussionCommentAsAnswer?: Maybe<MarkDiscussionCommentAsAnswerPayload>;\n  /** Mark a pull request file as viewed */\n  markFileAsViewed?: Maybe<MarkFileAsViewedPayload>;\n  /** Marks a pull request ready for review. */\n  markPullRequestReadyForReview?: Maybe<MarkPullRequestReadyForReviewPayload>;\n  /** Merge a head into a branch. */\n  mergeBranch?: Maybe<MergeBranchPayload>;\n  /** Merge a pull request. */\n  mergePullRequest?: Maybe<MergePullRequestPayload>;\n  /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */\n  minimizeComment?: Maybe<MinimizeCommentPayload>;\n  /** Moves a project card to another place. */\n  moveProjectCard?: Maybe<MoveProjectCardPayload>;\n  /** Moves a project column to another place. */\n  moveProjectColumn?: Maybe<MoveProjectColumnPayload>;\n  /** Pin an issue to a repository */\n  pinIssue?: Maybe<PinIssuePayload>;\n  /** Regenerates the identity provider recovery codes for an enterprise */\n  regenerateEnterpriseIdentityProviderRecoveryCodes?: Maybe<RegenerateEnterpriseIdentityProviderRecoveryCodesPayload>;\n  /** Regenerates a verifiable domain's verification token. */\n  regenerateVerifiableDomainToken?: Maybe<RegenerateVerifiableDomainTokenPayload>;\n  /** Reject all pending deployments under one or more environments */\n  rejectDeployments?: Maybe<RejectDeploymentsPayload>;\n  /** Removes assignees from an assignable object. */\n  removeAssigneesFromAssignable?: Maybe<RemoveAssigneesFromAssignablePayload>;\n  /** Removes an administrator from the enterprise. */\n  removeEnterpriseAdmin?: Maybe<RemoveEnterpriseAdminPayload>;\n  /** Removes the identity provider from an enterprise */\n  removeEnterpriseIdentityProvider?: Maybe<RemoveEnterpriseIdentityProviderPayload>;\n  /** Removes an organization from the enterprise */\n  removeEnterpriseOrganization?: Maybe<RemoveEnterpriseOrganizationPayload>;\n  /** Removes a support entitlement from an enterprise member. */\n  removeEnterpriseSupportEntitlement?: Maybe<RemoveEnterpriseSupportEntitlementPayload>;\n  /** Removes labels from a Labelable object. */\n  removeLabelsFromLabelable?: Maybe<RemoveLabelsFromLabelablePayload>;\n  /** Removes outside collaborator from all repositories in an organization. */\n  removeOutsideCollaborator?: Maybe<RemoveOutsideCollaboratorPayload>;\n  /** Removes a reaction from a subject. */\n  removeReaction?: Maybe<RemoveReactionPayload>;\n  /** Removes a star from a Starrable. */\n  removeStar?: Maybe<RemoveStarPayload>;\n  /** Remove an upvote to a discussion or discussion comment. */\n  removeUpvote?: Maybe<RemoveUpvotePayload>;\n  /** Reopen a issue. */\n  reopenIssue?: Maybe<ReopenIssuePayload>;\n  /** Reopen a pull request. */\n  reopenPullRequest?: Maybe<ReopenPullRequestPayload>;\n  /** Set review requests on a pull request. */\n  requestReviews?: Maybe<RequestReviewsPayload>;\n  /** Rerequests an existing check suite. */\n  rerequestCheckSuite?: Maybe<RerequestCheckSuitePayload>;\n  /** Marks a review thread as resolved. */\n  resolveReviewThread?: Maybe<ResolveReviewThreadPayload>;\n  /** Revoke the migrator role to a user for all organizations under an enterprise account. */\n  revokeEnterpriseOrganizationsMigratorRole?: Maybe<RevokeEnterpriseOrganizationsMigratorRolePayload>;\n  /** Revoke the migrator role from a user or a team. */\n  revokeMigratorRole?: Maybe<RevokeMigratorRolePayload>;\n  /** Creates or updates the identity provider for an enterprise. */\n  setEnterpriseIdentityProvider?: Maybe<SetEnterpriseIdentityProviderPayload>;\n  /** Set an organization level interaction limit for an organization's public repositories. */\n  setOrganizationInteractionLimit?: Maybe<SetOrganizationInteractionLimitPayload>;\n  /** Sets an interaction limit setting for a repository. */\n  setRepositoryInteractionLimit?: Maybe<SetRepositoryInteractionLimitPayload>;\n  /** Set a user level interaction limit for an user's public repositories. */\n  setUserInteractionLimit?: Maybe<SetUserInteractionLimitPayload>;\n  /** Start a repository migration. */\n  startRepositoryMigration?: Maybe<StartRepositoryMigrationPayload>;\n  /** Submits a pending pull request review. */\n  submitPullRequestReview?: Maybe<SubmitPullRequestReviewPayload>;\n  /** Transfer an issue to a different repository */\n  transferIssue?: Maybe<TransferIssuePayload>;\n  /** Unarchives a repository. */\n  unarchiveRepository?: Maybe<UnarchiveRepositoryPayload>;\n  /** Unfollow a user. */\n  unfollowUser?: Maybe<UnfollowUserPayload>;\n  /** Deletes a repository link from a project. */\n  unlinkRepositoryFromProject?: Maybe<UnlinkRepositoryFromProjectPayload>;\n  /** Unlock a lockable object */\n  unlockLockable?: Maybe<UnlockLockablePayload>;\n  /** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */\n  unmarkDiscussionCommentAsAnswer?: Maybe<UnmarkDiscussionCommentAsAnswerPayload>;\n  /** Unmark a pull request file as viewed */\n  unmarkFileAsViewed?: Maybe<UnmarkFileAsViewedPayload>;\n  /** Unmark an issue as a duplicate of another issue. */\n  unmarkIssueAsDuplicate?: Maybe<UnmarkIssueAsDuplicatePayload>;\n  /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */\n  unminimizeComment?: Maybe<UnminimizeCommentPayload>;\n  /** Unpin a pinned issue from a repository */\n  unpinIssue?: Maybe<UnpinIssuePayload>;\n  /** Marks a review thread as unresolved. */\n  unresolveReviewThread?: Maybe<UnresolveReviewThreadPayload>;\n  /** Create a new branch protection rule */\n  updateBranchProtectionRule?: Maybe<UpdateBranchProtectionRulePayload>;\n  /** Update a check run */\n  updateCheckRun?: Maybe<UpdateCheckRunPayload>;\n  /** Modifies the settings of an existing check suite */\n  updateCheckSuitePreferences?: Maybe<UpdateCheckSuitePreferencesPayload>;\n  /** Update a discussion */\n  updateDiscussion?: Maybe<UpdateDiscussionPayload>;\n  /** Update the contents of a comment on a Discussion */\n  updateDiscussionComment?: Maybe<UpdateDiscussionCommentPayload>;\n  /** Updates the role of an enterprise administrator. */\n  updateEnterpriseAdministratorRole?: Maybe<UpdateEnterpriseAdministratorRolePayload>;\n  /** Sets whether private repository forks are enabled for an enterprise. */\n  updateEnterpriseAllowPrivateRepositoryForkingSetting?: Maybe<UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload>;\n  /** Sets the base repository permission for organizations in an enterprise. */\n  updateEnterpriseDefaultRepositoryPermissionSetting?: Maybe<UpdateEnterpriseDefaultRepositoryPermissionSettingPayload>;\n  /** Sets whether organization members with admin permissions on a repository can change repository visibility. */\n  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: Maybe<UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload>;\n  /** Sets the members can create repositories setting for an enterprise. */\n  updateEnterpriseMembersCanCreateRepositoriesSetting?: Maybe<UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload>;\n  /** Sets the members can delete issues setting for an enterprise. */\n  updateEnterpriseMembersCanDeleteIssuesSetting?: Maybe<UpdateEnterpriseMembersCanDeleteIssuesSettingPayload>;\n  /** Sets the members can delete repositories setting for an enterprise. */\n  updateEnterpriseMembersCanDeleteRepositoriesSetting?: Maybe<UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload>;\n  /** Sets whether members can invite collaborators are enabled for an enterprise. */\n  updateEnterpriseMembersCanInviteCollaboratorsSetting?: Maybe<UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload>;\n  /** Sets whether or not an organization admin can make purchases. */\n  updateEnterpriseMembersCanMakePurchasesSetting?: Maybe<UpdateEnterpriseMembersCanMakePurchasesSettingPayload>;\n  /** Sets the members can update protected branches setting for an enterprise. */\n  updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: Maybe<UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload>;\n  /** Sets the members can view dependency insights for an enterprise. */\n  updateEnterpriseMembersCanViewDependencyInsightsSetting?: Maybe<UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload>;\n  /** Sets whether organization projects are enabled for an enterprise. */\n  updateEnterpriseOrganizationProjectsSetting?: Maybe<UpdateEnterpriseOrganizationProjectsSettingPayload>;\n  /** Updates the role of an enterprise owner with an organization. */\n  updateEnterpriseOwnerOrganizationRole?: Maybe<UpdateEnterpriseOwnerOrganizationRolePayload>;\n  /** Updates an enterprise's profile. */\n  updateEnterpriseProfile?: Maybe<UpdateEnterpriseProfilePayload>;\n  /** Sets whether repository projects are enabled for a enterprise. */\n  updateEnterpriseRepositoryProjectsSetting?: Maybe<UpdateEnterpriseRepositoryProjectsSettingPayload>;\n  /** Sets whether team discussions are enabled for an enterprise. */\n  updateEnterpriseTeamDiscussionsSetting?: Maybe<UpdateEnterpriseTeamDiscussionsSettingPayload>;\n  /** Sets whether two factor authentication is required for all users in an enterprise. */\n  updateEnterpriseTwoFactorAuthenticationRequiredSetting?: Maybe<UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload>;\n  /** Updates an environment. */\n  updateEnvironment?: Maybe<UpdateEnvironmentPayload>;\n  /** Sets whether an IP allow list is enabled on an owner. */\n  updateIpAllowListEnabledSetting?: Maybe<UpdateIpAllowListEnabledSettingPayload>;\n  /** Updates an IP allow list entry. */\n  updateIpAllowListEntry?: Maybe<UpdateIpAllowListEntryPayload>;\n  /** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */\n  updateIpAllowListForInstalledAppsEnabledSetting?: Maybe<UpdateIpAllowListForInstalledAppsEnabledSettingPayload>;\n  /** Updates an Issue. */\n  updateIssue?: Maybe<UpdateIssuePayload>;\n  /** Updates an IssueComment object. */\n  updateIssueComment?: Maybe<UpdateIssueCommentPayload>;\n  /** Update the setting to restrict notifications to only verified or approved domains available to an owner. */\n  updateNotificationRestrictionSetting?: Maybe<UpdateNotificationRestrictionSettingPayload>;\n  /** Sets whether private repository forks are enabled for an organization. */\n  updateOrganizationAllowPrivateRepositoryForkingSetting?: Maybe<UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload>;\n  /** Updates an existing project. */\n  updateProject?: Maybe<UpdateProjectPayload>;\n  /** Updates an existing project card. */\n  updateProjectCard?: Maybe<UpdateProjectCardPayload>;\n  /** Updates an existing project column. */\n  updateProjectColumn?: Maybe<UpdateProjectColumnPayload>;\n  /** Updates an existing project (beta). */\n  updateProjectNext?: Maybe<UpdateProjectNextPayload>;\n  /** Updates a field of an item from a Project. */\n  updateProjectNextItemField?: Maybe<UpdateProjectNextItemFieldPayload>;\n  /** Update a pull request */\n  updatePullRequest?: Maybe<UpdatePullRequestPayload>;\n  /** Merge HEAD from upstream branch into pull request branch */\n  updatePullRequestBranch?: Maybe<UpdatePullRequestBranchPayload>;\n  /** Updates the body of a pull request review. */\n  updatePullRequestReview?: Maybe<UpdatePullRequestReviewPayload>;\n  /** Updates a pull request review comment. */\n  updatePullRequestReviewComment?: Maybe<UpdatePullRequestReviewCommentPayload>;\n  /** Update a Git Ref. */\n  updateRef?: Maybe<UpdateRefPayload>;\n  /** Update information about a repository. */\n  updateRepository?: Maybe<UpdateRepositoryPayload>;\n  /** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */\n  updateSponsorshipPreferences?: Maybe<UpdateSponsorshipPreferencesPayload>;\n  /** Updates the state for subscribable subjects. */\n  updateSubscription?: Maybe<UpdateSubscriptionPayload>;\n  /** Updates a team discussion. */\n  updateTeamDiscussion?: Maybe<UpdateTeamDiscussionPayload>;\n  /** Updates a discussion comment. */\n  updateTeamDiscussionComment?: Maybe<UpdateTeamDiscussionCommentPayload>;\n  /** Replaces the repository's topics with the given topics. */\n  updateTopics?: Maybe<UpdateTopicsPayload>;\n  /** Verify that a verifiable domain has the expected DNS record. */\n  verifyVerifiableDomain?: Maybe<VerifyVerifiableDomainPayload>;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAbortQueuedMigrationsArgs = {\n  input: AbortQueuedMigrationsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAcceptEnterpriseAdministratorInvitationArgs = {\n  input: AcceptEnterpriseAdministratorInvitationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAcceptTopicSuggestionArgs = {\n  input: AcceptTopicSuggestionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddAssigneesToAssignableArgs = {\n  input: AddAssigneesToAssignableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddCommentArgs = {\n  input: AddCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddDiscussionCommentArgs = {\n  input: AddDiscussionCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddEnterpriseSupportEntitlementArgs = {\n  input: AddEnterpriseSupportEntitlementInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddLabelsToLabelableArgs = {\n  input: AddLabelsToLabelableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddProjectCardArgs = {\n  input: AddProjectCardInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddProjectColumnArgs = {\n  input: AddProjectColumnInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddProjectNextItemArgs = {\n  input: AddProjectNextItemInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddPullRequestReviewArgs = {\n  input: AddPullRequestReviewInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddPullRequestReviewCommentArgs = {\n  input: AddPullRequestReviewCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddPullRequestReviewThreadArgs = {\n  input: AddPullRequestReviewThreadInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddReactionArgs = {\n  input: AddReactionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddStarArgs = {\n  input: AddStarInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddUpvoteArgs = {\n  input: AddUpvoteInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddVerifiableDomainArgs = {\n  input: AddVerifiableDomainInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationApproveDeploymentsArgs = {\n  input: ApproveDeploymentsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationApproveVerifiableDomainArgs = {\n  input: ApproveVerifiableDomainInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationArchiveRepositoryArgs = {\n  input: ArchiveRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCancelEnterpriseAdminInvitationArgs = {\n  input: CancelEnterpriseAdminInvitationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCancelSponsorshipArgs = {\n  input: CancelSponsorshipInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationChangeUserStatusArgs = {\n  input: ChangeUserStatusInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationClearLabelsFromLabelableArgs = {\n  input: ClearLabelsFromLabelableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCloneProjectArgs = {\n  input: CloneProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCloneTemplateRepositoryArgs = {\n  input: CloneTemplateRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCloseIssueArgs = {\n  input: CloseIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationClosePullRequestArgs = {\n  input: ClosePullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationConvertProjectCardNoteToIssueArgs = {\n  input: ConvertProjectCardNoteToIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationConvertPullRequestToDraftArgs = {\n  input: ConvertPullRequestToDraftInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateBranchProtectionRuleArgs = {\n  input: CreateBranchProtectionRuleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateCheckRunArgs = {\n  input: CreateCheckRunInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateCheckSuiteArgs = {\n  input: CreateCheckSuiteInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateCommitOnBranchArgs = {\n  input: CreateCommitOnBranchInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateDiscussionArgs = {\n  input: CreateDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateEnterpriseOrganizationArgs = {\n  input: CreateEnterpriseOrganizationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateEnvironmentArgs = {\n  input: CreateEnvironmentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateIpAllowListEntryArgs = {\n  input: CreateIpAllowListEntryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateIssueArgs = {\n  input: CreateIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateMigrationSourceArgs = {\n  input: CreateMigrationSourceInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateProjectArgs = {\n  input: CreateProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreatePullRequestArgs = {\n  input: CreatePullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateRefArgs = {\n  input: CreateRefInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateRepositoryArgs = {\n  input: CreateRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateSponsorsTierArgs = {\n  input: CreateSponsorsTierInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateSponsorshipArgs = {\n  input: CreateSponsorshipInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateTeamDiscussionArgs = {\n  input: CreateTeamDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateTeamDiscussionCommentArgs = {\n  input: CreateTeamDiscussionCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeclineTopicSuggestionArgs = {\n  input: DeclineTopicSuggestionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteBranchProtectionRuleArgs = {\n  input: DeleteBranchProtectionRuleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteDeploymentArgs = {\n  input: DeleteDeploymentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteDiscussionArgs = {\n  input: DeleteDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteDiscussionCommentArgs = {\n  input: DeleteDiscussionCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteEnvironmentArgs = {\n  input: DeleteEnvironmentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteIpAllowListEntryArgs = {\n  input: DeleteIpAllowListEntryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteIssueArgs = {\n  input: DeleteIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteIssueCommentArgs = {\n  input: DeleteIssueCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectArgs = {\n  input: DeleteProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectCardArgs = {\n  input: DeleteProjectCardInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectColumnArgs = {\n  input: DeleteProjectColumnInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectNextItemArgs = {\n  input: DeleteProjectNextItemInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeletePullRequestReviewArgs = {\n  input: DeletePullRequestReviewInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeletePullRequestReviewCommentArgs = {\n  input: DeletePullRequestReviewCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteRefArgs = {\n  input: DeleteRefInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteTeamDiscussionArgs = {\n  input: DeleteTeamDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteTeamDiscussionCommentArgs = {\n  input: DeleteTeamDiscussionCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteVerifiableDomainArgs = {\n  input: DeleteVerifiableDomainInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDisablePullRequestAutoMergeArgs = {\n  input: DisablePullRequestAutoMergeInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDismissPullRequestReviewArgs = {\n  input: DismissPullRequestReviewInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDismissRepositoryVulnerabilityAlertArgs = {\n  input: DismissRepositoryVulnerabilityAlertInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationEnablePullRequestAutoMergeArgs = {\n  input: EnablePullRequestAutoMergeInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationFollowUserArgs = {\n  input: FollowUserInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationGrantEnterpriseOrganizationsMigratorRoleArgs = {\n  input: GrantEnterpriseOrganizationsMigratorRoleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationGrantMigratorRoleArgs = {\n  input: GrantMigratorRoleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationInviteEnterpriseAdminArgs = {\n  input: InviteEnterpriseAdminInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationLinkRepositoryToProjectArgs = {\n  input: LinkRepositoryToProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationLockLockableArgs = {\n  input: LockLockableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMarkDiscussionCommentAsAnswerArgs = {\n  input: MarkDiscussionCommentAsAnswerInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMarkFileAsViewedArgs = {\n  input: MarkFileAsViewedInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMarkPullRequestReadyForReviewArgs = {\n  input: MarkPullRequestReadyForReviewInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMergeBranchArgs = {\n  input: MergeBranchInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMergePullRequestArgs = {\n  input: MergePullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMinimizeCommentArgs = {\n  input: MinimizeCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMoveProjectCardArgs = {\n  input: MoveProjectCardInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMoveProjectColumnArgs = {\n  input: MoveProjectColumnInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationPinIssueArgs = {\n  input: PinIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRegenerateEnterpriseIdentityProviderRecoveryCodesArgs = {\n  input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRegenerateVerifiableDomainTokenArgs = {\n  input: RegenerateVerifiableDomainTokenInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRejectDeploymentsArgs = {\n  input: RejectDeploymentsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveAssigneesFromAssignableArgs = {\n  input: RemoveAssigneesFromAssignableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseAdminArgs = {\n  input: RemoveEnterpriseAdminInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseIdentityProviderArgs = {\n  input: RemoveEnterpriseIdentityProviderInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseOrganizationArgs = {\n  input: RemoveEnterpriseOrganizationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseSupportEntitlementArgs = {\n  input: RemoveEnterpriseSupportEntitlementInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveLabelsFromLabelableArgs = {\n  input: RemoveLabelsFromLabelableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveOutsideCollaboratorArgs = {\n  input: RemoveOutsideCollaboratorInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveReactionArgs = {\n  input: RemoveReactionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveStarArgs = {\n  input: RemoveStarInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveUpvoteArgs = {\n  input: RemoveUpvoteInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationReopenIssueArgs = {\n  input: ReopenIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationReopenPullRequestArgs = {\n  input: ReopenPullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRequestReviewsArgs = {\n  input: RequestReviewsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRerequestCheckSuiteArgs = {\n  input: RerequestCheckSuiteInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationResolveReviewThreadArgs = {\n  input: ResolveReviewThreadInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRevokeEnterpriseOrganizationsMigratorRoleArgs = {\n  input: RevokeEnterpriseOrganizationsMigratorRoleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRevokeMigratorRoleArgs = {\n  input: RevokeMigratorRoleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSetEnterpriseIdentityProviderArgs = {\n  input: SetEnterpriseIdentityProviderInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSetOrganizationInteractionLimitArgs = {\n  input: SetOrganizationInteractionLimitInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSetRepositoryInteractionLimitArgs = {\n  input: SetRepositoryInteractionLimitInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSetUserInteractionLimitArgs = {\n  input: SetUserInteractionLimitInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationStartRepositoryMigrationArgs = {\n  input: StartRepositoryMigrationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSubmitPullRequestReviewArgs = {\n  input: SubmitPullRequestReviewInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationTransferIssueArgs = {\n  input: TransferIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnarchiveRepositoryArgs = {\n  input: UnarchiveRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnfollowUserArgs = {\n  input: UnfollowUserInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnlinkRepositoryFromProjectArgs = {\n  input: UnlinkRepositoryFromProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnlockLockableArgs = {\n  input: UnlockLockableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnmarkDiscussionCommentAsAnswerArgs = {\n  input: UnmarkDiscussionCommentAsAnswerInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnmarkFileAsViewedArgs = {\n  input: UnmarkFileAsViewedInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnmarkIssueAsDuplicateArgs = {\n  input: UnmarkIssueAsDuplicateInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnminimizeCommentArgs = {\n  input: UnminimizeCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnpinIssueArgs = {\n  input: UnpinIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnresolveReviewThreadArgs = {\n  input: UnresolveReviewThreadInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateBranchProtectionRuleArgs = {\n  input: UpdateBranchProtectionRuleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateCheckRunArgs = {\n  input: UpdateCheckRunInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateCheckSuitePreferencesArgs = {\n  input: UpdateCheckSuitePreferencesInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateDiscussionArgs = {\n  input: UpdateDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateDiscussionCommentArgs = {\n  input: UpdateDiscussionCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseAdministratorRoleArgs = {\n  input: UpdateEnterpriseAdministratorRoleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs = {\n  input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseDefaultRepositoryPermissionSettingArgs = {\n  input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs = {\n  input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanCreateRepositoriesSettingArgs = {\n  input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanDeleteIssuesSettingArgs = {\n  input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs = {\n  input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs = {\n  input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanMakePurchasesSettingArgs = {\n  input: UpdateEnterpriseMembersCanMakePurchasesSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs = {\n  input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs = {\n  input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseOrganizationProjectsSettingArgs = {\n  input: UpdateEnterpriseOrganizationProjectsSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseOwnerOrganizationRoleArgs = {\n  input: UpdateEnterpriseOwnerOrganizationRoleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseProfileArgs = {\n  input: UpdateEnterpriseProfileInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseRepositoryProjectsSettingArgs = {\n  input: UpdateEnterpriseRepositoryProjectsSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseTeamDiscussionsSettingArgs = {\n  input: UpdateEnterpriseTeamDiscussionsSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs = {\n  input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnvironmentArgs = {\n  input: UpdateEnvironmentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIpAllowListEnabledSettingArgs = {\n  input: UpdateIpAllowListEnabledSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIpAllowListEntryArgs = {\n  input: UpdateIpAllowListEntryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIpAllowListForInstalledAppsEnabledSettingArgs = {\n  input: UpdateIpAllowListForInstalledAppsEnabledSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIssueArgs = {\n  input: UpdateIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIssueCommentArgs = {\n  input: UpdateIssueCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateNotificationRestrictionSettingArgs = {\n  input: UpdateNotificationRestrictionSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateOrganizationAllowPrivateRepositoryForkingSettingArgs = {\n  input: UpdateOrganizationAllowPrivateRepositoryForkingSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectArgs = {\n  input: UpdateProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectCardArgs = {\n  input: UpdateProjectCardInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectColumnArgs = {\n  input: UpdateProjectColumnInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectNextArgs = {\n  input: UpdateProjectNextInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectNextItemFieldArgs = {\n  input: UpdateProjectNextItemFieldInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePullRequestArgs = {\n  input: UpdatePullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePullRequestBranchArgs = {\n  input: UpdatePullRequestBranchInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePullRequestReviewArgs = {\n  input: UpdatePullRequestReviewInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePullRequestReviewCommentArgs = {\n  input: UpdatePullRequestReviewCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateRefArgs = {\n  input: UpdateRefInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateRepositoryArgs = {\n  input: UpdateRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateSponsorshipPreferencesArgs = {\n  input: UpdateSponsorshipPreferencesInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateSubscriptionArgs = {\n  input: UpdateSubscriptionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTeamDiscussionArgs = {\n  input: UpdateTeamDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTeamDiscussionCommentArgs = {\n  input: UpdateTeamDiscussionCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTopicsArgs = {\n  input: UpdateTopicsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationVerifyVerifiableDomainArgs = {\n  input: VerifyVerifiableDomainInput;\n};\n\n/** An object with an ID. */\nexport type Node = {\n  /** ID of the object. */\n  id: Scalars['ID'];\n};\n\n/** The possible values for the notification restriction setting. */\nexport enum NotificationRestrictionSettingValue {\n  /** The setting is disabled for the owner. */\n  Disabled = 'DISABLED',\n  /** The setting is enabled for the owner. */\n  Enabled = 'ENABLED'\n}\n\n/** An OIDC identity provider configured to provision identities for an enterprise. */\nexport type OidcProvider = Node & {\n  __typename?: 'OIDCProvider';\n  /** The enterprise this identity provider belongs to. */\n  enterprise?: Maybe<Enterprise>;\n  /** ExternalIdentities provisioned by this identity provider. */\n  externalIdentities: ExternalIdentityConnection;\n  id: Scalars['ID'];\n  /** The OIDC identity provider type */\n  providerType: OidcProviderType;\n  /** The id of the tenant this provider is attached to */\n  tenantId: Scalars['String'];\n};\n\n\n/** An OIDC identity provider configured to provision identities for an enterprise. */\nexport type OidcProviderExternalIdentitiesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  login?: InputMaybe<Scalars['String']>;\n  membersOnly?: InputMaybe<Scalars['Boolean']>;\n  userName?: InputMaybe<Scalars['String']>;\n};\n\n/** The OIDC identity provider type */\nexport enum OidcProviderType {\n  /** Azure Active Directory */\n  Aad = 'AAD'\n}\n\n/** Metadata for an audit entry with action oauth_application.* */\nexport type OauthApplicationAuditEntryData = {\n  /** The name of the OAuth Application. */\n  oauthApplicationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the OAuth Application */\n  oauthApplicationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the OAuth Application */\n  oauthApplicationUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a oauth_application.create event. */\nexport type OauthApplicationCreateAuditEntry = AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData & {\n  __typename?: 'OauthApplicationCreateAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The application URL of the OAuth Application. */\n  applicationUrl?: Maybe<Scalars['URI']>;\n  /** The callback URL of the OAuth Application. */\n  callbackUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The name of the OAuth Application. */\n  oauthApplicationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the OAuth Application */\n  oauthApplicationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the OAuth Application */\n  oauthApplicationUrl?: Maybe<Scalars['URI']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The rate limit of the OAuth Application. */\n  rateLimit?: Maybe<Scalars['Int']>;\n  /** The state of the OAuth Application. */\n  state?: Maybe<OauthApplicationCreateAuditEntryState>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** The state of an OAuth Application when it was created. */\nexport enum OauthApplicationCreateAuditEntryState {\n  /** The OAuth Application was active and allowed to have OAuth Accesses. */\n  Active = 'ACTIVE',\n  /** The OAuth Application was in the process of being deleted. */\n  PendingDeletion = 'PENDING_DELETION',\n  /** The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns. */\n  Suspended = 'SUSPENDED'\n}\n\n/** The corresponding operation type for the action */\nexport enum OperationType {\n  /** An existing resource was accessed */\n  Access = 'ACCESS',\n  /** A resource performed an authentication event */\n  Authentication = 'AUTHENTICATION',\n  /** A new resource was created */\n  Create = 'CREATE',\n  /** An existing resource was modified */\n  Modify = 'MODIFY',\n  /** An existing resource was removed */\n  Remove = 'REMOVE',\n  /** An existing resource was restored */\n  Restore = 'RESTORE',\n  /** An existing resource was transferred between multiple resources */\n  Transfer = 'TRANSFER'\n}\n\n/** Possible directions in which to order a list of items when provided an `orderBy` argument. */\nexport enum OrderDirection {\n  /** Specifies an ascending order for a given `orderBy` argument. */\n  Asc = 'ASC',\n  /** Specifies a descending order for a given `orderBy` argument. */\n  Desc = 'DESC'\n}\n\n/** Audit log entry for a org.add_billing_manager */\nexport type OrgAddBillingManagerAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgAddBillingManagerAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The email address used to invite a billing manager for the organization. */\n  invitationEmail?: Maybe<Scalars['String']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.add_member */\nexport type OrgAddMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgAddMemberAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The permission level of the member added to the organization. */\n  permission?: Maybe<OrgAddMemberAuditEntryPermission>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** The permissions available to members on an Organization. */\nexport enum OrgAddMemberAuditEntryPermission {\n  /** Can read, clone, push, and add collaborators to repositories. */\n  Admin = 'ADMIN',\n  /** Can read and clone repositories. */\n  Read = 'READ'\n}\n\n/** Audit log entry for a org.block_user */\nexport type OrgBlockUserAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgBlockUserAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The blocked user. */\n  blockedUser?: Maybe<User>;\n  /** The username of the blocked user. */\n  blockedUserName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the blocked user. */\n  blockedUserResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the blocked user. */\n  blockedUserUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.config.disable_collaborators_only event. */\nexport type OrgConfigDisableCollaboratorsOnlyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgConfigDisableCollaboratorsOnlyAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.config.enable_collaborators_only event. */\nexport type OrgConfigEnableCollaboratorsOnlyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgConfigEnableCollaboratorsOnlyAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.create event. */\nexport type OrgCreateAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgCreateAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The billing plan for the Organization. */\n  billingPlan?: Maybe<OrgCreateAuditEntryBillingPlan>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** The billing plans available for organizations. */\nexport enum OrgCreateAuditEntryBillingPlan {\n  /** Team Plan */\n  Business = 'BUSINESS',\n  /** Enterprise Cloud Plan */\n  BusinessPlus = 'BUSINESS_PLUS',\n  /** Free Plan */\n  Free = 'FREE',\n  /** Tiered Per Seat Plan */\n  TieredPerSeat = 'TIERED_PER_SEAT',\n  /** Legacy Unlimited Plan */\n  Unlimited = 'UNLIMITED'\n}\n\n/** Audit log entry for a org.disable_oauth_app_restrictions event. */\nexport type OrgDisableOauthAppRestrictionsAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgDisableOauthAppRestrictionsAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.disable_saml event. */\nexport type OrgDisableSamlAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgDisableSamlAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The SAML provider's digest algorithm URL. */\n  digestMethodUrl?: Maybe<Scalars['URI']>;\n  id: Scalars['ID'];\n  /** The SAML provider's issuer URL. */\n  issuerUrl?: Maybe<Scalars['URI']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The SAML provider's signature algorithm URL. */\n  signatureMethodUrl?: Maybe<Scalars['URI']>;\n  /** The SAML provider's single sign-on URL. */\n  singleSignOnUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.disable_two_factor_requirement event. */\nexport type OrgDisableTwoFactorRequirementAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgDisableTwoFactorRequirementAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.enable_oauth_app_restrictions event. */\nexport type OrgEnableOauthAppRestrictionsAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgEnableOauthAppRestrictionsAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.enable_saml event. */\nexport type OrgEnableSamlAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgEnableSamlAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The SAML provider's digest algorithm URL. */\n  digestMethodUrl?: Maybe<Scalars['URI']>;\n  id: Scalars['ID'];\n  /** The SAML provider's issuer URL. */\n  issuerUrl?: Maybe<Scalars['URI']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The SAML provider's signature algorithm URL. */\n  signatureMethodUrl?: Maybe<Scalars['URI']>;\n  /** The SAML provider's single sign-on URL. */\n  singleSignOnUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.enable_two_factor_requirement event. */\nexport type OrgEnableTwoFactorRequirementAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgEnableTwoFactorRequirementAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Ordering options for an organization's enterprise owner connections. */\nexport type OrgEnterpriseOwnerOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order enterprise owners by. */\n  field: OrgEnterpriseOwnerOrderField;\n};\n\n/** Properties by which enterprise owners can be ordered. */\nexport enum OrgEnterpriseOwnerOrderField {\n  /** Order enterprise owners by login. */\n  Login = 'LOGIN'\n}\n\n/** Audit log entry for a org.invite_member event. */\nexport type OrgInviteMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgInviteMemberAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The email address of the organization invitation. */\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The organization invitation. */\n  organizationInvitation?: Maybe<OrganizationInvitation>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.invite_to_business event. */\nexport type OrgInviteToBusinessAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgInviteToBusinessAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']>;\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.oauth_app_access_approved event. */\nexport type OrgOauthAppAccessApprovedAuditEntry = AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData & {\n  __typename?: 'OrgOauthAppAccessApprovedAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The name of the OAuth Application. */\n  oauthApplicationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the OAuth Application */\n  oauthApplicationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the OAuth Application */\n  oauthApplicationUrl?: Maybe<Scalars['URI']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.oauth_app_access_denied event. */\nexport type OrgOauthAppAccessDeniedAuditEntry = AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData & {\n  __typename?: 'OrgOauthAppAccessDeniedAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The name of the OAuth Application. */\n  oauthApplicationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the OAuth Application */\n  oauthApplicationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the OAuth Application */\n  oauthApplicationUrl?: Maybe<Scalars['URI']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.oauth_app_access_requested event. */\nexport type OrgOauthAppAccessRequestedAuditEntry = AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData & {\n  __typename?: 'OrgOauthAppAccessRequestedAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The name of the OAuth Application. */\n  oauthApplicationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the OAuth Application */\n  oauthApplicationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the OAuth Application */\n  oauthApplicationUrl?: Maybe<Scalars['URI']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.remove_billing_manager event. */\nexport type OrgRemoveBillingManagerAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgRemoveBillingManagerAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The reason for the billing manager being removed. */\n  reason?: Maybe<OrgRemoveBillingManagerAuditEntryReason>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** The reason a billing manager was removed from an Organization. */\nexport enum OrgRemoveBillingManagerAuditEntryReason {\n  /** SAML external identity missing */\n  SamlExternalIdentityMissing = 'SAML_EXTERNAL_IDENTITY_MISSING',\n  /** SAML SSO enforcement requires an external identity */\n  SamlSsoEnforcementRequiresExternalIdentity = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',\n  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */\n  TwoFactorRequirementNonCompliance = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'\n}\n\n/** Audit log entry for a org.remove_member event. */\nexport type OrgRemoveMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgRemoveMemberAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The types of membership the member has with the organization. */\n  membershipTypes?: Maybe<Array<OrgRemoveMemberAuditEntryMembershipType>>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The reason for the member being removed. */\n  reason?: Maybe<OrgRemoveMemberAuditEntryReason>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** The type of membership a user has with an Organization. */\nexport enum OrgRemoveMemberAuditEntryMembershipType {\n  /** Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories. */\n  Admin = 'ADMIN',\n  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */\n  BillingManager = 'BILLING_MANAGER',\n  /** A direct member is a user that is a member of the Organization. */\n  DirectMember = 'DIRECT_MEMBER',\n  /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */\n  OutsideCollaborator = 'OUTSIDE_COLLABORATOR',\n  /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization. */\n  Unaffiliated = 'UNAFFILIATED'\n}\n\n/** The reason a member was removed from an Organization. */\nexport enum OrgRemoveMemberAuditEntryReason {\n  /** SAML external identity missing */\n  SamlExternalIdentityMissing = 'SAML_EXTERNAL_IDENTITY_MISSING',\n  /** SAML SSO enforcement requires an external identity */\n  SamlSsoEnforcementRequiresExternalIdentity = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',\n  /** User was removed from organization during account recovery */\n  TwoFactorAccountRecovery = 'TWO_FACTOR_ACCOUNT_RECOVERY',\n  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */\n  TwoFactorRequirementNonCompliance = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE',\n  /** User account has been deleted */\n  UserAccountDeleted = 'USER_ACCOUNT_DELETED'\n}\n\n/** Audit log entry for a org.remove_outside_collaborator event. */\nexport type OrgRemoveOutsideCollaboratorAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgRemoveOutsideCollaboratorAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The types of membership the outside collaborator has with the organization. */\n  membershipTypes?: Maybe<Array<OrgRemoveOutsideCollaboratorAuditEntryMembershipType>>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The reason for the outside collaborator being removed from the Organization. */\n  reason?: Maybe<OrgRemoveOutsideCollaboratorAuditEntryReason>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** The type of membership a user has with an Organization. */\nexport enum OrgRemoveOutsideCollaboratorAuditEntryMembershipType {\n  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */\n  BillingManager = 'BILLING_MANAGER',\n  /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */\n  OutsideCollaborator = 'OUTSIDE_COLLABORATOR',\n  /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization. */\n  Unaffiliated = 'UNAFFILIATED'\n}\n\n/** The reason an outside collaborator was removed from an Organization. */\nexport enum OrgRemoveOutsideCollaboratorAuditEntryReason {\n  /** SAML external identity missing */\n  SamlExternalIdentityMissing = 'SAML_EXTERNAL_IDENTITY_MISSING',\n  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */\n  TwoFactorRequirementNonCompliance = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'\n}\n\n/** Audit log entry for a org.restore_member event. */\nexport type OrgRestoreMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgRestoreMemberAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The number of custom email routings for the restored member. */\n  restoredCustomEmailRoutingsCount?: Maybe<Scalars['Int']>;\n  /** The number of issue assignments for the restored member. */\n  restoredIssueAssignmentsCount?: Maybe<Scalars['Int']>;\n  /** Restored organization membership objects. */\n  restoredMemberships?: Maybe<Array<OrgRestoreMemberAuditEntryMembership>>;\n  /** The number of restored memberships. */\n  restoredMembershipsCount?: Maybe<Scalars['Int']>;\n  /** The number of repositories of the restored member. */\n  restoredRepositoriesCount?: Maybe<Scalars['Int']>;\n  /** The number of starred repositories for the restored member. */\n  restoredRepositoryStarsCount?: Maybe<Scalars['Int']>;\n  /** The number of watched repositories for the restored member. */\n  restoredRepositoryWatchesCount?: Maybe<Scalars['Int']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Types of memberships that can be restored for an Organization member. */\nexport type OrgRestoreMemberAuditEntryMembership = OrgRestoreMemberMembershipOrganizationAuditEntryData | OrgRestoreMemberMembershipRepositoryAuditEntryData | OrgRestoreMemberMembershipTeamAuditEntryData;\n\n/** Metadata for an organization membership for org.restore_member actions */\nexport type OrgRestoreMemberMembershipOrganizationAuditEntryData = OrganizationAuditEntryData & {\n  __typename?: 'OrgRestoreMemberMembershipOrganizationAuditEntryData';\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Metadata for a repository membership for org.restore_member actions */\nexport type OrgRestoreMemberMembershipRepositoryAuditEntryData = RepositoryAuditEntryData & {\n  __typename?: 'OrgRestoreMemberMembershipRepositoryAuditEntryData';\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Metadata for a team membership for org.restore_member actions */\nexport type OrgRestoreMemberMembershipTeamAuditEntryData = TeamAuditEntryData & {\n  __typename?: 'OrgRestoreMemberMembershipTeamAuditEntryData';\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.unblock_user */\nexport type OrgUnblockUserAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgUnblockUserAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The user being unblocked by the organization. */\n  blockedUser?: Maybe<User>;\n  /** The username of the blocked user. */\n  blockedUserName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the blocked user. */\n  blockedUserResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the blocked user. */\n  blockedUserUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a org.update_default_repository_permission */\nexport type OrgUpdateDefaultRepositoryPermissionAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgUpdateDefaultRepositoryPermissionAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The new base repository permission level for the organization. */\n  permission?: Maybe<OrgUpdateDefaultRepositoryPermissionAuditEntryPermission>;\n  /** The former base repository permission level for the organization. */\n  permissionWas?: Maybe<OrgUpdateDefaultRepositoryPermissionAuditEntryPermission>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** The default permission a repository can have in an Organization. */\nexport enum OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {\n  /** Can read, clone, push, and add collaborators to repositories. */\n  Admin = 'ADMIN',\n  /** No default permission value. */\n  None = 'NONE',\n  /** Can read and clone repositories. */\n  Read = 'READ',\n  /** Can read, clone and push to repositories. */\n  Write = 'WRITE'\n}\n\n/** Audit log entry for a org.update_member event. */\nexport type OrgUpdateMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgUpdateMemberAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The new member permission level for the organization. */\n  permission?: Maybe<OrgUpdateMemberAuditEntryPermission>;\n  /** The former member permission level for the organization. */\n  permissionWas?: Maybe<OrgUpdateMemberAuditEntryPermission>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** The permissions available to members on an Organization. */\nexport enum OrgUpdateMemberAuditEntryPermission {\n  /** Can read, clone, push, and add collaborators to repositories. */\n  Admin = 'ADMIN',\n  /** Can read and clone repositories. */\n  Read = 'READ'\n}\n\n/** Audit log entry for a org.update_member_repository_creation_permission event. */\nexport type OrgUpdateMemberRepositoryCreationPermissionAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgUpdateMemberRepositoryCreationPermissionAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** Can members create repositories in the organization. */\n  canCreateRepositories?: Maybe<Scalars['Boolean']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n  /** The permission for visibility level of repositories for this organization. */\n  visibility?: Maybe<OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility>;\n};\n\n/** The permissions available for repository creation on an Organization. */\nexport enum OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {\n  /** All organization members are restricted from creating any repositories. */\n  All = 'ALL',\n  /** All organization members are restricted from creating internal repositories. */\n  Internal = 'INTERNAL',\n  /** All organization members are allowed to create any repositories. */\n  None = 'NONE',\n  /** All organization members are restricted from creating private repositories. */\n  Private = 'PRIVATE',\n  /** All organization members are restricted from creating private or internal repositories. */\n  PrivateInternal = 'PRIVATE_INTERNAL',\n  /** All organization members are restricted from creating public repositories. */\n  Public = 'PUBLIC',\n  /** All organization members are restricted from creating public or internal repositories. */\n  PublicInternal = 'PUBLIC_INTERNAL',\n  /** All organization members are restricted from creating public or private repositories. */\n  PublicPrivate = 'PUBLIC_PRIVATE'\n}\n\n/** Audit log entry for a org.update_member_repository_invitation_permission event. */\nexport type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  __typename?: 'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** Can outside collaborators be invited to repositories in the organization. */\n  canInviteOutsideCollaboratorsToRepositories?: Maybe<Scalars['Boolean']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type Organization = Actor & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectNextOwner & ProjectOwner & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable & {\n  __typename?: 'Organization';\n  /** Determine if this repository owner has any items that can be pinned to their profile. */\n  anyPinnableItems: Scalars['Boolean'];\n  /** Audit log entries of the organization */\n  auditLog: OrganizationAuditEntryConnection;\n  /** A URL pointing to the organization's public avatar. */\n  avatarUrl: Scalars['URI'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The organization's public profile description. */\n  description?: Maybe<Scalars['String']>;\n  /** The organization's public profile description rendered to HTML. */\n  descriptionHTML?: Maybe<Scalars['String']>;\n  /** A list of domains owned by the organization. */\n  domains?: Maybe<VerifiableDomainConnection>;\n  /** The organization's public email. */\n  email?: Maybe<Scalars['String']>;\n  /** A list of owners of the organization's enterprise account. */\n  enterpriseOwners: OrganizationEnterpriseOwnerConnection;\n  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */\n  estimatedNextSponsorsPayoutInCents: Scalars['Int'];\n  /** True if this user/organization has a GitHub Sponsors listing. */\n  hasSponsorsListing: Scalars['Boolean'];\n  id: Scalars['ID'];\n  /** The interaction ability settings for this organization. */\n  interactionAbility?: Maybe<RepositoryInteractionAbility>;\n  /** The setting value for whether the organization has an IP allow list enabled. */\n  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue;\n  /** The IP addresses that are allowed to access resources owned by the organization. */\n  ipAllowListEntries: IpAllowListEntryConnection;\n  /** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */\n  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue;\n  /** Check if the given account is sponsoring this user/organization. */\n  isSponsoredBy: Scalars['Boolean'];\n  /** True if the viewer is sponsored by this user/organization. */\n  isSponsoringViewer: Scalars['Boolean'];\n  /** Whether the organization has verified its profile email and website. */\n  isVerified: Scalars['Boolean'];\n  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */\n  itemShowcase: ProfileItemShowcase;\n  /** The organization's public profile location. */\n  location?: Maybe<Scalars['String']>;\n  /** The organization's login name. */\n  login: Scalars['String'];\n  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */\n  memberStatuses: UserStatusConnection;\n  /** Members can fork private repositories in this organization */\n  membersCanForkPrivateRepositories: Scalars['Boolean'];\n  /** A list of users who are members of this organization. */\n  membersWithRole: OrganizationMemberConnection;\n  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */\n  monthlyEstimatedSponsorsIncomeInCents: Scalars['Int'];\n  /** The organization's public profile name. */\n  name?: Maybe<Scalars['String']>;\n  /** The HTTP path creating a new team */\n  newTeamResourcePath: Scalars['URI'];\n  /** The HTTP URL creating a new team */\n  newTeamUrl: Scalars['URI'];\n  /** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */\n  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue;\n  /** The billing email for the organization. */\n  organizationBillingEmail?: Maybe<Scalars['String']>;\n  /** A list of packages under the owner. */\n  packages: PackageConnection;\n  /** A list of users who have been invited to join this organization. */\n  pendingMembers: UserConnection;\n  /** A list of repositories and gists this profile owner can pin to their profile. */\n  pinnableItems: PinnableItemConnection;\n  /** A list of repositories and gists this profile owner has pinned to their profile */\n  pinnedItems: PinnableItemConnection;\n  /** Returns how many more items this profile owner can pin to their profile. */\n  pinnedItemsRemaining: Scalars['Int'];\n  /** Find project by number. */\n  project?: Maybe<Project>;\n  /** Find a project by project (beta) number. */\n  projectNext?: Maybe<ProjectNext>;\n  /** A list of projects under the owner. */\n  projects: ProjectConnection;\n  /** A list of projects (beta) under the owner. */\n  projectsNext: ProjectNextConnection;\n  /** The HTTP path listing organization's projects */\n  projectsResourcePath: Scalars['URI'];\n  /** The HTTP URL listing organization's projects */\n  projectsUrl: Scalars['URI'];\n  /** A list of repositories that the user owns. */\n  repositories: RepositoryConnection;\n  /** Find Repository. */\n  repository?: Maybe<Repository>;\n  /** Discussion comments this user has authored. */\n  repositoryDiscussionComments: DiscussionCommentConnection;\n  /** Discussions this user has started. */\n  repositoryDiscussions: DiscussionConnection;\n  /** A list of all repository migrations for this organization. */\n  repositoryMigrations: RepositoryMigrationConnection;\n  /** When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication. */\n  requiresTwoFactorAuthentication?: Maybe<Scalars['Boolean']>;\n  /** The HTTP path for this organization. */\n  resourcePath: Scalars['URI'];\n  /** The Organization's SAML identity providers */\n  samlIdentityProvider?: Maybe<OrganizationIdentityProvider>;\n  /** List of users and organizations this entity is sponsoring. */\n  sponsoring: SponsorConnection;\n  /** List of sponsors for this user or organization. */\n  sponsors: SponsorConnection;\n  /** Events involving this sponsorable, such as new sponsorships. */\n  sponsorsActivities: SponsorsActivityConnection;\n  /** The GitHub Sponsors listing for this user or organization. */\n  sponsorsListing?: Maybe<SponsorsListing>;\n  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */\n  sponsorshipForViewerAsSponsor?: Maybe<Sponsorship>;\n  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. */\n  sponsorshipForViewerAsSponsorable?: Maybe<Sponsorship>;\n  /** List of sponsorship updates sent from this sponsorable to sponsors. */\n  sponsorshipNewsletters: SponsorshipNewsletterConnection;\n  /** This object's sponsorships as the maintainer. */\n  sponsorshipsAsMaintainer: SponsorshipConnection;\n  /** This object's sponsorships as the sponsor. */\n  sponsorshipsAsSponsor: SponsorshipConnection;\n  /** Find an organization's team by its slug. */\n  team?: Maybe<Team>;\n  /** A list of teams in this organization. */\n  teams: TeamConnection;\n  /** The HTTP path listing organization's teams */\n  teamsResourcePath: Scalars['URI'];\n  /** The HTTP URL listing organization's teams */\n  teamsUrl: Scalars['URI'];\n  /** The organization's Twitter username. */\n  twitterUsername?: Maybe<Scalars['String']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this organization. */\n  url: Scalars['URI'];\n  /** Organization is adminable by the viewer. */\n  viewerCanAdminister: Scalars['Boolean'];\n  /** Can the viewer pin repositories and gists to the profile? */\n  viewerCanChangePinnedItems: Scalars['Boolean'];\n  /** Can the current viewer create new projects on this owner. */\n  viewerCanCreateProjects: Scalars['Boolean'];\n  /** Viewer can create repositories on this organization */\n  viewerCanCreateRepositories: Scalars['Boolean'];\n  /** Viewer can create teams on this organization. */\n  viewerCanCreateTeams: Scalars['Boolean'];\n  /** Whether or not the viewer is able to sponsor this user/organization. */\n  viewerCanSponsor: Scalars['Boolean'];\n  /** Viewer is an active member of this organization. */\n  viewerIsAMember: Scalars['Boolean'];\n  /** True if the viewer is sponsoring this user/organization. */\n  viewerIsSponsoring: Scalars['Boolean'];\n  /** The organization's public profile URL. */\n  websiteUrl?: Maybe<Scalars['URI']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationAnyPinnableItemsArgs = {\n  type?: InputMaybe<PinnableItemType>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationAuditLogArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<AuditLogOrder>;\n  query?: InputMaybe<Scalars['String']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationDomainsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  isApproved?: InputMaybe<Scalars['Boolean']>;\n  isVerified?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VerifiableDomainOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationEnterpriseOwnersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<OrgEnterpriseOwnerOrder>;\n  organizationRole?: InputMaybe<RoleInOrganization>;\n  query?: InputMaybe<Scalars['String']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationIpAllowListEntriesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IpAllowListEntryOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationIsSponsoredByArgs = {\n  accountLogin: Scalars['String'];\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationMemberStatusesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserStatusOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationMembersWithRoleArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationPackagesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  names?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  orderBy?: InputMaybe<PackageOrder>;\n  packageType?: InputMaybe<PackageType>;\n  repositoryId?: InputMaybe<Scalars['ID']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationPendingMembersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationPinnableItemsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationPinnedItemsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationProjectArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationProjectNextArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationProjectsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ProjectOrder>;\n  search?: InputMaybe<Scalars['String']>;\n  states?: InputMaybe<Array<ProjectState>>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationProjectsNextArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  query?: InputMaybe<Scalars['String']>;\n  sortBy?: InputMaybe<ProjectNextOrderField>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoriesArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  isFork?: InputMaybe<Scalars['Boolean']>;\n  isLocked?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoryArgs = {\n  followRenames?: InputMaybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoryDiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  onlyAnswers?: InputMaybe<Scalars['Boolean']>;\n  repositoryId?: InputMaybe<Scalars['ID']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoryDiscussionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  answered?: InputMaybe<Scalars['Boolean']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<DiscussionOrder>;\n  repositoryId?: InputMaybe<Scalars['ID']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoryMigrationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RepositoryMigrationOrder>;\n  state?: InputMaybe<MigrationState>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsoringArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorOrder>;\n  tierId?: InputMaybe<Scalars['ID']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorsActivitiesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorsActivityOrder>;\n  period?: InputMaybe<SponsorsActivityPeriod>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorshipNewslettersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorshipNewsletterOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorshipsAsMaintainerArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  includePrivate?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorshipsAsSponsorArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationTeamArgs = {\n  slug: Scalars['String'];\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationTeamsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  ldapMapped?: InputMaybe<Scalars['Boolean']>;\n  orderBy?: InputMaybe<TeamOrder>;\n  privacy?: InputMaybe<TeamPrivacy>;\n  query?: InputMaybe<Scalars['String']>;\n  role?: InputMaybe<TeamRole>;\n  rootTeamsOnly?: InputMaybe<Scalars['Boolean']>;\n  userLogins?: InputMaybe<Array<Scalars['String']>>;\n};\n\n/** An audit entry in an organization audit log. */\nexport type OrganizationAuditEntry = MembersCanDeleteReposClearAuditEntry | MembersCanDeleteReposDisableAuditEntry | MembersCanDeleteReposEnableAuditEntry | OauthApplicationCreateAuditEntry | OrgAddBillingManagerAuditEntry | OrgAddMemberAuditEntry | OrgBlockUserAuditEntry | OrgConfigDisableCollaboratorsOnlyAuditEntry | OrgConfigEnableCollaboratorsOnlyAuditEntry | OrgCreateAuditEntry | OrgDisableOauthAppRestrictionsAuditEntry | OrgDisableSamlAuditEntry | OrgDisableTwoFactorRequirementAuditEntry | OrgEnableOauthAppRestrictionsAuditEntry | OrgEnableSamlAuditEntry | OrgEnableTwoFactorRequirementAuditEntry | OrgInviteMemberAuditEntry | OrgInviteToBusinessAuditEntry | OrgOauthAppAccessApprovedAuditEntry | OrgOauthAppAccessDeniedAuditEntry | OrgOauthAppAccessRequestedAuditEntry | OrgRemoveBillingManagerAuditEntry | OrgRemoveMemberAuditEntry | OrgRemoveOutsideCollaboratorAuditEntry | OrgRestoreMemberAuditEntry | OrgUnblockUserAuditEntry | OrgUpdateDefaultRepositoryPermissionAuditEntry | OrgUpdateMemberAuditEntry | OrgUpdateMemberRepositoryCreationPermissionAuditEntry | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry | PrivateRepositoryForkingDisableAuditEntry | PrivateRepositoryForkingEnableAuditEntry | RepoAccessAuditEntry | RepoAddMemberAuditEntry | RepoAddTopicAuditEntry | RepoArchivedAuditEntry | RepoChangeMergeSettingAuditEntry | RepoConfigDisableAnonymousGitAccessAuditEntry | RepoConfigDisableCollaboratorsOnlyAuditEntry | RepoConfigDisableContributorsOnlyAuditEntry | RepoConfigDisableSockpuppetDisallowedAuditEntry | RepoConfigEnableAnonymousGitAccessAuditEntry | RepoConfigEnableCollaboratorsOnlyAuditEntry | RepoConfigEnableContributorsOnlyAuditEntry | RepoConfigEnableSockpuppetDisallowedAuditEntry | RepoConfigLockAnonymousGitAccessAuditEntry | RepoConfigUnlockAnonymousGitAccessAuditEntry | RepoCreateAuditEntry | RepoDestroyAuditEntry | RepoRemoveMemberAuditEntry | RepoRemoveTopicAuditEntry | RepositoryVisibilityChangeDisableAuditEntry | RepositoryVisibilityChangeEnableAuditEntry | TeamAddMemberAuditEntry | TeamAddRepositoryAuditEntry | TeamChangeParentTeamAuditEntry | TeamRemoveMemberAuditEntry | TeamRemoveRepositoryAuditEntry;\n\n/** The connection type for OrganizationAuditEntry. */\nexport type OrganizationAuditEntryConnection = {\n  __typename?: 'OrganizationAuditEntryConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationAuditEntryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrganizationAuditEntry>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Metadata for an audit entry with action org.* */\nexport type OrganizationAuditEntryData = {\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n};\n\n/** An edge in a connection. */\nexport type OrganizationAuditEntryEdge = {\n  __typename?: 'OrganizationAuditEntryEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrganizationAuditEntry>;\n};\n\n/** A list of organizations managed by an enterprise. */\nexport type OrganizationConnection = {\n  __typename?: 'OrganizationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Organization>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrganizationEdge = {\n  __typename?: 'OrganizationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Organization>;\n};\n\n/** The connection type for User. */\nexport type OrganizationEnterpriseOwnerConnection = {\n  __typename?: 'OrganizationEnterpriseOwnerConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationEnterpriseOwnerEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An enterprise owner in the context of an organization that is part of the enterprise. */\nexport type OrganizationEnterpriseOwnerEdge = {\n  __typename?: 'OrganizationEnterpriseOwnerEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n  /** The role of the owner with respect to the organization. */\n  organizationRole: RoleInOrganization;\n};\n\n/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */\nexport type OrganizationIdentityProvider = Node & {\n  __typename?: 'OrganizationIdentityProvider';\n  /** The digest algorithm used to sign SAML requests for the Identity Provider. */\n  digestMethod?: Maybe<Scalars['URI']>;\n  /** External Identities provisioned by this Identity Provider */\n  externalIdentities: ExternalIdentityConnection;\n  id: Scalars['ID'];\n  /** The x509 certificate used by the Identity Provider to sign assertions and responses. */\n  idpCertificate?: Maybe<Scalars['X509Certificate']>;\n  /** The Issuer Entity ID for the SAML Identity Provider */\n  issuer?: Maybe<Scalars['String']>;\n  /** Organization this Identity Provider belongs to */\n  organization?: Maybe<Organization>;\n  /** The signature algorithm used to sign SAML requests for the Identity Provider. */\n  signatureMethod?: Maybe<Scalars['URI']>;\n  /** The URL endpoint for the Identity Provider's SAML SSO. */\n  ssoUrl?: Maybe<Scalars['URI']>;\n};\n\n\n/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */\nexport type OrganizationIdentityProviderExternalIdentitiesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  login?: InputMaybe<Scalars['String']>;\n  membersOnly?: InputMaybe<Scalars['Boolean']>;\n  userName?: InputMaybe<Scalars['String']>;\n};\n\n/** An Invitation for a user to an organization. */\nexport type OrganizationInvitation = Node & {\n  __typename?: 'OrganizationInvitation';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The email address of the user invited to the organization. */\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** The type of invitation that was sent (e.g. email, user). */\n  invitationType: OrganizationInvitationType;\n  /** The user who was invited to the organization. */\n  invitee?: Maybe<User>;\n  /** The user who created the invitation. */\n  inviter: User;\n  /** The organization the invite is for */\n  organization: Organization;\n  /** The user's pending role in the organization (e.g. member, owner). */\n  role: OrganizationInvitationRole;\n};\n\n/** The connection type for OrganizationInvitation. */\nexport type OrganizationInvitationConnection = {\n  __typename?: 'OrganizationInvitationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrganizationInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrganizationInvitationEdge = {\n  __typename?: 'OrganizationInvitationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrganizationInvitation>;\n};\n\n/** The possible organization invitation roles. */\nexport enum OrganizationInvitationRole {\n  /** The user is invited to be an admin of the organization. */\n  Admin = 'ADMIN',\n  /** The user is invited to be a billing manager of the organization. */\n  BillingManager = 'BILLING_MANAGER',\n  /** The user is invited to be a direct member of the organization. */\n  DirectMember = 'DIRECT_MEMBER',\n  /** The user's previous role will be reinstated. */\n  Reinstate = 'REINSTATE'\n}\n\n/** The possible organization invitation types. */\nexport enum OrganizationInvitationType {\n  /** The invitation was to an email address. */\n  Email = 'EMAIL',\n  /** The invitation was to an existing user. */\n  User = 'USER'\n}\n\n/** The connection type for User. */\nexport type OrganizationMemberConnection = {\n  __typename?: 'OrganizationMemberConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationMemberEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Represents a user within an organization. */\nexport type OrganizationMemberEdge = {\n  __typename?: 'OrganizationMemberEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */\n  hasTwoFactorEnabled?: Maybe<Scalars['Boolean']>;\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n  /** The role this user has in the organization. */\n  role?: Maybe<OrganizationMemberRole>;\n};\n\n/** The possible roles within an organization for its members. */\nexport enum OrganizationMemberRole {\n  /** The user is an administrator of the organization. */\n  Admin = 'ADMIN',\n  /** The user is a member of the organization. */\n  Member = 'MEMBER'\n}\n\n/** The possible values for the members can create repositories setting on an organization. */\nexport enum OrganizationMembersCanCreateRepositoriesSettingValue {\n  /** Members will be able to create public and private repositories. */\n  All = 'ALL',\n  /** Members will not be able to create public or private repositories. */\n  Disabled = 'DISABLED',\n  /** Members will be able to create only internal repositories. */\n  Internal = 'INTERNAL',\n  /** Members will be able to create only private repositories. */\n  Private = 'PRIVATE'\n}\n\n/** Ordering options for organization connections. */\nexport type OrganizationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order organizations by. */\n  field: OrganizationOrderField;\n};\n\n/** Properties by which organization connections can be ordered. */\nexport enum OrganizationOrderField {\n  /** Order organizations by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order organizations by login */\n  Login = 'LOGIN'\n}\n\n/** An organization teams hovercard context */\nexport type OrganizationTeamsHovercardContext = HovercardContext & {\n  __typename?: 'OrganizationTeamsHovercardContext';\n  /** A string describing this context */\n  message: Scalars['String'];\n  /** An octicon to accompany this context */\n  octicon: Scalars['String'];\n  /** Teams in this organization the user is a member of that are relevant */\n  relevantTeams: TeamConnection;\n  /** The path for the full team list for this user */\n  teamsResourcePath: Scalars['URI'];\n  /** The URL for the full team list for this user */\n  teamsUrl: Scalars['URI'];\n  /** The total number of teams the user is on in the organization */\n  totalTeamCount: Scalars['Int'];\n};\n\n\n/** An organization teams hovercard context */\nexport type OrganizationTeamsHovercardContextRelevantTeamsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** An organization list hovercard context */\nexport type OrganizationsHovercardContext = HovercardContext & {\n  __typename?: 'OrganizationsHovercardContext';\n  /** A string describing this context */\n  message: Scalars['String'];\n  /** An octicon to accompany this context */\n  octicon: Scalars['String'];\n  /** Organizations this user is a member of that are relevant */\n  relevantOrganizations: OrganizationConnection;\n  /** The total number of organizations this user is in */\n  totalOrganizationCount: Scalars['Int'];\n};\n\n\n/** An organization list hovercard context */\nexport type OrganizationsHovercardContextRelevantOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** Information for an uploaded package. */\nexport type Package = Node & {\n  __typename?: 'Package';\n  id: Scalars['ID'];\n  /** Find the latest version for the package. */\n  latestVersion?: Maybe<PackageVersion>;\n  /** Identifies the name of the package. */\n  name: Scalars['String'];\n  /** Identifies the type of the package. */\n  packageType: PackageType;\n  /** The repository this package belongs to. */\n  repository?: Maybe<Repository>;\n  /** Statistics about package activity. */\n  statistics?: Maybe<PackageStatistics>;\n  /** Find package version by version string. */\n  version?: Maybe<PackageVersion>;\n  /** list of versions for this package */\n  versions: PackageVersionConnection;\n};\n\n\n/** Information for an uploaded package. */\nexport type PackageVersionArgs = {\n  version: Scalars['String'];\n};\n\n\n/** Information for an uploaded package. */\nexport type PackageVersionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PackageVersionOrder>;\n};\n\n/** The connection type for Package. */\nexport type PackageConnection = {\n  __typename?: 'PackageConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PackageEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Package>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PackageEdge = {\n  __typename?: 'PackageEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Package>;\n};\n\n/** A file in a package version. */\nexport type PackageFile = Node & {\n  __typename?: 'PackageFile';\n  id: Scalars['ID'];\n  /** MD5 hash of the file. */\n  md5?: Maybe<Scalars['String']>;\n  /** Name of the file. */\n  name: Scalars['String'];\n  /** The package version this file belongs to. */\n  packageVersion?: Maybe<PackageVersion>;\n  /** SHA1 hash of the file. */\n  sha1?: Maybe<Scalars['String']>;\n  /** SHA256 hash of the file. */\n  sha256?: Maybe<Scalars['String']>;\n  /** Size of the file in bytes. */\n  size?: Maybe<Scalars['Int']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** URL to download the asset. */\n  url?: Maybe<Scalars['URI']>;\n};\n\n/** The connection type for PackageFile. */\nexport type PackageFileConnection = {\n  __typename?: 'PackageFileConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PackageFileEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PackageFile>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PackageFileEdge = {\n  __typename?: 'PackageFileEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PackageFile>;\n};\n\n/** Ways in which lists of package files can be ordered upon return. */\nexport type PackageFileOrder = {\n  /** The direction in which to order package files by the specified field. */\n  direction?: InputMaybe<OrderDirection>;\n  /** The field in which to order package files by. */\n  field?: InputMaybe<PackageFileOrderField>;\n};\n\n/** Properties by which package file connections can be ordered. */\nexport enum PackageFileOrderField {\n  /** Order package files by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Ways in which lists of packages can be ordered upon return. */\nexport type PackageOrder = {\n  /** The direction in which to order packages by the specified field. */\n  direction?: InputMaybe<OrderDirection>;\n  /** The field in which to order packages by. */\n  field?: InputMaybe<PackageOrderField>;\n};\n\n/** Properties by which package connections can be ordered. */\nexport enum PackageOrderField {\n  /** Order packages by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Represents an owner of a package. */\nexport type PackageOwner = {\n  id: Scalars['ID'];\n  /** A list of packages under the owner. */\n  packages: PackageConnection;\n};\n\n\n/** Represents an owner of a package. */\nexport type PackageOwnerPackagesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  names?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  orderBy?: InputMaybe<PackageOrder>;\n  packageType?: InputMaybe<PackageType>;\n  repositoryId?: InputMaybe<Scalars['ID']>;\n};\n\n/** Represents a object that contains package activity statistics such as downloads. */\nexport type PackageStatistics = {\n  __typename?: 'PackageStatistics';\n  /** Number of times the package was downloaded since it was created. */\n  downloadsTotalCount: Scalars['Int'];\n};\n\n/** A version tag contains the mapping between a tag name and a version. */\nexport type PackageTag = Node & {\n  __typename?: 'PackageTag';\n  id: Scalars['ID'];\n  /** Identifies the tag name of the version. */\n  name: Scalars['String'];\n  /** Version that the tag is associated with. */\n  version?: Maybe<PackageVersion>;\n};\n\n/** The possible types of a package. */\nexport enum PackageType {\n  /** A debian package. */\n  Debian = 'DEBIAN',\n  /** A docker image. */\n  Docker = 'DOCKER',\n  /** A maven package. */\n  Maven = 'MAVEN',\n  /** An npm package. */\n  Npm = 'NPM',\n  /** A nuget package. */\n  Nuget = 'NUGET',\n  /** A python package. */\n  Pypi = 'PYPI',\n  /** A rubygems package. */\n  Rubygems = 'RUBYGEMS'\n}\n\n/** Information about a specific package version. */\nexport type PackageVersion = Node & {\n  __typename?: 'PackageVersion';\n  /** List of files associated with this package version */\n  files: PackageFileConnection;\n  id: Scalars['ID'];\n  /** The package associated with this version. */\n  package?: Maybe<Package>;\n  /** The platform this version was built for. */\n  platform?: Maybe<Scalars['String']>;\n  /** Whether or not this version is a pre-release. */\n  preRelease: Scalars['Boolean'];\n  /** The README of this package version. */\n  readme?: Maybe<Scalars['String']>;\n  /** The release associated with this package version. */\n  release?: Maybe<Release>;\n  /** Statistics about package activity. */\n  statistics?: Maybe<PackageVersionStatistics>;\n  /** The package version summary. */\n  summary?: Maybe<Scalars['String']>;\n  /** The version string. */\n  version: Scalars['String'];\n};\n\n\n/** Information about a specific package version. */\nexport type PackageVersionFilesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PackageFileOrder>;\n};\n\n/** The connection type for PackageVersion. */\nexport type PackageVersionConnection = {\n  __typename?: 'PackageVersionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PackageVersionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PackageVersion>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PackageVersionEdge = {\n  __typename?: 'PackageVersionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PackageVersion>;\n};\n\n/** Ways in which lists of package versions can be ordered upon return. */\nexport type PackageVersionOrder = {\n  /** The direction in which to order package versions by the specified field. */\n  direction?: InputMaybe<OrderDirection>;\n  /** The field in which to order package versions by. */\n  field?: InputMaybe<PackageVersionOrderField>;\n};\n\n/** Properties by which package version connections can be ordered. */\nexport enum PackageVersionOrderField {\n  /** Order package versions by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Represents a object that contains package version activity statistics such as downloads. */\nexport type PackageVersionStatistics = {\n  __typename?: 'PackageVersionStatistics';\n  /** Number of times the package was downloaded since it was created. */\n  downloadsTotalCount: Scalars['Int'];\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\n/** Types that can grant permissions on a repository to a user */\nexport type PermissionGranter = Organization | Repository | Team;\n\n/** A level of permission and source for a user's access to a repository. */\nexport type PermissionSource = {\n  __typename?: 'PermissionSource';\n  /** The organization the repository belongs to. */\n  organization: Organization;\n  /** The level of access this source has granted to the user. */\n  permission: DefaultRepositoryPermissionField;\n  /** The source of this permission. */\n  source: PermissionGranter;\n};\n\n/** Autogenerated input type of PinIssue */\nexport type PinIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the issue to be pinned */\n  issueId: Scalars['ID'];\n};\n\n/** Autogenerated return type of PinIssue */\nexport type PinIssuePayload = {\n  __typename?: 'PinIssuePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The issue that was pinned */\n  issue?: Maybe<Issue>;\n};\n\n/** Types that can be pinned to a profile page. */\nexport type PinnableItem = Gist | Repository;\n\n/** The connection type for PinnableItem. */\nexport type PinnableItemConnection = {\n  __typename?: 'PinnableItemConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PinnableItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PinnableItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PinnableItemEdge = {\n  __typename?: 'PinnableItemEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PinnableItem>;\n};\n\n/** Represents items that can be pinned to a profile page or dashboard. */\nexport enum PinnableItemType {\n  /** A gist. */\n  Gist = 'GIST',\n  /** An issue. */\n  Issue = 'ISSUE',\n  /** An organization. */\n  Organization = 'ORGANIZATION',\n  /** A project. */\n  Project = 'PROJECT',\n  /** A pull request. */\n  PullRequest = 'PULL_REQUEST',\n  /** A repository. */\n  Repository = 'REPOSITORY',\n  /** A team. */\n  Team = 'TEAM',\n  /** A user. */\n  User = 'USER'\n}\n\n/** A Pinned Discussion is a discussion pinned to a repository's index page. */\nexport type PinnedDiscussion = Node & RepositoryNode & {\n  __typename?: 'PinnedDiscussion';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The discussion that was pinned. */\n  discussion: Discussion;\n  /** Color stops of the chosen gradient */\n  gradientStopColors: Array<Scalars['String']>;\n  id: Scalars['ID'];\n  /** Background texture pattern */\n  pattern: PinnedDiscussionPattern;\n  /** The actor that pinned this discussion. */\n  pinnedBy: Actor;\n  /** Preconfigured background gradient option */\n  preconfiguredGradient?: Maybe<PinnedDiscussionGradient>;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** The connection type for PinnedDiscussion. */\nexport type PinnedDiscussionConnection = {\n  __typename?: 'PinnedDiscussionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PinnedDiscussionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PinnedDiscussion>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PinnedDiscussionEdge = {\n  __typename?: 'PinnedDiscussionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PinnedDiscussion>;\n};\n\n/** Preconfigured gradients that may be used to style discussions pinned within a repository. */\nexport enum PinnedDiscussionGradient {\n  /** A gradient of blue to mint */\n  BlueMint = 'BLUE_MINT',\n  /** A gradient of blue to purple */\n  BluePurple = 'BLUE_PURPLE',\n  /** A gradient of pink to blue */\n  PinkBlue = 'PINK_BLUE',\n  /** A gradient of purple to coral */\n  PurpleCoral = 'PURPLE_CORAL',\n  /** A gradient of red to orange */\n  RedOrange = 'RED_ORANGE'\n}\n\n/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */\nexport enum PinnedDiscussionPattern {\n  /** An upward-facing chevron pattern */\n  ChevronUp = 'CHEVRON_UP',\n  /** A hollow dot pattern */\n  Dot = 'DOT',\n  /** A solid dot pattern */\n  DotFill = 'DOT_FILL',\n  /** A heart pattern */\n  HeartFill = 'HEART_FILL',\n  /** A plus sign pattern */\n  Plus = 'PLUS',\n  /** A lightning bolt pattern */\n  Zap = 'ZAP'\n}\n\n/** Represents a 'pinned' event on a given issue or pull request. */\nexport type PinnedEvent = Node & {\n  __typename?: 'PinnedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Identifies the issue associated with the event. */\n  issue: Issue;\n};\n\n/** A Pinned Issue is a issue pinned to a repository's index page. */\nexport type PinnedIssue = Node & {\n  __typename?: 'PinnedIssue';\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** The issue that was pinned. */\n  issue: Issue;\n  /** The actor that pinned this issue. */\n  pinnedBy: Actor;\n  /** The repository that this issue was pinned to. */\n  repository: Repository;\n};\n\n/** The connection type for PinnedIssue. */\nexport type PinnedIssueConnection = {\n  __typename?: 'PinnedIssueConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PinnedIssueEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PinnedIssue>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PinnedIssueEdge = {\n  __typename?: 'PinnedIssueEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PinnedIssue>;\n};\n\n/** Audit log entry for a private_repository_forking.disable event. */\nexport type PrivateRepositoryForkingDisableAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'PrivateRepositoryForkingDisableAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']>;\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a private_repository_forking.enable event. */\nexport type PrivateRepositoryForkingEnableAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'PrivateRepositoryForkingEnableAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']>;\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own. */\nexport type ProfileItemShowcase = {\n  __typename?: 'ProfileItemShowcase';\n  /** Whether or not the owner has pinned any repositories or gists. */\n  hasPinnedItems: Scalars['Boolean'];\n  /** The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned. */\n  items: PinnableItemConnection;\n};\n\n\n/** A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own. */\nexport type ProfileItemShowcaseItemsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** Represents any entity on GitHub that has a profile page. */\nexport type ProfileOwner = {\n  /** Determine if this repository owner has any items that can be pinned to their profile. */\n  anyPinnableItems: Scalars['Boolean'];\n  /** The public profile email. */\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */\n  itemShowcase: ProfileItemShowcase;\n  /** The public profile location. */\n  location?: Maybe<Scalars['String']>;\n  /** The username used to login. */\n  login: Scalars['String'];\n  /** The public profile name. */\n  name?: Maybe<Scalars['String']>;\n  /** A list of repositories and gists this profile owner can pin to their profile. */\n  pinnableItems: PinnableItemConnection;\n  /** A list of repositories and gists this profile owner has pinned to their profile */\n  pinnedItems: PinnableItemConnection;\n  /** Returns how many more items this profile owner can pin to their profile. */\n  pinnedItemsRemaining: Scalars['Int'];\n  /** Can the viewer pin repositories and gists to the profile? */\n  viewerCanChangePinnedItems: Scalars['Boolean'];\n  /** The public profile website URL. */\n  websiteUrl?: Maybe<Scalars['URI']>;\n};\n\n\n/** Represents any entity on GitHub that has a profile page. */\nexport type ProfileOwnerAnyPinnableItemsArgs = {\n  type?: InputMaybe<PinnableItemType>;\n};\n\n\n/** Represents any entity on GitHub that has a profile page. */\nexport type ProfileOwnerPinnableItemsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n\n/** Represents any entity on GitHub that has a profile page. */\nexport type ProfileOwnerPinnedItemsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n/** Projects manage issues, pull requests and notes within a project owner. */\nexport type Project = Closable & Node & Updatable & {\n  __typename?: 'Project';\n  /** The project's description body. */\n  body?: Maybe<Scalars['String']>;\n  /** The projects description body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** `true` if the object is closed (definition of closed may depend on type) */\n  closed: Scalars['Boolean'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']>;\n  /** List of columns in the project */\n  columns: ProjectColumnConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The actor who originally created the project. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** The project's name. */\n  name: Scalars['String'];\n  /** The project's number. */\n  number: Scalars['Int'];\n  /** The project's owner. Currently limited to repositories, organizations, and users. */\n  owner: ProjectOwner;\n  /** List of pending cards in this project */\n  pendingCards: ProjectCardConnection;\n  /** Project progress details. */\n  progress: ProjectProgress;\n  /** The HTTP path for this project */\n  resourcePath: Scalars['URI'];\n  /** Whether the project is open or closed. */\n  state: ProjectState;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this project */\n  url: Scalars['URI'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n};\n\n\n/** Projects manage issues, pull requests and notes within a project owner. */\nexport type ProjectColumnsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** Projects manage issues, pull requests and notes within a project owner. */\nexport type ProjectPendingCardsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A card in a project. */\nexport type ProjectCard = Node & {\n  __typename?: 'ProjectCard';\n  /**\n   * The project column this card is associated under. A card may only belong to one\n   * project column at a time. The column field will be null if the card is created\n   * in a pending state and has yet to be associated with a column. Once cards are\n   * associated with a column, they will not become pending in the future.\n   *\n   */\n  column?: Maybe<ProjectColumn>;\n  /** The card content item */\n  content?: Maybe<ProjectCardItem>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The actor who created this card */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** Whether the card is archived */\n  isArchived: Scalars['Boolean'];\n  /** The card note */\n  note?: Maybe<Scalars['String']>;\n  /** The project that contains this card. */\n  project: Project;\n  /** The HTTP path for this card */\n  resourcePath: Scalars['URI'];\n  /** The state of ProjectCard */\n  state?: Maybe<ProjectCardState>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this card */\n  url: Scalars['URI'];\n};\n\n/** The possible archived states of a project card. */\nexport enum ProjectCardArchivedState {\n  /** A project card that is archived */\n  Archived = 'ARCHIVED',\n  /** A project card that is not archived */\n  NotArchived = 'NOT_ARCHIVED'\n}\n\n/** The connection type for ProjectCard. */\nexport type ProjectCardConnection = {\n  __typename?: 'ProjectCardConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectCardEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectCard>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProjectCardEdge = {\n  __typename?: 'ProjectCardEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectCard>;\n};\n\n/** Types that can be inside Project Cards. */\nexport type ProjectCardItem = Issue | PullRequest;\n\n/** Various content states of a ProjectCard */\nexport enum ProjectCardState {\n  /** The card has content only. */\n  ContentOnly = 'CONTENT_ONLY',\n  /** The card has a note only. */\n  NoteOnly = 'NOTE_ONLY',\n  /** The card is redacted. */\n  Redacted = 'REDACTED'\n}\n\n/** A column inside a project. */\nexport type ProjectColumn = Node & {\n  __typename?: 'ProjectColumn';\n  /** List of cards in the column */\n  cards: ProjectCardConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** The project column's name. */\n  name: Scalars['String'];\n  /** The project that contains this column. */\n  project: Project;\n  /** The semantic purpose of the column */\n  purpose?: Maybe<ProjectColumnPurpose>;\n  /** The HTTP path for this project column */\n  resourcePath: Scalars['URI'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this project column */\n  url: Scalars['URI'];\n};\n\n\n/** A column inside a project. */\nexport type ProjectColumnCardsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for ProjectColumn. */\nexport type ProjectColumnConnection = {\n  __typename?: 'ProjectColumnConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectColumnEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectColumn>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProjectColumnEdge = {\n  __typename?: 'ProjectColumnEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectColumn>;\n};\n\n/** The semantic purpose of the column - todo, in progress, or done. */\nexport enum ProjectColumnPurpose {\n  /** The column contains cards which are complete */\n  Done = 'DONE',\n  /** The column contains cards which are currently being worked on */\n  InProgress = 'IN_PROGRESS',\n  /** The column contains cards still to be worked on */\n  Todo = 'TODO'\n}\n\n/** A list of projects associated with the owner. */\nexport type ProjectConnection = {\n  __typename?: 'ProjectConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Project>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProjectEdge = {\n  __typename?: 'ProjectEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Project>;\n};\n\n/** The type of a project item. */\nexport enum ProjectItemType {\n  /** Draft Issue */\n  DraftIssue = 'DRAFT_ISSUE',\n  /** Issue */\n  Issue = 'ISSUE',\n  /** Pull Request */\n  PullRequest = 'PULL_REQUEST',\n  /** Redacted Item */\n  Redacted = 'REDACTED'\n}\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectNext = Closable & Node & Updatable & {\n  __typename?: 'ProjectNext';\n  /** Returns true if the project is closed. */\n  closed: Scalars['Boolean'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The actor who originally created the project. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The project's description. */\n  description?: Maybe<Scalars['String']>;\n  /** List of fields in the project */\n  fields: ProjectNextFieldConnection;\n  id: Scalars['ID'];\n  /** List of items in the project */\n  items: ProjectNextItemConnection;\n  /** The project's number. */\n  number: Scalars['Int'];\n  /** The project's owner. Currently limited to organizations and users. */\n  owner: ProjectNextOwner;\n  /** Returns true if the project is public. */\n  public: Scalars['Boolean'];\n  /** The repositories the project is linked to. */\n  repositories: RepositoryConnection;\n  /** The HTTP path for this project */\n  resourcePath: Scalars['URI'];\n  /** The project's short description. */\n  shortDescription?: Maybe<Scalars['String']>;\n  /** The project's name. */\n  title?: Maybe<Scalars['String']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this project */\n  url: Scalars['URI'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectNextFieldsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectNextItemsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectNextRepositoriesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for ProjectNext. */\nexport type ProjectNextConnection = {\n  __typename?: 'ProjectNextConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectNextEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectNext>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProjectNextEdge = {\n  __typename?: 'ProjectNextEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectNext>;\n};\n\n/** A field inside a project. */\nexport type ProjectNextField = Node & ProjectNextFieldCommon & {\n  __typename?: 'ProjectNextField';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The field's type. */\n  dataType: ProjectNextFieldType;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** The project field's name. */\n  name: Scalars['String'];\n  /** The project that contains this field. */\n  project: ProjectNext;\n  /** The field's settings. */\n  settings?: Maybe<Scalars['String']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** Common fields across different field types */\nexport type ProjectNextFieldCommon = {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The field's type. */\n  dataType: ProjectNextFieldType;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** The project field's name. */\n  name: Scalars['String'];\n  /** The project that contains this field. */\n  project: ProjectNext;\n  /** The field's settings. */\n  settings?: Maybe<Scalars['String']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** The connection type for ProjectNextField. */\nexport type ProjectNextFieldConnection = {\n  __typename?: 'ProjectNextFieldConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectNextFieldEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectNextField>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProjectNextFieldEdge = {\n  __typename?: 'ProjectNextFieldEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectNextField>;\n};\n\n/** The type of a project next field. */\nexport enum ProjectNextFieldType {\n  /** Assignees */\n  Assignees = 'ASSIGNEES',\n  /** Date */\n  Date = 'DATE',\n  /** Iteration */\n  Iteration = 'ITERATION',\n  /** Labels */\n  Labels = 'LABELS',\n  /** Linked Pull Requests */\n  LinkedPullRequests = 'LINKED_PULL_REQUESTS',\n  /** Milestone */\n  Milestone = 'MILESTONE',\n  /** Number */\n  Number = 'NUMBER',\n  /** Repository */\n  Repository = 'REPOSITORY',\n  /** Reviewers */\n  Reviewers = 'REVIEWERS',\n  /** Single Select */\n  SingleSelect = 'SINGLE_SELECT',\n  /** Text */\n  Text = 'TEXT',\n  /** Title */\n  Title = 'TITLE',\n  /** Tracks */\n  Tracks = 'TRACKS'\n}\n\n/** An item within a new Project. */\nexport type ProjectNextItem = Node & {\n  __typename?: 'ProjectNextItem';\n  /** The content of the referenced draft issue, issue, or pull request */\n  content?: Maybe<ProjectNextItemContent>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The actor who created the item. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** List of field values */\n  fieldValues: ProjectNextItemFieldValueConnection;\n  id: Scalars['ID'];\n  /** Whether the item is archived. */\n  isArchived: Scalars['Boolean'];\n  /** The project that contains this item. */\n  project: ProjectNext;\n  /** The title of the item */\n  title?: Maybe<Scalars['String']>;\n  /** The type of the item. */\n  type: ProjectItemType;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n\n/** An item within a new Project. */\nexport type ProjectNextItemFieldValuesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for ProjectNextItem. */\nexport type ProjectNextItemConnection = {\n  __typename?: 'ProjectNextItemConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectNextItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectNextItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Types that can be inside Project Items. */\nexport type ProjectNextItemContent = DraftIssue | Issue | PullRequest;\n\n/** An edge in a connection. */\nexport type ProjectNextItemEdge = {\n  __typename?: 'ProjectNextItemEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectNextItem>;\n};\n\n/** An value of a field in an item of a new Project. */\nexport type ProjectNextItemFieldValue = Node & {\n  __typename?: 'ProjectNextItemFieldValue';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The actor who created the item. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** The project field that contains this value. */\n  projectField: ProjectNextField;\n  /** The project item that contains this value. */\n  projectItem: ProjectNextItem;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The value of a field */\n  value?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for ProjectNextItemFieldValue. */\nexport type ProjectNextItemFieldValueConnection = {\n  __typename?: 'ProjectNextItemFieldValueConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectNextItemFieldValueEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectNextItemFieldValue>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ProjectNextItemFieldValueEdge = {\n  __typename?: 'ProjectNextItemFieldValueEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectNextItemFieldValue>;\n};\n\n/** Properties by which the return project can be ordered. */\nexport enum ProjectNextOrderField {\n  /** The project's date and time of creation */\n  CreatedAt = 'CREATED_AT',\n  /** The project's number */\n  Number = 'NUMBER',\n  /** The project's title */\n  Title = 'TITLE',\n  /** The project's date and time of update */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** Represents an owner of a project (beta). */\nexport type ProjectNextOwner = {\n  id: Scalars['ID'];\n  /** Find a project by project (beta) number. */\n  projectNext?: Maybe<ProjectNext>;\n  /** A list of projects (beta) under the owner. */\n  projectsNext: ProjectNextConnection;\n};\n\n\n/** Represents an owner of a project (beta). */\nexport type ProjectNextOwnerProjectNextArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** Represents an owner of a project (beta). */\nexport type ProjectNextOwnerProjectsNextArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  query?: InputMaybe<Scalars['String']>;\n  sortBy?: InputMaybe<ProjectNextOrderField>;\n};\n\n/** Ways in which lists of projects can be ordered upon return. */\nexport type ProjectOrder = {\n  /** The direction in which to order projects by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order projects by. */\n  field: ProjectOrderField;\n};\n\n/** Properties by which project connections can be ordered. */\nexport enum ProjectOrderField {\n  /** Order projects by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order projects by name */\n  Name = 'NAME',\n  /** Order projects by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** Represents an owner of a Project. */\nexport type ProjectOwner = {\n  id: Scalars['ID'];\n  /** Find project by number. */\n  project?: Maybe<Project>;\n  /** A list of projects under the owner. */\n  projects: ProjectConnection;\n  /** The HTTP path listing owners projects */\n  projectsResourcePath: Scalars['URI'];\n  /** The HTTP URL listing owners projects */\n  projectsUrl: Scalars['URI'];\n  /** Can the current viewer create new projects on this owner. */\n  viewerCanCreateProjects: Scalars['Boolean'];\n};\n\n\n/** Represents an owner of a Project. */\nexport type ProjectOwnerProjectArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** Represents an owner of a Project. */\nexport type ProjectOwnerProjectsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ProjectOrder>;\n  search?: InputMaybe<Scalars['String']>;\n  states?: InputMaybe<Array<ProjectState>>;\n};\n\n/** Project progress stats. */\nexport type ProjectProgress = {\n  __typename?: 'ProjectProgress';\n  /** The number of done cards. */\n  doneCount: Scalars['Int'];\n  /** The percentage of done cards. */\n  donePercentage: Scalars['Float'];\n  /** Whether progress tracking is enabled and cards with purpose exist for this project */\n  enabled: Scalars['Boolean'];\n  /** The number of in-progress cards. */\n  inProgressCount: Scalars['Int'];\n  /** The percentage of in-progress cards. */\n  inProgressPercentage: Scalars['Float'];\n  /** The number of to do cards. */\n  todoCount: Scalars['Int'];\n  /** The percentage of to do cards. */\n  todoPercentage: Scalars['Float'];\n};\n\n/** State of the project; either 'open' or 'closed' */\nexport enum ProjectState {\n  /** The project is closed. */\n  Closed = 'CLOSED',\n  /** The project is open. */\n  Open = 'OPEN'\n}\n\n/** GitHub-provided templates for Projects */\nexport enum ProjectTemplate {\n  /** Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns. */\n  AutomatedKanbanV2 = 'AUTOMATED_KANBAN_V2',\n  /** Create a board with triggers to automatically move cards across columns with review automation. */\n  AutomatedReviewsKanban = 'AUTOMATED_REVIEWS_KANBAN',\n  /** Create a board with columns for To do, In progress and Done. */\n  BasicKanban = 'BASIC_KANBAN',\n  /** Create a board to triage and prioritize bugs with To do, priority, and Done columns. */\n  BugTriage = 'BUG_TRIAGE'\n}\n\n/** A user's public key. */\nexport type PublicKey = Node & {\n  __typename?: 'PublicKey';\n  /** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */\n  accessedAt?: Maybe<Scalars['DateTime']>;\n  /** Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user. */\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** The fingerprint for this PublicKey. */\n  fingerprint: Scalars['String'];\n  id: Scalars['ID'];\n  /** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */\n  isReadOnly?: Maybe<Scalars['Boolean']>;\n  /** The public key string. */\n  key: Scalars['String'];\n  /** Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user. */\n  updatedAt?: Maybe<Scalars['DateTime']>;\n};\n\n/** The connection type for PublicKey. */\nexport type PublicKeyConnection = {\n  __typename?: 'PublicKeyConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PublicKeyEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PublicKey>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PublicKeyEdge = {\n  __typename?: 'PublicKeyEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PublicKey>;\n};\n\n/** A repository pull request. */\nexport type PullRequest = Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectNextOwner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment & {\n  __typename?: 'PullRequest';\n  /** Reason that the conversation was locked. */\n  activeLockReason?: Maybe<LockReason>;\n  /** The number of additions in this pull request. */\n  additions: Scalars['Int'];\n  /** A list of Users assigned to this object. */\n  assignees: UserConnection;\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** Returns the auto-merge request object if one exists for this pull request. */\n  autoMergeRequest?: Maybe<AutoMergeRequest>;\n  /** Identifies the base Ref associated with the pull request. */\n  baseRef?: Maybe<Ref>;\n  /** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */\n  baseRefName: Scalars['String'];\n  /** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */\n  baseRefOid: Scalars['GitObjectID'];\n  /** The repository associated with this pull request's base Ref. */\n  baseRepository?: Maybe<Repository>;\n  /** The body as Markdown. */\n  body: Scalars['String'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String'];\n  /** The number of changed files in this pull request. */\n  changedFiles: Scalars['Int'];\n  /** The HTTP path for the checks of this pull request. */\n  checksResourcePath: Scalars['URI'];\n  /** The HTTP URL for the checks of this pull request. */\n  checksUrl: Scalars['URI'];\n  /** `true` if the pull request is closed */\n  closed: Scalars['Boolean'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']>;\n  /** List of issues that were may be closed by this pull request */\n  closingIssuesReferences?: Maybe<IssueConnection>;\n  /** A list of comments associated with the pull request. */\n  comments: IssueCommentConnection;\n  /** A list of commits present in this pull request's head branch not present in the base branch. */\n  commits: PullRequestCommitConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The number of deletions in this pull request. */\n  deletions: Scalars['Int'];\n  /** The actor who edited this pull request's body. */\n  editor?: Maybe<Actor>;\n  /** Lists the files changed within this pull request. */\n  files?: Maybe<PullRequestChangedFileConnection>;\n  /** Identifies the head Ref associated with the pull request. */\n  headRef?: Maybe<Ref>;\n  /** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */\n  headRefName: Scalars['String'];\n  /** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */\n  headRefOid: Scalars['GitObjectID'];\n  /** The repository associated with this pull request's head Ref. */\n  headRepository?: Maybe<Repository>;\n  /** The owner of the repository associated with this pull request's head Ref. */\n  headRepositoryOwner?: Maybe<RepositoryOwner>;\n  /** The hovercard information for this issue */\n  hovercard: Hovercard;\n  id: Scalars['ID'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean'];\n  /** The head and base repositories are different. */\n  isCrossRepository: Scalars['Boolean'];\n  /** Identifies if the pull request is a draft. */\n  isDraft: Scalars['Boolean'];\n  /** Is this pull request read by the viewer */\n  isReadByViewer?: Maybe<Scalars['Boolean']>;\n  /** A list of labels associated with the object. */\n  labels?: Maybe<LabelConnection>;\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']>;\n  /** A list of latest reviews per user associated with the pull request. */\n  latestOpinionatedReviews?: Maybe<PullRequestReviewConnection>;\n  /** A list of latest reviews per user associated with the pull request that are not also pending review. */\n  latestReviews?: Maybe<PullRequestReviewConnection>;\n  /** `true` if the pull request is locked */\n  locked: Scalars['Boolean'];\n  /** Indicates whether maintainers can modify the pull request. */\n  maintainerCanModify: Scalars['Boolean'];\n  /** The commit that was created when this pull request was merged. */\n  mergeCommit?: Maybe<Commit>;\n  /** Whether or not the pull request can be merged based on the existence of merge conflicts. */\n  mergeable: MergeableState;\n  /** Whether or not the pull request was merged. */\n  merged: Scalars['Boolean'];\n  /** The date and time that the pull request was merged. */\n  mergedAt?: Maybe<Scalars['DateTime']>;\n  /** The actor who merged the pull request. */\n  mergedBy?: Maybe<Actor>;\n  /** Identifies the milestone associated with the pull request. */\n  milestone?: Maybe<Milestone>;\n  /** Identifies the pull request number. */\n  number: Scalars['Int'];\n  /** A list of Users that are participating in the Pull Request conversation. */\n  participants: UserConnection;\n  /** The permalink to the pull request. */\n  permalink: Scalars['URI'];\n  /** The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request. */\n  potentialMergeCommit?: Maybe<Commit>;\n  /** List of project cards associated with this pull request. */\n  projectCards: ProjectCardConnection;\n  /** Find a project by project (beta) number. */\n  projectNext?: Maybe<ProjectNext>;\n  /** List of project (beta) items associated with this pull request. */\n  projectNextItems: ProjectNextItemConnection;\n  /** A list of projects (beta) under the owner. */\n  projectsNext: ProjectNextConnection;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The HTTP path for this pull request. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP path for reverting this pull request. */\n  revertResourcePath: Scalars['URI'];\n  /** The HTTP URL for reverting this pull request. */\n  revertUrl: Scalars['URI'];\n  /** The current status of this pull request with respect to code review. */\n  reviewDecision?: Maybe<PullRequestReviewDecision>;\n  /** A list of review requests associated with the pull request. */\n  reviewRequests?: Maybe<ReviewRequestConnection>;\n  /** The list of all review threads for this pull request. */\n  reviewThreads: PullRequestReviewThreadConnection;\n  /** A list of reviews associated with the pull request. */\n  reviews?: Maybe<PullRequestReviewConnection>;\n  /** Identifies the state of the pull request. */\n  state: PullRequestState;\n  /** A list of reviewer suggestions based on commit history and past review comments. */\n  suggestedReviewers: Array<Maybe<SuggestedReviewer>>;\n  /**\n   * A list of events, comments, commits, etc. associated with the pull request.\n   * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.\n   */\n  timeline: PullRequestTimelineConnection;\n  /** A list of events, comments, commits, etc. associated with the pull request. */\n  timelineItems: PullRequestTimelineItemsConnection;\n  /** Identifies the pull request title. */\n  title: Scalars['String'];\n  /** Identifies the pull request title rendered to HTML. */\n  titleHTML: Scalars['HTML'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this pull request. */\n  url: Scalars['URI'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Whether or not the viewer can apply suggestion. */\n  viewerCanApplySuggestion: Scalars['Boolean'];\n  /** Check if the viewer can restore the deleted head ref. */\n  viewerCanDeleteHeadRef: Scalars['Boolean'];\n  /** Whether or not the viewer can disable auto-merge */\n  viewerCanDisableAutoMerge: Scalars['Boolean'];\n  /** Whether or not the viewer can enable auto-merge */\n  viewerCanEnableAutoMerge: Scalars['Boolean'];\n  /** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */\n  viewerCanMergeAsAdmin: Scalars['Boolean'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean'];\n  /** The latest review given from the viewer. */\n  viewerLatestReview?: Maybe<PullRequestReview>;\n  /** The person who has requested the viewer for review on this pull request. */\n  viewerLatestReviewRequest?: Maybe<ReviewRequest>;\n  /** The merge body text for the viewer and method. */\n  viewerMergeBodyText: Scalars['String'];\n  /** The merge headline text for the viewer and method. */\n  viewerMergeHeadlineText: Scalars['String'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestAssigneesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestClosingIssuesReferencesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  userLinkedOnly?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueCommentOrder>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestCommitsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestFilesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestHovercardArgs = {\n  includeNotificationContexts?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestLabelsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestLatestOpinionatedReviewsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  writersOnly?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestLatestReviewsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestParticipantsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestProjectCardsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestProjectNextArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** A repository pull request. */\nexport type PullRequestProjectNextItemsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  includeArchived?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestProjectsNextArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  query?: InputMaybe<Scalars['String']>;\n  sortBy?: InputMaybe<ProjectNextOrderField>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestReactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestReviewRequestsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestReviewThreadsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestReviewsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  author?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  states?: InputMaybe<Array<PullRequestReviewState>>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestTimelineArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  since?: InputMaybe<Scalars['DateTime']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestTimelineItemsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  itemTypes?: InputMaybe<Array<PullRequestTimelineItemsItemType>>;\n  last?: InputMaybe<Scalars['Int']>;\n  since?: InputMaybe<Scalars['DateTime']>;\n  skip?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestViewerMergeBodyTextArgs = {\n  mergeType?: InputMaybe<PullRequestMergeMethod>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestViewerMergeHeadlineTextArgs = {\n  mergeType?: InputMaybe<PullRequestMergeMethod>;\n};\n\n/** A file changed in a pull request. */\nexport type PullRequestChangedFile = {\n  __typename?: 'PullRequestChangedFile';\n  /** The number of additions to the file. */\n  additions: Scalars['Int'];\n  /** The number of deletions to the file. */\n  deletions: Scalars['Int'];\n  /** The path of the file. */\n  path: Scalars['String'];\n  /** The state of the file for the viewer. */\n  viewerViewedState: FileViewedState;\n};\n\n/** The connection type for PullRequestChangedFile. */\nexport type PullRequestChangedFileConnection = {\n  __typename?: 'PullRequestChangedFileConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestChangedFileEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestChangedFile>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PullRequestChangedFileEdge = {\n  __typename?: 'PullRequestChangedFileEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestChangedFile>;\n};\n\n/** Represents a Git commit part of a pull request. */\nexport type PullRequestCommit = Node & UniformResourceLocatable & {\n  __typename?: 'PullRequestCommit';\n  /** The Git commit object */\n  commit: Commit;\n  id: Scalars['ID'];\n  /** The pull request this commit belongs to */\n  pullRequest: PullRequest;\n  /** The HTTP path for this pull request commit */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this pull request commit */\n  url: Scalars['URI'];\n};\n\n/** Represents a commit comment thread part of a pull request. */\nexport type PullRequestCommitCommentThread = Node & RepositoryNode & {\n  __typename?: 'PullRequestCommitCommentThread';\n  /** The comments that exist in this thread. */\n  comments: CommitCommentConnection;\n  /** The commit the comments were made on. */\n  commit: Commit;\n  id: Scalars['ID'];\n  /** The file the comments were made on. */\n  path?: Maybe<Scalars['String']>;\n  /** The position in the diff for the commit that the comment was made on. */\n  position?: Maybe<Scalars['Int']>;\n  /** The pull request this commit comment thread belongs to */\n  pullRequest: PullRequest;\n  /** The repository associated with this node. */\n  repository: Repository;\n};\n\n\n/** Represents a commit comment thread part of a pull request. */\nexport type PullRequestCommitCommentThreadCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for PullRequestCommit. */\nexport type PullRequestCommitConnection = {\n  __typename?: 'PullRequestCommitConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestCommitEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestCommit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PullRequestCommitEdge = {\n  __typename?: 'PullRequestCommitEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestCommit>;\n};\n\n/** The connection type for PullRequest. */\nexport type PullRequestConnection = {\n  __typename?: 'PullRequestConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequest>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** This aggregates pull requests opened by a user within one repository. */\nexport type PullRequestContributionsByRepository = {\n  __typename?: 'PullRequestContributionsByRepository';\n  /** The pull request contributions. */\n  contributions: CreatedPullRequestContributionConnection;\n  /** The repository in which the pull requests were opened. */\n  repository: Repository;\n};\n\n\n/** This aggregates pull requests opened by a user within one repository. */\nexport type PullRequestContributionsByRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** An edge in a connection. */\nexport type PullRequestEdge = {\n  __typename?: 'PullRequestEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequest>;\n};\n\n/** Represents available types of methods to use when merging a pull request. */\nexport enum PullRequestMergeMethod {\n  /** Add all commits from the head branch to the base branch with a merge commit. */\n  Merge = 'MERGE',\n  /** Add all commits from the head branch onto the base branch individually. */\n  Rebase = 'REBASE',\n  /** Combine all commits from the head branch into a single commit in the base branch. */\n  Squash = 'SQUASH'\n}\n\n/** Ways in which lists of issues can be ordered upon return. */\nexport type PullRequestOrder = {\n  /** The direction in which to order pull requests by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order pull requests by. */\n  field: PullRequestOrderField;\n};\n\n/** Properties by which pull_requests connections can be ordered. */\nexport enum PullRequestOrderField {\n  /** Order pull_requests by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order pull_requests by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** A review object for a given pull request. */\nexport type PullRequestReview = Comment & Deletable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment & {\n  __typename?: 'PullRequestReview';\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** Indicates whether the author of this review has push access to the repository. */\n  authorCanPushToRepository: Scalars['Boolean'];\n  /** Identifies the pull request review body. */\n  body: Scalars['String'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The body of this review rendered as plain text. */\n  bodyText: Scalars['String'];\n  /** A list of review comments for the current pull request review. */\n  comments: PullRequestReviewCommentConnection;\n  /** Identifies the commit associated with this pull request review. */\n  commit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  id: Scalars['ID'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']>;\n  /** A list of teams that this review was made on behalf of. */\n  onBehalfOf: TeamConnection;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** Identifies the pull request associated with this pull request review. */\n  pullRequest: PullRequest;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The HTTP path permalink for this PullRequestReview. */\n  resourcePath: Scalars['URI'];\n  /** Identifies the current state of the pull request review. */\n  state: PullRequestReviewState;\n  /** Identifies when the Pull Request Review was submitted */\n  submittedAt?: Maybe<Scalars['DateTime']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL permalink for this PullRequestReview. */\n  url: Scalars['URI'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean'];\n};\n\n\n/** A review object for a given pull request. */\nexport type PullRequestReviewCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A review object for a given pull request. */\nexport type PullRequestReviewOnBehalfOfArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A review object for a given pull request. */\nexport type PullRequestReviewReactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A review object for a given pull request. */\nexport type PullRequestReviewUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A review comment associated with a given repository pull request. */\nexport type PullRequestReviewComment = Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment & {\n  __typename?: 'PullRequestReviewComment';\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The comment body of this review comment. */\n  body: Scalars['String'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The comment body of this review comment rendered as plain text. */\n  bodyText: Scalars['String'];\n  /** Identifies the commit associated with the comment. */\n  commit?: Maybe<Commit>;\n  /** Identifies when the comment was created. */\n  createdAt: Scalars['DateTime'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The diff hunk to which the comment applies. */\n  diffHunk: Scalars['String'];\n  /** Identifies when the comment was created in a draft state. */\n  draftedAt: Scalars['DateTime'];\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  id: Scalars['ID'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean'];\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']>;\n  /** Returns why the comment was minimized. */\n  minimizedReason?: Maybe<Scalars['String']>;\n  /** Identifies the original commit associated with the comment. */\n  originalCommit?: Maybe<Commit>;\n  /** The original line index in the diff to which the comment applies. */\n  originalPosition: Scalars['Int'];\n  /** Identifies when the comment body is outdated */\n  outdated: Scalars['Boolean'];\n  /** The path to which the comment applies. */\n  path: Scalars['String'];\n  /** The line index in the diff to which the comment applies. */\n  position?: Maybe<Scalars['Int']>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** The pull request associated with this review comment. */\n  pullRequest: PullRequest;\n  /** The pull request review associated with this review comment. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The comment this is a reply to. */\n  replyTo?: Maybe<PullRequestReviewComment>;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The HTTP path permalink for this review comment. */\n  resourcePath: Scalars['URI'];\n  /** Identifies the state of the comment. */\n  state: PullRequestReviewCommentState;\n  /** Identifies when the comment was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL permalink for this review comment. */\n  url: Scalars['URI'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean'];\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean'];\n};\n\n\n/** A review comment associated with a given repository pull request. */\nexport type PullRequestReviewCommentReactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A review comment associated with a given repository pull request. */\nexport type PullRequestReviewCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for PullRequestReviewComment. */\nexport type PullRequestReviewCommentConnection = {\n  __typename?: 'PullRequestReviewCommentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestReviewCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestReviewComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PullRequestReviewCommentEdge = {\n  __typename?: 'PullRequestReviewCommentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestReviewComment>;\n};\n\n/** The possible states of a pull request review comment. */\nexport enum PullRequestReviewCommentState {\n  /** A comment that is part of a pending review */\n  Pending = 'PENDING',\n  /** A comment that is part of a submitted review */\n  Submitted = 'SUBMITTED'\n}\n\n/** The connection type for PullRequestReview. */\nexport type PullRequestReviewConnection = {\n  __typename?: 'PullRequestReviewConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestReviewEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestReview>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** This aggregates pull request reviews made by a user within one repository. */\nexport type PullRequestReviewContributionsByRepository = {\n  __typename?: 'PullRequestReviewContributionsByRepository';\n  /** The pull request review contributions. */\n  contributions: CreatedPullRequestReviewContributionConnection;\n  /** The repository in which the pull request reviews were made. */\n  repository: Repository;\n};\n\n\n/** This aggregates pull request reviews made by a user within one repository. */\nexport type PullRequestReviewContributionsByRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** The review status of a pull request. */\nexport enum PullRequestReviewDecision {\n  /** The pull request has received an approving review. */\n  Approved = 'APPROVED',\n  /** Changes have been requested on the pull request. */\n  ChangesRequested = 'CHANGES_REQUESTED',\n  /** A review is required before the pull request can be merged. */\n  ReviewRequired = 'REVIEW_REQUIRED'\n}\n\n/** An edge in a connection. */\nexport type PullRequestReviewEdge = {\n  __typename?: 'PullRequestReviewEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestReview>;\n};\n\n/** The possible events to perform on a pull request review. */\nexport enum PullRequestReviewEvent {\n  /** Submit feedback and approve merging these changes. */\n  Approve = 'APPROVE',\n  /** Submit general feedback without explicit approval. */\n  Comment = 'COMMENT',\n  /** Dismiss review so it now longer effects merging. */\n  Dismiss = 'DISMISS',\n  /** Submit feedback that must be addressed before merging. */\n  RequestChanges = 'REQUEST_CHANGES'\n}\n\n/** The possible states of a pull request review. */\nexport enum PullRequestReviewState {\n  /** A review allowing the pull request to merge. */\n  Approved = 'APPROVED',\n  /** A review blocking the pull request from merging. */\n  ChangesRequested = 'CHANGES_REQUESTED',\n  /** An informational review. */\n  Commented = 'COMMENTED',\n  /** A review that has been dismissed. */\n  Dismissed = 'DISMISSED',\n  /** A review that has not yet been submitted. */\n  Pending = 'PENDING'\n}\n\n/** A threaded list of comments for a given pull request. */\nexport type PullRequestReviewThread = Node & {\n  __typename?: 'PullRequestReviewThread';\n  /** A list of pull request comments associated with the thread. */\n  comments: PullRequestReviewCommentConnection;\n  /** The side of the diff on which this thread was placed. */\n  diffSide: DiffSide;\n  id: Scalars['ID'];\n  /** Whether or not the thread has been collapsed (resolved) */\n  isCollapsed: Scalars['Boolean'];\n  /** Indicates whether this thread was outdated by newer changes. */\n  isOutdated: Scalars['Boolean'];\n  /** Whether this thread has been resolved */\n  isResolved: Scalars['Boolean'];\n  /** The line in the file to which this thread refers */\n  line?: Maybe<Scalars['Int']>;\n  /** The original line in the file to which this thread refers. */\n  originalLine?: Maybe<Scalars['Int']>;\n  /** The original start line in the file to which this thread refers (multi-line only). */\n  originalStartLine?: Maybe<Scalars['Int']>;\n  /** Identifies the file path of this thread. */\n  path: Scalars['String'];\n  /** Identifies the pull request associated with this thread. */\n  pullRequest: PullRequest;\n  /** Identifies the repository associated with this thread. */\n  repository: Repository;\n  /** The user who resolved this thread */\n  resolvedBy?: Maybe<User>;\n  /** The side of the diff that the first line of the thread starts on (multi-line only) */\n  startDiffSide?: Maybe<DiffSide>;\n  /** The start line in the file to which this thread refers (multi-line only) */\n  startLine?: Maybe<Scalars['Int']>;\n  /** Indicates whether the current viewer can reply to this thread. */\n  viewerCanReply: Scalars['Boolean'];\n  /** Whether or not the viewer can resolve this thread */\n  viewerCanResolve: Scalars['Boolean'];\n  /** Whether or not the viewer can unresolve this thread */\n  viewerCanUnresolve: Scalars['Boolean'];\n};\n\n\n/** A threaded list of comments for a given pull request. */\nexport type PullRequestReviewThreadCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  skip?: InputMaybe<Scalars['Int']>;\n};\n\n/** Review comment threads for a pull request review. */\nexport type PullRequestReviewThreadConnection = {\n  __typename?: 'PullRequestReviewThreadConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestReviewThreadEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestReviewThread>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PullRequestReviewThreadEdge = {\n  __typename?: 'PullRequestReviewThreadEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestReviewThread>;\n};\n\n/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */\nexport type PullRequestRevisionMarker = {\n  __typename?: 'PullRequestRevisionMarker';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The last commit the viewer has seen. */\n  lastSeenCommit: Commit;\n  /** The pull request to which the marker belongs. */\n  pullRequest: PullRequest;\n};\n\n/** The possible states of a pull request. */\nexport enum PullRequestState {\n  /** A pull request that has been closed without being merged. */\n  Closed = 'CLOSED',\n  /** A pull request that has been closed by being merged. */\n  Merged = 'MERGED',\n  /** A pull request that is still open. */\n  Open = 'OPEN'\n}\n\n/** A repository pull request template. */\nexport type PullRequestTemplate = {\n  __typename?: 'PullRequestTemplate';\n  /** The body of the template */\n  body?: Maybe<Scalars['String']>;\n  /** The filename of the template */\n  filename?: Maybe<Scalars['String']>;\n  /** The repository the template belongs to */\n  repository: Repository;\n};\n\n/** The connection type for PullRequestTimelineItem. */\nexport type PullRequestTimelineConnection = {\n  __typename?: 'PullRequestTimelineConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestTimelineItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestTimelineItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An item in a pull request timeline */\nexport type PullRequestTimelineItem = AssignedEvent | BaseRefDeletedEvent | BaseRefForcePushedEvent | ClosedEvent | Commit | CommitCommentThread | CrossReferencedEvent | DemilestonedEvent | DeployedEvent | DeploymentEnvironmentChangedEvent | HeadRefDeletedEvent | HeadRefForcePushedEvent | HeadRefRestoredEvent | IssueComment | LabeledEvent | LockedEvent | MergedEvent | MilestonedEvent | PullRequestReview | PullRequestReviewComment | PullRequestReviewThread | ReferencedEvent | RenamedTitleEvent | ReopenedEvent | ReviewDismissedEvent | ReviewRequestRemovedEvent | ReviewRequestedEvent | SubscribedEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnsubscribedEvent | UserBlockedEvent;\n\n/** An edge in a connection. */\nexport type PullRequestTimelineItemEdge = {\n  __typename?: 'PullRequestTimelineItemEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestTimelineItem>;\n};\n\n/** An item in a pull request timeline */\nexport type PullRequestTimelineItems = AddedToProjectEvent | AssignedEvent | AutoMergeDisabledEvent | AutoMergeEnabledEvent | AutoRebaseEnabledEvent | AutoSquashEnabledEvent | AutomaticBaseChangeFailedEvent | AutomaticBaseChangeSucceededEvent | BaseRefChangedEvent | BaseRefDeletedEvent | BaseRefForcePushedEvent | ClosedEvent | CommentDeletedEvent | ConnectedEvent | ConvertToDraftEvent | ConvertedNoteToIssueEvent | ConvertedToDiscussionEvent | CrossReferencedEvent | DemilestonedEvent | DeployedEvent | DeploymentEnvironmentChangedEvent | DisconnectedEvent | HeadRefDeletedEvent | HeadRefForcePushedEvent | HeadRefRestoredEvent | IssueComment | LabeledEvent | LockedEvent | MarkedAsDuplicateEvent | MentionedEvent | MergedEvent | MilestonedEvent | MovedColumnsInProjectEvent | PinnedEvent | PullRequestCommit | PullRequestCommitCommentThread | PullRequestReview | PullRequestReviewThread | PullRequestRevisionMarker | ReadyForReviewEvent | ReferencedEvent | RemovedFromProjectEvent | RenamedTitleEvent | ReopenedEvent | ReviewDismissedEvent | ReviewRequestRemovedEvent | ReviewRequestedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnmarkedAsDuplicateEvent | UnpinnedEvent | UnsubscribedEvent | UserBlockedEvent;\n\n/** The connection type for PullRequestTimelineItems. */\nexport type PullRequestTimelineItemsConnection = {\n  __typename?: 'PullRequestTimelineItemsConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestTimelineItemsEdge>>>;\n  /** Identifies the count of items after applying `before` and `after` filters. */\n  filteredCount: Scalars['Int'];\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestTimelineItems>>>;\n  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */\n  pageCount: Scalars['Int'];\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n  /** Identifies the date and time when the timeline was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** An edge in a connection. */\nexport type PullRequestTimelineItemsEdge = {\n  __typename?: 'PullRequestTimelineItemsEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestTimelineItems>;\n};\n\n/** The possible item types found in a timeline. */\nexport enum PullRequestTimelineItemsItemType {\n  /** Represents an 'added_to_merge_queue' event on a given pull request. */\n  AddedToMergeQueueEvent = 'ADDED_TO_MERGE_QUEUE_EVENT',\n  /** Represents a 'added_to_project' event on a given issue or pull request. */\n  AddedToProjectEvent = 'ADDED_TO_PROJECT_EVENT',\n  /** Represents an 'assigned' event on any assignable object. */\n  AssignedEvent = 'ASSIGNED_EVENT',\n  /** Represents a 'automatic_base_change_failed' event on a given pull request. */\n  AutomaticBaseChangeFailedEvent = 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT',\n  /** Represents a 'automatic_base_change_succeeded' event on a given pull request. */\n  AutomaticBaseChangeSucceededEvent = 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT',\n  /** Represents a 'auto_merge_disabled' event on a given pull request. */\n  AutoMergeDisabledEvent = 'AUTO_MERGE_DISABLED_EVENT',\n  /** Represents a 'auto_merge_enabled' event on a given pull request. */\n  AutoMergeEnabledEvent = 'AUTO_MERGE_ENABLED_EVENT',\n  /** Represents a 'auto_rebase_enabled' event on a given pull request. */\n  AutoRebaseEnabledEvent = 'AUTO_REBASE_ENABLED_EVENT',\n  /** Represents a 'auto_squash_enabled' event on a given pull request. */\n  AutoSquashEnabledEvent = 'AUTO_SQUASH_ENABLED_EVENT',\n  /** Represents a 'base_ref_changed' event on a given issue or pull request. */\n  BaseRefChangedEvent = 'BASE_REF_CHANGED_EVENT',\n  /** Represents a 'base_ref_deleted' event on a given pull request. */\n  BaseRefDeletedEvent = 'BASE_REF_DELETED_EVENT',\n  /** Represents a 'base_ref_force_pushed' event on a given pull request. */\n  BaseRefForcePushedEvent = 'BASE_REF_FORCE_PUSHED_EVENT',\n  /** Represents a 'closed' event on any `Closable`. */\n  ClosedEvent = 'CLOSED_EVENT',\n  /** Represents a 'comment_deleted' event on a given issue or pull request. */\n  CommentDeletedEvent = 'COMMENT_DELETED_EVENT',\n  /** Represents a 'connected' event on a given issue or pull request. */\n  ConnectedEvent = 'CONNECTED_EVENT',\n  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */\n  ConvertedNoteToIssueEvent = 'CONVERTED_NOTE_TO_ISSUE_EVENT',\n  /** Represents a 'converted_to_discussion' event on a given issue. */\n  ConvertedToDiscussionEvent = 'CONVERTED_TO_DISCUSSION_EVENT',\n  /** Represents a 'convert_to_draft' event on a given pull request. */\n  ConvertToDraftEvent = 'CONVERT_TO_DRAFT_EVENT',\n  /** Represents a mention made by one issue or pull request to another. */\n  CrossReferencedEvent = 'CROSS_REFERENCED_EVENT',\n  /** Represents a 'demilestoned' event on a given issue or pull request. */\n  DemilestonedEvent = 'DEMILESTONED_EVENT',\n  /** Represents a 'deployed' event on a given pull request. */\n  DeployedEvent = 'DEPLOYED_EVENT',\n  /** Represents a 'deployment_environment_changed' event on a given pull request. */\n  DeploymentEnvironmentChangedEvent = 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT',\n  /** Represents a 'disconnected' event on a given issue or pull request. */\n  DisconnectedEvent = 'DISCONNECTED_EVENT',\n  /** Represents a 'head_ref_deleted' event on a given pull request. */\n  HeadRefDeletedEvent = 'HEAD_REF_DELETED_EVENT',\n  /** Represents a 'head_ref_force_pushed' event on a given pull request. */\n  HeadRefForcePushedEvent = 'HEAD_REF_FORCE_PUSHED_EVENT',\n  /** Represents a 'head_ref_restored' event on a given pull request. */\n  HeadRefRestoredEvent = 'HEAD_REF_RESTORED_EVENT',\n  /** Represents a comment on an Issue. */\n  IssueComment = 'ISSUE_COMMENT',\n  /** Represents a 'labeled' event on a given issue or pull request. */\n  LabeledEvent = 'LABELED_EVENT',\n  /** Represents a 'locked' event on a given issue or pull request. */\n  LockedEvent = 'LOCKED_EVENT',\n  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */\n  MarkedAsDuplicateEvent = 'MARKED_AS_DUPLICATE_EVENT',\n  /** Represents a 'mentioned' event on a given issue or pull request. */\n  MentionedEvent = 'MENTIONED_EVENT',\n  /** Represents a 'merged' event on a given pull request. */\n  MergedEvent = 'MERGED_EVENT',\n  /** Represents a 'milestoned' event on a given issue or pull request. */\n  MilestonedEvent = 'MILESTONED_EVENT',\n  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */\n  MovedColumnsInProjectEvent = 'MOVED_COLUMNS_IN_PROJECT_EVENT',\n  /** Represents a 'pinned' event on a given issue or pull request. */\n  PinnedEvent = 'PINNED_EVENT',\n  /** Represents a Git commit part of a pull request. */\n  PullRequestCommit = 'PULL_REQUEST_COMMIT',\n  /** Represents a commit comment thread part of a pull request. */\n  PullRequestCommitCommentThread = 'PULL_REQUEST_COMMIT_COMMENT_THREAD',\n  /** A review object for a given pull request. */\n  PullRequestReview = 'PULL_REQUEST_REVIEW',\n  /** A threaded list of comments for a given pull request. */\n  PullRequestReviewThread = 'PULL_REQUEST_REVIEW_THREAD',\n  /** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */\n  PullRequestRevisionMarker = 'PULL_REQUEST_REVISION_MARKER',\n  /** Represents a 'ready_for_review' event on a given pull request. */\n  ReadyForReviewEvent = 'READY_FOR_REVIEW_EVENT',\n  /** Represents a 'referenced' event on a given `ReferencedSubject`. */\n  ReferencedEvent = 'REFERENCED_EVENT',\n  /** Represents a 'removed_from_merge_queue' event on a given pull request. */\n  RemovedFromMergeQueueEvent = 'REMOVED_FROM_MERGE_QUEUE_EVENT',\n  /** Represents a 'removed_from_project' event on a given issue or pull request. */\n  RemovedFromProjectEvent = 'REMOVED_FROM_PROJECT_EVENT',\n  /** Represents a 'renamed' event on a given issue or pull request */\n  RenamedTitleEvent = 'RENAMED_TITLE_EVENT',\n  /** Represents a 'reopened' event on any `Closable`. */\n  ReopenedEvent = 'REOPENED_EVENT',\n  /** Represents a 'review_dismissed' event on a given issue or pull request. */\n  ReviewDismissedEvent = 'REVIEW_DISMISSED_EVENT',\n  /** Represents an 'review_requested' event on a given pull request. */\n  ReviewRequestedEvent = 'REVIEW_REQUESTED_EVENT',\n  /** Represents an 'review_request_removed' event on a given pull request. */\n  ReviewRequestRemovedEvent = 'REVIEW_REQUEST_REMOVED_EVENT',\n  /** Represents a 'subscribed' event on a given `Subscribable`. */\n  SubscribedEvent = 'SUBSCRIBED_EVENT',\n  /** Represents a 'transferred' event on a given issue or pull request. */\n  TransferredEvent = 'TRANSFERRED_EVENT',\n  /** Represents an 'unassigned' event on any assignable object. */\n  UnassignedEvent = 'UNASSIGNED_EVENT',\n  /** Represents an 'unlabeled' event on a given issue or pull request. */\n  UnlabeledEvent = 'UNLABELED_EVENT',\n  /** Represents an 'unlocked' event on a given issue or pull request. */\n  UnlockedEvent = 'UNLOCKED_EVENT',\n  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */\n  UnmarkedAsDuplicateEvent = 'UNMARKED_AS_DUPLICATE_EVENT',\n  /** Represents an 'unpinned' event on a given issue or pull request. */\n  UnpinnedEvent = 'UNPINNED_EVENT',\n  /** Represents an 'unsubscribed' event on a given `Subscribable`. */\n  UnsubscribedEvent = 'UNSUBSCRIBED_EVENT',\n  /** Represents a 'user_blocked' event on a given user. */\n  UserBlockedEvent = 'USER_BLOCKED_EVENT'\n}\n\n/** The possible target states when updating a pull request. */\nexport enum PullRequestUpdateState {\n  /** A pull request that has been closed without being merged. */\n  Closed = 'CLOSED',\n  /** A pull request that is still open. */\n  Open = 'OPEN'\n}\n\n/** A Git push. */\nexport type Push = Node & {\n  __typename?: 'Push';\n  id: Scalars['ID'];\n  /** The SHA after the push */\n  nextSha?: Maybe<Scalars['GitObjectID']>;\n  /** The permalink for this push. */\n  permalink: Scalars['URI'];\n  /** The SHA before the push */\n  previousSha?: Maybe<Scalars['GitObjectID']>;\n  /** The actor who pushed */\n  pusher: Actor;\n  /** The repository that was pushed to */\n  repository: Repository;\n};\n\n/** A team, user or app who has the ability to push to a protected branch. */\nexport type PushAllowance = Node & {\n  __typename?: 'PushAllowance';\n  /** The actor that can push. */\n  actor?: Maybe<PushAllowanceActor>;\n  /** Identifies the branch protection rule associated with the allowed user or team. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  id: Scalars['ID'];\n};\n\n/** Types that can be an actor. */\nexport type PushAllowanceActor = App | Team | User;\n\n/** The connection type for PushAllowance. */\nexport type PushAllowanceConnection = {\n  __typename?: 'PushAllowanceConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PushAllowanceEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PushAllowance>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PushAllowanceEdge = {\n  __typename?: 'PushAllowanceEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PushAllowance>;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type Query = {\n  __typename?: 'Query';\n  /** Look up a code of conduct by its key */\n  codeOfConduct?: Maybe<CodeOfConduct>;\n  /** Look up a code of conduct by its key */\n  codesOfConduct?: Maybe<Array<Maybe<CodeOfConduct>>>;\n  /** Look up an enterprise by URL slug. */\n  enterprise?: Maybe<Enterprise>;\n  /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */\n  enterpriseAdministratorInvitation?: Maybe<EnterpriseAdministratorInvitation>;\n  /** Look up a pending enterprise administrator invitation by invitation token. */\n  enterpriseAdministratorInvitationByToken?: Maybe<EnterpriseAdministratorInvitation>;\n  /** Look up an open source license by its key */\n  license?: Maybe<License>;\n  /** Return a list of known open source licenses */\n  licenses: Array<Maybe<License>>;\n  /** Get alphabetically sorted list of Marketplace categories */\n  marketplaceCategories: Array<MarketplaceCategory>;\n  /** Look up a Marketplace category by its slug. */\n  marketplaceCategory?: Maybe<MarketplaceCategory>;\n  /** Look up a single Marketplace listing */\n  marketplaceListing?: Maybe<MarketplaceListing>;\n  /** Look up Marketplace listings */\n  marketplaceListings: MarketplaceListingConnection;\n  /** Return information about the GitHub instance */\n  meta: GitHubMetadata;\n  /** Fetches an object given its ID. */\n  node?: Maybe<Node>;\n  /** Lookup nodes by a list of IDs. */\n  nodes: Array<Maybe<Node>>;\n  /** Lookup a organization by login. */\n  organization?: Maybe<Organization>;\n  /** The client's rate limit information. */\n  rateLimit?: Maybe<RateLimit>;\n  /** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */\n  relay: Query;\n  /** Lookup a given repository by the owner and repository name. */\n  repository?: Maybe<Repository>;\n  /** Lookup a repository owner (ie. either a User or an Organization) by login. */\n  repositoryOwner?: Maybe<RepositoryOwner>;\n  /** Lookup resource by a URL. */\n  resource?: Maybe<UniformResourceLocatable>;\n  /** Perform a search across resources. */\n  search: SearchResultItemConnection;\n  /** GitHub Security Advisories */\n  securityAdvisories: SecurityAdvisoryConnection;\n  /** Fetch a Security Advisory by its GHSA ID */\n  securityAdvisory?: Maybe<SecurityAdvisory>;\n  /** Software Vulnerabilities documented by GitHub Security Advisories */\n  securityVulnerabilities: SecurityVulnerabilityConnection;\n  /** Users and organizations who can be sponsored via GitHub Sponsors. */\n  sponsorables: SponsorableItemConnection;\n  /** Look up a topic by name. */\n  topic?: Maybe<Topic>;\n  /** Lookup a user by login. */\n  user?: Maybe<User>;\n  /** The currently authenticated user. */\n  viewer: User;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryCodeOfConductArgs = {\n  key: Scalars['String'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryEnterpriseArgs = {\n  invitationToken?: InputMaybe<Scalars['String']>;\n  slug: Scalars['String'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryEnterpriseAdministratorInvitationArgs = {\n  enterpriseSlug: Scalars['String'];\n  role: EnterpriseAdministratorRole;\n  userLogin: Scalars['String'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryEnterpriseAdministratorInvitationByTokenArgs = {\n  invitationToken: Scalars['String'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryLicenseArgs = {\n  key: Scalars['String'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryMarketplaceCategoriesArgs = {\n  excludeEmpty?: InputMaybe<Scalars['Boolean']>;\n  excludeSubcategories?: InputMaybe<Scalars['Boolean']>;\n  includeCategories?: InputMaybe<Array<Scalars['String']>>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryMarketplaceCategoryArgs = {\n  slug: Scalars['String'];\n  useTopicAliases?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryMarketplaceListingArgs = {\n  slug: Scalars['String'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryMarketplaceListingsArgs = {\n  adminId?: InputMaybe<Scalars['ID']>;\n  after?: InputMaybe<Scalars['String']>;\n  allStates?: InputMaybe<Scalars['Boolean']>;\n  before?: InputMaybe<Scalars['String']>;\n  categorySlug?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  organizationId?: InputMaybe<Scalars['ID']>;\n  primaryCategoryOnly?: InputMaybe<Scalars['Boolean']>;\n  slugs?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  useTopicAliases?: InputMaybe<Scalars['Boolean']>;\n  viewerCanAdmin?: InputMaybe<Scalars['Boolean']>;\n  withFreeTrialsOnly?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryNodeArgs = {\n  id: Scalars['ID'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryNodesArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryOrganizationArgs = {\n  login: Scalars['String'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryRateLimitArgs = {\n  dryRun?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryRepositoryArgs = {\n  followRenames?: InputMaybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n  owner: Scalars['String'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryRepositoryOwnerArgs = {\n  login: Scalars['String'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryResourceArgs = {\n  url: Scalars['URI'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySearchArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  query: Scalars['String'];\n  type: SearchType;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySecurityAdvisoriesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  identifier?: InputMaybe<SecurityAdvisoryIdentifierFilter>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SecurityAdvisoryOrder>;\n  publishedSince?: InputMaybe<Scalars['DateTime']>;\n  updatedSince?: InputMaybe<Scalars['DateTime']>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySecurityAdvisoryArgs = {\n  ghsaId: Scalars['String'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySecurityVulnerabilitiesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  ecosystem?: InputMaybe<SecurityAdvisoryEcosystem>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SecurityVulnerabilityOrder>;\n  package?: InputMaybe<Scalars['String']>;\n  severities?: InputMaybe<Array<SecurityAdvisorySeverity>>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySponsorablesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  dependencyEcosystem?: InputMaybe<SecurityAdvisoryEcosystem>;\n  ecosystem?: InputMaybe<DependencyGraphEcosystem>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  onlyDependencies?: InputMaybe<Scalars['Boolean']>;\n  orderBy?: InputMaybe<SponsorableOrder>;\n  orgLoginForDependencies?: InputMaybe<Scalars['String']>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryTopicArgs = {\n  name: Scalars['String'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryUserArgs = {\n  login: Scalars['String'];\n};\n\n/** Represents the client's rate limit. */\nexport type RateLimit = {\n  __typename?: 'RateLimit';\n  /** The point cost for the current query counting against the rate limit. */\n  cost: Scalars['Int'];\n  /** The maximum number of points the client is permitted to consume in a 60 minute window. */\n  limit: Scalars['Int'];\n  /** The maximum number of nodes this query may return */\n  nodeCount: Scalars['Int'];\n  /** The number of points remaining in the current rate limit window. */\n  remaining: Scalars['Int'];\n  /** The time at which the current rate limit window resets in UTC epoch seconds. */\n  resetAt: Scalars['DateTime'];\n  /** The number of points used in the current rate limit window. */\n  used: Scalars['Int'];\n};\n\n/** Represents a subject that can be reacted on. */\nexport type Reactable = {\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean'];\n};\n\n\n/** Represents a subject that can be reacted on. */\nexport type ReactableReactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** The connection type for User. */\nexport type ReactingUserConnection = {\n  __typename?: 'ReactingUserConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReactingUserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Represents a user that's made a reaction. */\nexport type ReactingUserEdge = {\n  __typename?: 'ReactingUserEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  node: User;\n  /** The moment when the user made the reaction. */\n  reactedAt: Scalars['DateTime'];\n};\n\n/** An emoji reaction to a particular piece of content. */\nexport type Reaction = Node & {\n  __typename?: 'Reaction';\n  /** Identifies the emoji reaction. */\n  content: ReactionContent;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** The reactable piece of content */\n  reactable: Reactable;\n  /** Identifies the user who created this reaction. */\n  user?: Maybe<User>;\n};\n\n/** A list of reactions that have been left on the subject. */\nexport type ReactionConnection = {\n  __typename?: 'ReactionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReactionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Reaction>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n  /** Whether or not the authenticated user has left a reaction on the subject. */\n  viewerHasReacted: Scalars['Boolean'];\n};\n\n/** Emojis that can be attached to Issues, Pull Requests and Comments. */\nexport enum ReactionContent {\n  /** Represents the `:confused:` emoji. */\n  Confused = 'CONFUSED',\n  /** Represents the `:eyes:` emoji. */\n  Eyes = 'EYES',\n  /** Represents the `:heart:` emoji. */\n  Heart = 'HEART',\n  /** Represents the `:hooray:` emoji. */\n  Hooray = 'HOORAY',\n  /** Represents the `:laugh:` emoji. */\n  Laugh = 'LAUGH',\n  /** Represents the `:rocket:` emoji. */\n  Rocket = 'ROCKET',\n  /** Represents the `:-1:` emoji. */\n  ThumbsDown = 'THUMBS_DOWN',\n  /** Represents the `:+1:` emoji. */\n  ThumbsUp = 'THUMBS_UP'\n}\n\n/** An edge in a connection. */\nexport type ReactionEdge = {\n  __typename?: 'ReactionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Reaction>;\n};\n\n/** A group of emoji reactions to a particular piece of content. */\nexport type ReactionGroup = {\n  __typename?: 'ReactionGroup';\n  /** Identifies the emoji reaction. */\n  content: ReactionContent;\n  /** Identifies when the reaction was created. */\n  createdAt?: Maybe<Scalars['DateTime']>;\n  /** Reactors to the reaction subject with the emotion represented by this reaction group. */\n  reactors: ReactorConnection;\n  /** The subject that was reacted to. */\n  subject: Reactable;\n  /**\n   * Users who have reacted to the reaction subject with the emotion represented by this reaction group\n   * @deprecated Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC.\n   */\n  users: ReactingUserConnection;\n  /** Whether or not the authenticated user has left a reaction on the subject. */\n  viewerHasReacted: Scalars['Boolean'];\n};\n\n\n/** A group of emoji reactions to a particular piece of content. */\nexport type ReactionGroupReactorsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A group of emoji reactions to a particular piece of content. */\nexport type ReactionGroupUsersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** Ways in which lists of reactions can be ordered upon return. */\nexport type ReactionOrder = {\n  /** The direction in which to order reactions by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order reactions by. */\n  field: ReactionOrderField;\n};\n\n/** A list of fields that reactions can be ordered by. */\nexport enum ReactionOrderField {\n  /** Allows ordering a list of reactions by when they were created. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Types that can be assigned to reactions. */\nexport type Reactor = Bot | Mannequin | Organization | User;\n\n/** The connection type for Reactor. */\nexport type ReactorConnection = {\n  __typename?: 'ReactorConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReactorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Reactor>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Represents an author of a reaction. */\nexport type ReactorEdge = {\n  __typename?: 'ReactorEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The author of the reaction. */\n  node: Reactor;\n  /** The moment when the user made the reaction. */\n  reactedAt: Scalars['DateTime'];\n};\n\n/** Represents a 'ready_for_review' event on a given pull request. */\nexport type ReadyForReviewEvent = Node & UniformResourceLocatable & {\n  __typename?: 'ReadyForReviewEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** The HTTP path for this ready for review event. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this ready for review event. */\n  url: Scalars['URI'];\n};\n\n/** Represents a Git reference. */\nexport type Ref = Node & {\n  __typename?: 'Ref';\n  /** A list of pull requests with this ref as the head ref. */\n  associatedPullRequests: PullRequestConnection;\n  /** Branch protection rules for this ref */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  id: Scalars['ID'];\n  /** The ref name. */\n  name: Scalars['String'];\n  /** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */\n  prefix: Scalars['String'];\n  /** Branch protection rules that are viewable by non-admins */\n  refUpdateRule?: Maybe<RefUpdateRule>;\n  /** The repository the ref belongs to. */\n  repository: Repository;\n  /** The object the ref points to. Returns null when object does not exist. */\n  target?: Maybe<GitObject>;\n};\n\n\n/** Represents a Git reference. */\nexport type RefAssociatedPullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  baseRefName?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  headRefName?: InputMaybe<Scalars['String']>;\n  labels?: InputMaybe<Array<Scalars['String']>>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** The connection type for Ref. */\nexport type RefConnection = {\n  __typename?: 'RefConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RefEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Ref>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type RefEdge = {\n  __typename?: 'RefEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Ref>;\n};\n\n/** Ways in which lists of git refs can be ordered upon return. */\nexport type RefOrder = {\n  /** The direction in which to order refs by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order refs by. */\n  field: RefOrderField;\n};\n\n/** Properties by which ref connections can be ordered. */\nexport enum RefOrderField {\n  /** Order refs by their alphanumeric name */\n  Alphabetical = 'ALPHABETICAL',\n  /** Order refs by underlying commit date if the ref prefix is refs/tags/ */\n  TagCommitDate = 'TAG_COMMIT_DATE'\n}\n\n/** A ref update rules for a viewer. */\nexport type RefUpdateRule = {\n  __typename?: 'RefUpdateRule';\n  /** Can this branch be deleted. */\n  allowsDeletions: Scalars['Boolean'];\n  /** Are force pushes allowed on this branch. */\n  allowsForcePushes: Scalars['Boolean'];\n  /** Identifies the protection rule pattern. */\n  pattern: Scalars['String'];\n  /** Number of approving reviews required to update matching branches. */\n  requiredApprovingReviewCount?: Maybe<Scalars['Int']>;\n  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */\n  requiredStatusCheckContexts?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** Are reviews from code owners required to update matching branches. */\n  requiresCodeOwnerReviews: Scalars['Boolean'];\n  /** Are conversations required to be resolved before merging. */\n  requiresConversationResolution: Scalars['Boolean'];\n  /** Are merge commits prohibited from being pushed to this branch. */\n  requiresLinearHistory: Scalars['Boolean'];\n  /** Are commits required to be signed. */\n  requiresSignatures: Scalars['Boolean'];\n  /** Is the viewer allowed to dismiss reviews. */\n  viewerAllowedToDismissReviews: Scalars['Boolean'];\n  /** Can the viewer push to the branch */\n  viewerCanPush: Scalars['Boolean'];\n};\n\n/** Represents a 'referenced' event on a given `ReferencedSubject`. */\nexport type ReferencedEvent = Node & {\n  __typename?: 'ReferencedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the commit associated with the 'referenced' event. */\n  commit?: Maybe<Commit>;\n  /** Identifies the repository associated with the 'referenced' event. */\n  commitRepository: Repository;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Reference originated in a different repository. */\n  isCrossRepository: Scalars['Boolean'];\n  /** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */\n  isDirectReference: Scalars['Boolean'];\n  /** Object referenced by event. */\n  subject: ReferencedSubject;\n};\n\n/** Any referencable object */\nexport type ReferencedSubject = Issue | PullRequest;\n\n/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */\nexport type RegenerateEnterpriseIdentityProviderRecoveryCodesInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set an identity provider. */\n  enterpriseId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */\nexport type RegenerateEnterpriseIdentityProviderRecoveryCodesPayload = {\n  __typename?: 'RegenerateEnterpriseIdentityProviderRecoveryCodesPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The identity provider for the enterprise. */\n  identityProvider?: Maybe<EnterpriseIdentityProvider>;\n};\n\n/** Autogenerated input type of RegenerateVerifiableDomainToken */\nexport type RegenerateVerifiableDomainTokenInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the verifiable domain to regenerate the verification token of. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of RegenerateVerifiableDomainToken */\nexport type RegenerateVerifiableDomainTokenPayload = {\n  __typename?: 'RegenerateVerifiableDomainTokenPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The verification token that was generated. */\n  verificationToken?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of RejectDeployments */\nexport type RejectDeploymentsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Optional comment for rejecting deployments */\n  comment?: InputMaybe<Scalars['String']>;\n  /** The ids of environments to reject deployments */\n  environmentIds: Array<Scalars['ID']>;\n  /** The node ID of the workflow run containing the pending deployments. */\n  workflowRunId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RejectDeployments */\nexport type RejectDeploymentsPayload = {\n  __typename?: 'RejectDeploymentsPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The affected deployments. */\n  deployments?: Maybe<Array<Deployment>>;\n};\n\n/** A release contains the content for a release. */\nexport type Release = Node & Reactable & UniformResourceLocatable & {\n  __typename?: 'Release';\n  /** The author of the release */\n  author?: Maybe<User>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The description of the release. */\n  description?: Maybe<Scalars['String']>;\n  /** The description of this release rendered to HTML. */\n  descriptionHTML?: Maybe<Scalars['HTML']>;\n  id: Scalars['ID'];\n  /** Whether or not the release is a draft */\n  isDraft: Scalars['Boolean'];\n  /** Whether or not the release is the latest releast */\n  isLatest: Scalars['Boolean'];\n  /** Whether or not the release is a prerelease */\n  isPrerelease: Scalars['Boolean'];\n  /** A list of users mentioned in the release description */\n  mentions?: Maybe<UserConnection>;\n  /** The title of the release. */\n  name?: Maybe<Scalars['String']>;\n  /** Identifies the date and time when the release was created. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** List of releases assets which are dependent on this release. */\n  releaseAssets: ReleaseAssetConnection;\n  /** The repository that the release belongs to. */\n  repository: Repository;\n  /** The HTTP path for this issue */\n  resourcePath: Scalars['URI'];\n  /** A description of the release, rendered to HTML without any links in it. */\n  shortDescriptionHTML?: Maybe<Scalars['HTML']>;\n  /** The Git tag the release points to */\n  tag?: Maybe<Ref>;\n  /** The tag commit for this release. */\n  tagCommit?: Maybe<Commit>;\n  /** The name of the release's Git tag */\n  tagName: Scalars['String'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this issue */\n  url: Scalars['URI'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean'];\n};\n\n\n/** A release contains the content for a release. */\nexport type ReleaseMentionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A release contains the content for a release. */\nexport type ReleaseReactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A release contains the content for a release. */\nexport type ReleaseReleaseAssetsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\n\n/** A release contains the content for a release. */\nexport type ReleaseShortDescriptionHtmlArgs = {\n  limit?: InputMaybe<Scalars['Int']>;\n};\n\n/** A release asset contains the content for a release asset. */\nexport type ReleaseAsset = Node & {\n  __typename?: 'ReleaseAsset';\n  /** The asset's content-type */\n  contentType: Scalars['String'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The number of times this asset was downloaded */\n  downloadCount: Scalars['Int'];\n  /** Identifies the URL where you can download the release asset via the browser. */\n  downloadUrl: Scalars['URI'];\n  id: Scalars['ID'];\n  /** Identifies the title of the release asset. */\n  name: Scalars['String'];\n  /** Release that the asset is associated with */\n  release?: Maybe<Release>;\n  /** The size (in bytes) of the asset */\n  size: Scalars['Int'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The user that performed the upload */\n  uploadedBy: User;\n  /** Identifies the URL of the release asset. */\n  url: Scalars['URI'];\n};\n\n/** The connection type for ReleaseAsset. */\nexport type ReleaseAssetConnection = {\n  __typename?: 'ReleaseAssetConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReleaseAssetEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReleaseAsset>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReleaseAssetEdge = {\n  __typename?: 'ReleaseAssetEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReleaseAsset>;\n};\n\n/** The connection type for Release. */\nexport type ReleaseConnection = {\n  __typename?: 'ReleaseConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReleaseEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Release>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReleaseEdge = {\n  __typename?: 'ReleaseEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Release>;\n};\n\n/** Ways in which lists of releases can be ordered upon return. */\nexport type ReleaseOrder = {\n  /** The direction in which to order releases by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order releases by. */\n  field: ReleaseOrderField;\n};\n\n/** Properties by which release connections can be ordered. */\nexport enum ReleaseOrderField {\n  /** Order releases by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order releases alphabetically by name */\n  Name = 'NAME'\n}\n\n/** Autogenerated input type of RemoveAssigneesFromAssignable */\nexport type RemoveAssigneesFromAssignableInput = {\n  /** The id of the assignable object to remove assignees from. */\n  assignableId: Scalars['ID'];\n  /** The id of users to remove as assignees. */\n  assigneeIds: Array<Scalars['ID']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of RemoveAssigneesFromAssignable */\nexport type RemoveAssigneesFromAssignablePayload = {\n  __typename?: 'RemoveAssigneesFromAssignablePayload';\n  /** The item that was unassigned. */\n  assignable?: Maybe<Assignable>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseAdmin */\nexport type RemoveEnterpriseAdminInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Enterprise ID from which to remove the administrator. */\n  enterpriseId: Scalars['ID'];\n  /** The login of the user to remove as an administrator. */\n  login: Scalars['String'];\n};\n\n/** Autogenerated return type of RemoveEnterpriseAdmin */\nexport type RemoveEnterpriseAdminPayload = {\n  __typename?: 'RemoveEnterpriseAdminPayload';\n  /** The user who was removed as an administrator. */\n  admin?: Maybe<User>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated enterprise. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of removing an administrator. */\n  message?: Maybe<Scalars['String']>;\n  /** The viewer performing the mutation. */\n  viewer?: Maybe<User>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseIdentityProvider */\nexport type RemoveEnterpriseIdentityProviderInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise from which to remove the identity provider. */\n  enterpriseId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveEnterpriseIdentityProvider */\nexport type RemoveEnterpriseIdentityProviderPayload = {\n  __typename?: 'RemoveEnterpriseIdentityProviderPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The identity provider that was removed from the enterprise. */\n  identityProvider?: Maybe<EnterpriseIdentityProvider>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseOrganization */\nexport type RemoveEnterpriseOrganizationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise from which the organization should be removed. */\n  enterpriseId: Scalars['ID'];\n  /** The ID of the organization to remove from the enterprise. */\n  organizationId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveEnterpriseOrganization */\nexport type RemoveEnterpriseOrganizationPayload = {\n  __typename?: 'RemoveEnterpriseOrganizationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated enterprise. */\n  enterprise?: Maybe<Enterprise>;\n  /** The organization that was removed from the enterprise. */\n  organization?: Maybe<Organization>;\n  /** The viewer performing the mutation. */\n  viewer?: Maybe<User>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */\nexport type RemoveEnterpriseSupportEntitlementInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the Enterprise which the admin belongs to. */\n  enterpriseId: Scalars['ID'];\n  /** The login of a member who will lose the support entitlement. */\n  login: Scalars['String'];\n};\n\n/** Autogenerated return type of RemoveEnterpriseSupportEntitlement */\nexport type RemoveEnterpriseSupportEntitlementPayload = {\n  __typename?: 'RemoveEnterpriseSupportEntitlementPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** A message confirming the result of removing the support entitlement. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of RemoveLabelsFromLabelable */\nexport type RemoveLabelsFromLabelableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ids of labels to remove. */\n  labelIds: Array<Scalars['ID']>;\n  /** The id of the Labelable to remove labels from. */\n  labelableId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveLabelsFromLabelable */\nexport type RemoveLabelsFromLabelablePayload = {\n  __typename?: 'RemoveLabelsFromLabelablePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The Labelable the labels were removed from. */\n  labelable?: Maybe<Labelable>;\n};\n\n/** Autogenerated input type of RemoveOutsideCollaborator */\nexport type RemoveOutsideCollaboratorInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the organization to remove the outside collaborator from. */\n  organizationId: Scalars['ID'];\n  /** The ID of the outside collaborator to remove. */\n  userId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveOutsideCollaborator */\nexport type RemoveOutsideCollaboratorPayload = {\n  __typename?: 'RemoveOutsideCollaboratorPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The user that was removed as an outside collaborator. */\n  removedUser?: Maybe<User>;\n};\n\n/** Autogenerated input type of RemoveReaction */\nexport type RemoveReactionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The name of the emoji reaction to remove. */\n  content: ReactionContent;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveReaction */\nexport type RemoveReactionPayload = {\n  __typename?: 'RemoveReactionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The reaction object. */\n  reaction?: Maybe<Reaction>;\n  /** The reactable subject. */\n  subject?: Maybe<Reactable>;\n};\n\n/** Autogenerated input type of RemoveStar */\nexport type RemoveStarInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Starrable ID to unstar. */\n  starrableId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveStar */\nexport type RemoveStarPayload = {\n  __typename?: 'RemoveStarPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The starrable. */\n  starrable?: Maybe<Starrable>;\n};\n\n/** Autogenerated input type of RemoveUpvote */\nexport type RemoveUpvoteInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the discussion or comment to remove upvote. */\n  subjectId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RemoveUpvote */\nexport type RemoveUpvotePayload = {\n  __typename?: 'RemoveUpvotePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The votable subject. */\n  subject?: Maybe<Votable>;\n};\n\n/** Represents a 'removed_from_project' event on a given issue or pull request. */\nexport type RemovedFromProjectEvent = Node & {\n  __typename?: 'RemovedFromProjectEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n};\n\n/** Represents a 'renamed' event on a given issue or pull request */\nexport type RenamedTitleEvent = Node & {\n  __typename?: 'RenamedTitleEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the current title of the issue or pull request. */\n  currentTitle: Scalars['String'];\n  id: Scalars['ID'];\n  /** Identifies the previous title of the issue or pull request. */\n  previousTitle: Scalars['String'];\n  /** Subject that was renamed. */\n  subject: RenamedTitleSubject;\n};\n\n/** An object which has a renamable title */\nexport type RenamedTitleSubject = Issue | PullRequest;\n\n/** Autogenerated input type of ReopenIssue */\nexport type ReopenIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** ID of the issue to be opened. */\n  issueId: Scalars['ID'];\n};\n\n/** Autogenerated return type of ReopenIssue */\nexport type ReopenIssuePayload = {\n  __typename?: 'ReopenIssuePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The issue that was opened. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of ReopenPullRequest */\nexport type ReopenPullRequestInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** ID of the pull request to be reopened. */\n  pullRequestId: Scalars['ID'];\n};\n\n/** Autogenerated return type of ReopenPullRequest */\nexport type ReopenPullRequestPayload = {\n  __typename?: 'ReopenPullRequestPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The pull request that was reopened. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'reopened' event on any `Closable`. */\nexport type ReopenedEvent = Node & {\n  __typename?: 'ReopenedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Object that was reopened. */\n  closable: Closable;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n};\n\n/** Audit log entry for a repo.access event. */\nexport type RepoAccessAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoAccessAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n  /** The visibility of the repository */\n  visibility?: Maybe<RepoAccessAuditEntryVisibility>;\n};\n\n/** The privacy of a repository */\nexport enum RepoAccessAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repo.add_member event. */\nexport type RepoAddMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoAddMemberAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n  /** The visibility of the repository */\n  visibility?: Maybe<RepoAddMemberAuditEntryVisibility>;\n};\n\n/** The privacy of a repository */\nexport enum RepoAddMemberAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repo.add_topic event. */\nexport type RepoAddTopicAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TopicAuditEntryData & {\n  __typename?: 'RepoAddTopicAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The name of the topic added to the repository */\n  topic?: Maybe<Topic>;\n  /** The name of the topic added to the repository */\n  topicName?: Maybe<Scalars['String']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a repo.archived event. */\nexport type RepoArchivedAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoArchivedAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n  /** The visibility of the repository */\n  visibility?: Maybe<RepoArchivedAuditEntryVisibility>;\n};\n\n/** The privacy of a repository */\nexport enum RepoArchivedAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repo.change_merge_setting event. */\nexport type RepoChangeMergeSettingAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoChangeMergeSettingAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** Whether the change was to enable (true) or disable (false) the merge type */\n  isEnabled?: Maybe<Scalars['Boolean']>;\n  /** The merge method affected by the change */\n  mergeType?: Maybe<RepoChangeMergeSettingAuditEntryMergeType>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** The merge options available for pull requests to this repository. */\nexport enum RepoChangeMergeSettingAuditEntryMergeType {\n  /** The pull request is added to the base branch in a merge commit. */\n  Merge = 'MERGE',\n  /** Commits from the pull request are added onto the base branch individually without a merge commit. */\n  Rebase = 'REBASE',\n  /** The pull request's commits are squashed into a single commit before they are merged to the base branch. */\n  Squash = 'SQUASH'\n}\n\n/** Audit log entry for a repo.config.disable_anonymous_git_access event. */\nexport type RepoConfigDisableAnonymousGitAccessAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoConfigDisableAnonymousGitAccessAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a repo.config.disable_collaborators_only event. */\nexport type RepoConfigDisableCollaboratorsOnlyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoConfigDisableCollaboratorsOnlyAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a repo.config.disable_contributors_only event. */\nexport type RepoConfigDisableContributorsOnlyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoConfigDisableContributorsOnlyAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */\nexport type RepoConfigDisableSockpuppetDisallowedAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoConfigDisableSockpuppetDisallowedAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a repo.config.enable_anonymous_git_access event. */\nexport type RepoConfigEnableAnonymousGitAccessAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoConfigEnableAnonymousGitAccessAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a repo.config.enable_collaborators_only event. */\nexport type RepoConfigEnableCollaboratorsOnlyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoConfigEnableCollaboratorsOnlyAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a repo.config.enable_contributors_only event. */\nexport type RepoConfigEnableContributorsOnlyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoConfigEnableContributorsOnlyAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */\nexport type RepoConfigEnableSockpuppetDisallowedAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoConfigEnableSockpuppetDisallowedAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a repo.config.lock_anonymous_git_access event. */\nexport type RepoConfigLockAnonymousGitAccessAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoConfigLockAnonymousGitAccessAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */\nexport type RepoConfigUnlockAnonymousGitAccessAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoConfigUnlockAnonymousGitAccessAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a repo.create event. */\nexport type RepoCreateAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoCreateAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The name of the parent repository for this forked repository. */\n  forkParentName?: Maybe<Scalars['String']>;\n  /** The name of the root repository for this network. */\n  forkSourceName?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n  /** The visibility of the repository */\n  visibility?: Maybe<RepoCreateAuditEntryVisibility>;\n};\n\n/** The privacy of a repository */\nexport enum RepoCreateAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repo.destroy event. */\nexport type RepoDestroyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoDestroyAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n  /** The visibility of the repository */\n  visibility?: Maybe<RepoDestroyAuditEntryVisibility>;\n};\n\n/** The privacy of a repository */\nexport enum RepoDestroyAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repo.remove_member event. */\nexport type RepoRemoveMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  __typename?: 'RepoRemoveMemberAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n  /** The visibility of the repository */\n  visibility?: Maybe<RepoRemoveMemberAuditEntryVisibility>;\n};\n\n/** The privacy of a repository */\nexport enum RepoRemoveMemberAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repo.remove_topic event. */\nexport type RepoRemoveTopicAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TopicAuditEntryData & {\n  __typename?: 'RepoRemoveTopicAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The name of the topic added to the repository */\n  topic?: Maybe<Topic>;\n  /** The name of the topic added to the repository */\n  topicName?: Maybe<Scalars['String']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** The reasons a piece of content can be reported or minimized. */\nexport enum ReportedContentClassifiers {\n  /** An abusive or harassing piece of content */\n  Abuse = 'ABUSE',\n  /** A duplicated piece of content */\n  Duplicate = 'DUPLICATE',\n  /** An irrelevant piece of content */\n  OffTopic = 'OFF_TOPIC',\n  /** An outdated piece of content */\n  Outdated = 'OUTDATED',\n  /** The content has been resolved */\n  Resolved = 'RESOLVED',\n  /** A spammy piece of content */\n  Spam = 'SPAM'\n}\n\n/** A repository contains the content for a project. */\nexport type Repository = Node & PackageOwner & ProjectOwner & RepositoryInfo & Starrable & Subscribable & UniformResourceLocatable & {\n  __typename?: 'Repository';\n  /** A list of users that can be assigned to issues in this repository. */\n  assignableUsers: UserConnection;\n  /** Whether or not Auto-merge can be enabled on pull requests in this repository. */\n  autoMergeAllowed: Scalars['Boolean'];\n  /** A list of branch protection rules for this repository. */\n  branchProtectionRules: BranchProtectionRuleConnection;\n  /** Returns the code of conduct for this repository */\n  codeOfConduct?: Maybe<CodeOfConduct>;\n  /** Information extracted from the repository's `CODEOWNERS` file. */\n  codeowners?: Maybe<RepositoryCodeowners>;\n  /** A list of collaborators associated with the repository. */\n  collaborators?: Maybe<RepositoryCollaboratorConnection>;\n  /** A list of commit comments associated with the repository. */\n  commitComments: CommitCommentConnection;\n  /** Returns a list of contact links associated to the repository */\n  contactLinks?: Maybe<Array<RepositoryContactLink>>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The Ref associated with the repository's default branch. */\n  defaultBranchRef?: Maybe<Ref>;\n  /** Whether or not branches are automatically deleted when merged in this repository. */\n  deleteBranchOnMerge: Scalars['Boolean'];\n  /** A list of deploy keys that are on this repository. */\n  deployKeys: DeployKeyConnection;\n  /** Deployments associated with the repository */\n  deployments: DeploymentConnection;\n  /** The description of the repository. */\n  description?: Maybe<Scalars['String']>;\n  /** The description of the repository rendered to HTML. */\n  descriptionHTML: Scalars['HTML'];\n  /** Returns a single discussion from the current repository by number. */\n  discussion?: Maybe<Discussion>;\n  /** A list of discussion categories that are available in the repository. */\n  discussionCategories: DiscussionCategoryConnection;\n  /** A list of discussions that have been opened in the repository. */\n  discussions: DiscussionConnection;\n  /** The number of kilobytes this repository occupies on disk. */\n  diskUsage?: Maybe<Scalars['Int']>;\n  /** Returns a single active environment from the current repository by name. */\n  environment?: Maybe<Environment>;\n  /** A list of environments that are in this repository. */\n  environments: EnvironmentConnection;\n  /** Returns how many forks there are of this repository in the whole network. */\n  forkCount: Scalars['Int'];\n  /** Whether this repository allows forks. */\n  forkingAllowed: Scalars['Boolean'];\n  /** A list of direct forked repositories. */\n  forks: RepositoryConnection;\n  /** The funding links for this repository */\n  fundingLinks: Array<FundingLink>;\n  /** Indicates if the repository has issues feature enabled. */\n  hasIssuesEnabled: Scalars['Boolean'];\n  /** Indicates if the repository has the Projects feature enabled. */\n  hasProjectsEnabled: Scalars['Boolean'];\n  /** Indicates if the repository has wiki feature enabled. */\n  hasWikiEnabled: Scalars['Boolean'];\n  /** The repository's URL. */\n  homepageUrl?: Maybe<Scalars['URI']>;\n  id: Scalars['ID'];\n  /** The interaction ability settings for this repository. */\n  interactionAbility?: Maybe<RepositoryInteractionAbility>;\n  /** Indicates if the repository is unmaintained. */\n  isArchived: Scalars['Boolean'];\n  /** Returns true if blank issue creation is allowed */\n  isBlankIssuesEnabled: Scalars['Boolean'];\n  /** Returns whether or not this repository disabled. */\n  isDisabled: Scalars['Boolean'];\n  /** Returns whether or not this repository is empty. */\n  isEmpty: Scalars['Boolean'];\n  /** Identifies if the repository is a fork. */\n  isFork: Scalars['Boolean'];\n  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */\n  isInOrganization: Scalars['Boolean'];\n  /** Indicates if the repository has been locked or not. */\n  isLocked: Scalars['Boolean'];\n  /** Identifies if the repository is a mirror. */\n  isMirror: Scalars['Boolean'];\n  /** Identifies if the repository is private or internal. */\n  isPrivate: Scalars['Boolean'];\n  /** Returns true if this repository has a security policy */\n  isSecurityPolicyEnabled?: Maybe<Scalars['Boolean']>;\n  /** Identifies if the repository is a template that can be used to generate new repositories. */\n  isTemplate: Scalars['Boolean'];\n  /** Is this repository a user configuration repository? */\n  isUserConfigurationRepository: Scalars['Boolean'];\n  /** Returns a single issue from the current repository by number. */\n  issue?: Maybe<Issue>;\n  /** Returns a single issue-like object from the current repository by number. */\n  issueOrPullRequest?: Maybe<IssueOrPullRequest>;\n  /** Returns a list of issue templates associated to the repository */\n  issueTemplates?: Maybe<Array<IssueTemplate>>;\n  /** A list of issues that have been opened in the repository. */\n  issues: IssueConnection;\n  /** Returns a single label by name */\n  label?: Maybe<Label>;\n  /** A list of labels associated with the repository. */\n  labels?: Maybe<LabelConnection>;\n  /** A list containing a breakdown of the language composition of the repository. */\n  languages?: Maybe<LanguageConnection>;\n  /** Get the latest release for the repository if one exists. */\n  latestRelease?: Maybe<Release>;\n  /** The license associated with the repository */\n  licenseInfo?: Maybe<License>;\n  /** The reason the repository has been locked. */\n  lockReason?: Maybe<RepositoryLockReason>;\n  /** A list of Users that can be mentioned in the context of the repository. */\n  mentionableUsers: UserConnection;\n  /** Whether or not PRs are merged with a merge commit on this repository. */\n  mergeCommitAllowed: Scalars['Boolean'];\n  /** Returns a single milestone from the current repository by number. */\n  milestone?: Maybe<Milestone>;\n  /** A list of milestones associated with the repository. */\n  milestones?: Maybe<MilestoneConnection>;\n  /** The repository's original mirror URL. */\n  mirrorUrl?: Maybe<Scalars['URI']>;\n  /** The name of the repository. */\n  name: Scalars['String'];\n  /** The repository's name with owner. */\n  nameWithOwner: Scalars['String'];\n  /** A Git object in the repository */\n  object?: Maybe<GitObject>;\n  /** The image used to represent this repository in Open Graph data. */\n  openGraphImageUrl: Scalars['URI'];\n  /** The User owner of the repository. */\n  owner: RepositoryOwner;\n  /** A list of packages under the owner. */\n  packages: PackageConnection;\n  /** The repository parent, if this is a fork. */\n  parent?: Maybe<Repository>;\n  /** A list of discussions that have been pinned in this repository. */\n  pinnedDiscussions: PinnedDiscussionConnection;\n  /** A list of pinned issues for this repository. */\n  pinnedIssues?: Maybe<PinnedIssueConnection>;\n  /** The primary language of the repository's code. */\n  primaryLanguage?: Maybe<Language>;\n  /** Find project by number. */\n  project?: Maybe<Project>;\n  /** Finds and returns the Project (beta) according to the provided Project (beta) number. */\n  projectNext?: Maybe<ProjectNext>;\n  /** A list of projects under the owner. */\n  projects: ProjectConnection;\n  /** List of projects (beta) linked to this repository. */\n  projectsNext: ProjectNextConnection;\n  /** The HTTP path listing the repository's projects */\n  projectsResourcePath: Scalars['URI'];\n  /** The HTTP URL listing the repository's projects */\n  projectsUrl: Scalars['URI'];\n  /** Returns a single pull request from the current repository by number. */\n  pullRequest?: Maybe<PullRequest>;\n  /** Returns a list of pull request templates associated to the repository */\n  pullRequestTemplates?: Maybe<Array<PullRequestTemplate>>;\n  /** A list of pull requests that have been opened in the repository. */\n  pullRequests: PullRequestConnection;\n  /** Identifies when the repository was last pushed to. */\n  pushedAt?: Maybe<Scalars['DateTime']>;\n  /** Whether or not rebase-merging is enabled on this repository. */\n  rebaseMergeAllowed: Scalars['Boolean'];\n  /** Fetch a given ref from the repository */\n  ref?: Maybe<Ref>;\n  /** Fetch a list of refs from the repository */\n  refs?: Maybe<RefConnection>;\n  /** Lookup a single release given various criteria. */\n  release?: Maybe<Release>;\n  /** List of releases which are dependent on this repository. */\n  releases: ReleaseConnection;\n  /** A list of applied repository-topic associations for this repository. */\n  repositoryTopics: RepositoryTopicConnection;\n  /** The HTTP path for this repository */\n  resourcePath: Scalars['URI'];\n  /** The security policy URL. */\n  securityPolicyUrl?: Maybe<Scalars['URI']>;\n  /** A description of the repository, rendered to HTML without any links in it. */\n  shortDescriptionHTML: Scalars['HTML'];\n  /** Whether or not squash-merging is enabled on this repository. */\n  squashMergeAllowed: Scalars['Boolean'];\n  /** The SSH URL to clone this repository */\n  sshUrl: Scalars['GitSSHRemote'];\n  /**\n   * Returns a count of how many stargazers there are on this object\n   *\n   */\n  stargazerCount: Scalars['Int'];\n  /** A list of users who have starred this starrable. */\n  stargazers: StargazerConnection;\n  /** Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. */\n  submodules: SubmoduleConnection;\n  /** Temporary authentication token for cloning this repository. */\n  tempCloneToken?: Maybe<Scalars['String']>;\n  /** The repository from which this repository was generated, if any. */\n  templateRepository?: Maybe<Repository>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this repository */\n  url: Scalars['URI'];\n  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */\n  usesCustomOpenGraphImage: Scalars['Boolean'];\n  /** Indicates whether the viewer has admin permissions on this repository. */\n  viewerCanAdminister: Scalars['Boolean'];\n  /** Can the current viewer create new projects on this owner. */\n  viewerCanCreateProjects: Scalars['Boolean'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean'];\n  /** Indicates whether the viewer can update the topics of this repository. */\n  viewerCanUpdateTopics: Scalars['Boolean'];\n  /** The last commit email for the viewer. */\n  viewerDefaultCommitEmail?: Maybe<Scalars['String']>;\n  /** The last used merge method by the viewer or the default for the repository. */\n  viewerDefaultMergeMethod: PullRequestMergeMethod;\n  /** Returns a boolean indicating whether the viewing user has starred this starrable. */\n  viewerHasStarred: Scalars['Boolean'];\n  /** The users permission level on the repository. Will return null if authenticated as an GitHub App. */\n  viewerPermission?: Maybe<RepositoryPermission>;\n  /** A list of emails this viewer can commit with. */\n  viewerPossibleCommitEmails?: Maybe<Array<Scalars['String']>>;\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n  /** Indicates the repository's visibility level. */\n  visibility: RepositoryVisibility;\n  /** A list of vulnerability alerts that are on this repository. */\n  vulnerabilityAlerts?: Maybe<RepositoryVulnerabilityAlertConnection>;\n  /** A list of users watching the repository. */\n  watchers: UserConnection;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryAssignableUsersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  query?: InputMaybe<Scalars['String']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryBranchProtectionRulesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryCodeownersArgs = {\n  refName?: InputMaybe<Scalars['String']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryCollaboratorsArgs = {\n  affiliation?: InputMaybe<CollaboratorAffiliation>;\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  query?: InputMaybe<Scalars['String']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryCommitCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryDeployKeysArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryDeploymentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  environments?: InputMaybe<Array<Scalars['String']>>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<DeploymentOrder>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryDiscussionArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryDiscussionCategoriesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  filterByAssignable?: InputMaybe<Scalars['Boolean']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryDiscussionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  categoryId?: InputMaybe<Scalars['ID']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<DiscussionOrder>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryEnvironmentArgs = {\n  name: Scalars['String'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryEnvironmentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryForksArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  isLocked?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryIssueArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryIssueOrPullRequestArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryIssuesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  filterBy?: InputMaybe<IssueFilters>;\n  first?: InputMaybe<Scalars['Int']>;\n  labels?: InputMaybe<Array<Scalars['String']>>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<IssueState>>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryLabelArgs = {\n  name: Scalars['String'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryLabelsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LabelOrder>;\n  query?: InputMaybe<Scalars['String']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryLanguagesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LanguageOrder>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryMentionableUsersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  query?: InputMaybe<Scalars['String']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryMilestoneArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryMilestonesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<MilestoneOrder>;\n  query?: InputMaybe<Scalars['String']>;\n  states?: InputMaybe<Array<MilestoneState>>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryObjectArgs = {\n  expression?: InputMaybe<Scalars['String']>;\n  oid?: InputMaybe<Scalars['GitObjectID']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryPackagesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  names?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  orderBy?: InputMaybe<PackageOrder>;\n  packageType?: InputMaybe<PackageType>;\n  repositoryId?: InputMaybe<Scalars['ID']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryPinnedDiscussionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryPinnedIssuesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryProjectArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryProjectNextArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryProjectsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ProjectOrder>;\n  search?: InputMaybe<Scalars['String']>;\n  states?: InputMaybe<Array<ProjectState>>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryProjectsNextArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  query?: InputMaybe<Scalars['String']>;\n  sortBy?: InputMaybe<ProjectNextOrderField>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryPullRequestArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryPullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  baseRefName?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  headRefName?: InputMaybe<Scalars['String']>;\n  labels?: InputMaybe<Array<Scalars['String']>>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryRefArgs = {\n  qualifiedName: Scalars['String'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryRefsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  direction?: InputMaybe<OrderDirection>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RefOrder>;\n  query?: InputMaybe<Scalars['String']>;\n  refPrefix: Scalars['String'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryReleaseArgs = {\n  tagName: Scalars['String'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryReleasesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReleaseOrder>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryRepositoryTopicsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryShortDescriptionHtmlArgs = {\n  limit?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryStargazersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<StarOrder>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositorySubmodulesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryVulnerabilityAlertsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  states?: InputMaybe<Array<RepositoryVulnerabilityAlertState>>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryWatchersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The affiliation of a user to a repository */\nexport enum RepositoryAffiliation {\n  /** Repositories that the user has been added to as a collaborator. */\n  Collaborator = 'COLLABORATOR',\n  /** Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */\n  OrganizationMember = 'ORGANIZATION_MEMBER',\n  /** Repositories that are owned by the authenticated user. */\n  Owner = 'OWNER'\n}\n\n/** Metadata for an audit entry with action repo.* */\nexport type RepositoryAuditEntryData = {\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Information extracted from a repository's `CODEOWNERS` file. */\nexport type RepositoryCodeowners = {\n  __typename?: 'RepositoryCodeowners';\n  /** Any problems that were encountered while parsing the `CODEOWNERS` file. */\n  errors: Array<RepositoryCodeownersError>;\n};\n\n/** An error in a `CODEOWNERS` file. */\nexport type RepositoryCodeownersError = {\n  __typename?: 'RepositoryCodeownersError';\n  /** The column number where the error occurs. */\n  column: Scalars['Int'];\n  /** A short string describing the type of error. */\n  kind: Scalars['String'];\n  /** The line number where the error occurs. */\n  line: Scalars['Int'];\n  /** A complete description of the error, combining information from other fields. */\n  message: Scalars['String'];\n  /** The path to the file when the error occurs. */\n  path: Scalars['String'];\n  /** The content of the line where the error occurs. */\n  source: Scalars['String'];\n  /** A suggestion of how to fix the error. */\n  suggestion?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for User. */\nexport type RepositoryCollaboratorConnection = {\n  __typename?: 'RepositoryCollaboratorConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryCollaboratorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Represents a user who is a collaborator of a repository. */\nexport type RepositoryCollaboratorEdge = {\n  __typename?: 'RepositoryCollaboratorEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  node: User;\n  /** The permission the user has on the repository. */\n  permission: RepositoryPermission;\n  /** A list of sources for the user's access to the repository. */\n  permissionSources?: Maybe<Array<PermissionSource>>;\n};\n\n/** A list of repositories owned by the subject. */\nexport type RepositoryConnection = {\n  __typename?: 'RepositoryConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Repository>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n  /** The total size in kilobytes of all repositories in the connection. */\n  totalDiskUsage: Scalars['Int'];\n};\n\n/** A repository contact link. */\nexport type RepositoryContactLink = {\n  __typename?: 'RepositoryContactLink';\n  /** The contact link purpose. */\n  about: Scalars['String'];\n  /** The contact link name. */\n  name: Scalars['String'];\n  /** The contact link URL. */\n  url: Scalars['URI'];\n};\n\n/** The reason a repository is listed as 'contributed'. */\nexport enum RepositoryContributionType {\n  /** Created a commit */\n  Commit = 'COMMIT',\n  /** Created an issue */\n  Issue = 'ISSUE',\n  /** Created a pull request */\n  PullRequest = 'PULL_REQUEST',\n  /** Reviewed a pull request */\n  PullRequestReview = 'PULL_REQUEST_REVIEW',\n  /** Created the repository */\n  Repository = 'REPOSITORY'\n}\n\n/** Represents an author of discussions in repositories. */\nexport type RepositoryDiscussionAuthor = {\n  /** Discussions this user has started. */\n  repositoryDiscussions: DiscussionConnection;\n};\n\n\n/** Represents an author of discussions in repositories. */\nexport type RepositoryDiscussionAuthorRepositoryDiscussionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  answered?: InputMaybe<Scalars['Boolean']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<DiscussionOrder>;\n  repositoryId?: InputMaybe<Scalars['ID']>;\n};\n\n/** Represents an author of discussion comments in repositories. */\nexport type RepositoryDiscussionCommentAuthor = {\n  /** Discussion comments this user has authored. */\n  repositoryDiscussionComments: DiscussionCommentConnection;\n};\n\n\n/** Represents an author of discussion comments in repositories. */\nexport type RepositoryDiscussionCommentAuthorRepositoryDiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  onlyAnswers?: InputMaybe<Scalars['Boolean']>;\n  repositoryId?: InputMaybe<Scalars['ID']>;\n};\n\n/** An edge in a connection. */\nexport type RepositoryEdge = {\n  __typename?: 'RepositoryEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Repository>;\n};\n\n/** A subset of repository info. */\nexport type RepositoryInfo = {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The description of the repository. */\n  description?: Maybe<Scalars['String']>;\n  /** The description of the repository rendered to HTML. */\n  descriptionHTML: Scalars['HTML'];\n  /** Returns how many forks there are of this repository in the whole network. */\n  forkCount: Scalars['Int'];\n  /** Indicates if the repository has issues feature enabled. */\n  hasIssuesEnabled: Scalars['Boolean'];\n  /** Indicates if the repository has the Projects feature enabled. */\n  hasProjectsEnabled: Scalars['Boolean'];\n  /** Indicates if the repository has wiki feature enabled. */\n  hasWikiEnabled: Scalars['Boolean'];\n  /** The repository's URL. */\n  homepageUrl?: Maybe<Scalars['URI']>;\n  /** Indicates if the repository is unmaintained. */\n  isArchived: Scalars['Boolean'];\n  /** Identifies if the repository is a fork. */\n  isFork: Scalars['Boolean'];\n  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */\n  isInOrganization: Scalars['Boolean'];\n  /** Indicates if the repository has been locked or not. */\n  isLocked: Scalars['Boolean'];\n  /** Identifies if the repository is a mirror. */\n  isMirror: Scalars['Boolean'];\n  /** Identifies if the repository is private or internal. */\n  isPrivate: Scalars['Boolean'];\n  /** Identifies if the repository is a template that can be used to generate new repositories. */\n  isTemplate: Scalars['Boolean'];\n  /** The license associated with the repository */\n  licenseInfo?: Maybe<License>;\n  /** The reason the repository has been locked. */\n  lockReason?: Maybe<RepositoryLockReason>;\n  /** The repository's original mirror URL. */\n  mirrorUrl?: Maybe<Scalars['URI']>;\n  /** The name of the repository. */\n  name: Scalars['String'];\n  /** The repository's name with owner. */\n  nameWithOwner: Scalars['String'];\n  /** The image used to represent this repository in Open Graph data. */\n  openGraphImageUrl: Scalars['URI'];\n  /** The User owner of the repository. */\n  owner: RepositoryOwner;\n  /** Identifies when the repository was last pushed to. */\n  pushedAt?: Maybe<Scalars['DateTime']>;\n  /** The HTTP path for this repository */\n  resourcePath: Scalars['URI'];\n  /** A description of the repository, rendered to HTML without any links in it. */\n  shortDescriptionHTML: Scalars['HTML'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this repository */\n  url: Scalars['URI'];\n  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */\n  usesCustomOpenGraphImage: Scalars['Boolean'];\n  /** Indicates the repository's visibility level. */\n  visibility: RepositoryVisibility;\n};\n\n\n/** A subset of repository info. */\nexport type RepositoryInfoShortDescriptionHtmlArgs = {\n  limit?: InputMaybe<Scalars['Int']>;\n};\n\n/** Repository interaction limit that applies to this object. */\nexport type RepositoryInteractionAbility = {\n  __typename?: 'RepositoryInteractionAbility';\n  /** The time the currently active limit expires. */\n  expiresAt?: Maybe<Scalars['DateTime']>;\n  /** The current limit that is enabled on this object. */\n  limit: RepositoryInteractionLimit;\n  /** The origin of the currently active interaction limit. */\n  origin: RepositoryInteractionLimitOrigin;\n};\n\n/** A repository interaction limit. */\nexport enum RepositoryInteractionLimit {\n  /** Users that are not collaborators will not be able to interact with the repository. */\n  CollaboratorsOnly = 'COLLABORATORS_ONLY',\n  /** Users that have not previously committed to a repository’s default branch will be unable to interact with the repository. */\n  ContributorsOnly = 'CONTRIBUTORS_ONLY',\n  /** Users that have recently created their account will be unable to interact with the repository. */\n  ExistingUsers = 'EXISTING_USERS',\n  /** No interaction limits are enabled. */\n  NoLimit = 'NO_LIMIT'\n}\n\n/** The length for a repository interaction limit to be enabled for. */\nexport enum RepositoryInteractionLimitExpiry {\n  /** The interaction limit will expire after 1 day. */\n  OneDay = 'ONE_DAY',\n  /** The interaction limit will expire after 1 month. */\n  OneMonth = 'ONE_MONTH',\n  /** The interaction limit will expire after 1 week. */\n  OneWeek = 'ONE_WEEK',\n  /** The interaction limit will expire after 6 months. */\n  SixMonths = 'SIX_MONTHS',\n  /** The interaction limit will expire after 3 days. */\n  ThreeDays = 'THREE_DAYS'\n}\n\n/** Indicates where an interaction limit is configured. */\nexport enum RepositoryInteractionLimitOrigin {\n  /** A limit that is configured at the organization level. */\n  Organization = 'ORGANIZATION',\n  /** A limit that is configured at the repository level. */\n  Repository = 'REPOSITORY',\n  /** A limit that is configured at the user-wide level. */\n  User = 'USER'\n}\n\n/** An invitation for a user to be added to a repository. */\nexport type RepositoryInvitation = Node & {\n  __typename?: 'RepositoryInvitation';\n  /** The email address that received the invitation. */\n  email?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** The user who received the invitation. */\n  invitee?: Maybe<User>;\n  /** The user who created the invitation. */\n  inviter: User;\n  /** The permalink for this repository invitation. */\n  permalink: Scalars['URI'];\n  /** The permission granted on this repository by this invitation. */\n  permission: RepositoryPermission;\n  /** The Repository the user is invited to. */\n  repository?: Maybe<RepositoryInfo>;\n};\n\n/** A list of repository invitations. */\nexport type RepositoryInvitationConnection = {\n  __typename?: 'RepositoryInvitationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type RepositoryInvitationEdge = {\n  __typename?: 'RepositoryInvitationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryInvitation>;\n};\n\n/** Ordering options for repository invitation connections. */\nexport type RepositoryInvitationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repository invitations by. */\n  field: RepositoryInvitationOrderField;\n};\n\n/** Properties by which repository invitation connections can be ordered. */\nexport enum RepositoryInvitationOrderField {\n  /** Order repository invitations by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** The possible reasons a given repository could be in a locked state. */\nexport enum RepositoryLockReason {\n  /** The repository is locked due to a billing related reason. */\n  Billing = 'BILLING',\n  /** The repository is locked due to a migration. */\n  Migrating = 'MIGRATING',\n  /** The repository is locked due to a move. */\n  Moving = 'MOVING',\n  /** The repository is locked due to a rename. */\n  Rename = 'RENAME'\n}\n\n/** An Octoshift repository migration. */\nexport type RepositoryMigration = Migration & Node & {\n  __typename?: 'RepositoryMigration';\n  /** The Octoshift migration flag to continue on error. */\n  continueOnError: Scalars['Boolean'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The reason the migration failed. */\n  failureReason?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** The Octoshift migration source. */\n  migrationSource: MigrationSource;\n  /** The Octoshift migration source URL. */\n  sourceUrl: Scalars['URI'];\n  /** The Octoshift migration state. */\n  state: MigrationState;\n};\n\n/** The connection type for RepositoryMigration. */\nexport type RepositoryMigrationConnection = {\n  __typename?: 'RepositoryMigrationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryMigrationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryMigration>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Represents a repository migration. */\nexport type RepositoryMigrationEdge = {\n  __typename?: 'RepositoryMigrationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryMigration>;\n};\n\n/** Ordering options for repository migrations. */\nexport type RepositoryMigrationOrder = {\n  /** The ordering direction. */\n  direction: RepositoryMigrationOrderDirection;\n  /** The field to order repository migrations by. */\n  field: RepositoryMigrationOrderField;\n};\n\n/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */\nexport enum RepositoryMigrationOrderDirection {\n  /** Specifies an ascending order for a given `orderBy` argument. */\n  Asc = 'ASC',\n  /** Specifies a descending order for a given `orderBy` argument. */\n  Desc = 'DESC'\n}\n\n/** Properties by which repository migrations can be ordered. */\nexport enum RepositoryMigrationOrderField {\n  /** Order mannequins why when they were created. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Represents a object that belongs to a repository. */\nexport type RepositoryNode = {\n  /** The repository associated with this node. */\n  repository: Repository;\n};\n\n/** Ordering options for repository connections */\nexport type RepositoryOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repositories by. */\n  field: RepositoryOrderField;\n};\n\n/** Properties by which repository connections can be ordered. */\nexport enum RepositoryOrderField {\n  /** Order repositories by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order repositories by name */\n  Name = 'NAME',\n  /** Order repositories by push time */\n  PushedAt = 'PUSHED_AT',\n  /** Order repositories by number of stargazers */\n  Stargazers = 'STARGAZERS',\n  /** Order repositories by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** Represents an owner of a Repository. */\nexport type RepositoryOwner = {\n  /** A URL pointing to the owner's public avatar. */\n  avatarUrl: Scalars['URI'];\n  id: Scalars['ID'];\n  /** The username used to login. */\n  login: Scalars['String'];\n  /** A list of repositories that the user owns. */\n  repositories: RepositoryConnection;\n  /** Find Repository. */\n  repository?: Maybe<Repository>;\n  /** The HTTP URL for the owner. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for the owner. */\n  url: Scalars['URI'];\n};\n\n\n/** Represents an owner of a Repository. */\nexport type RepositoryOwnerAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** Represents an owner of a Repository. */\nexport type RepositoryOwnerRepositoriesArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  isFork?: InputMaybe<Scalars['Boolean']>;\n  isLocked?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n\n/** Represents an owner of a Repository. */\nexport type RepositoryOwnerRepositoryArgs = {\n  followRenames?: InputMaybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n};\n\n/** The access level to a repository */\nexport enum RepositoryPermission {\n  /** Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators */\n  Admin = 'ADMIN',\n  /** Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings */\n  Maintain = 'MAINTAIN',\n  /** Can read and clone this repository. Can also open and comment on issues and pull requests */\n  Read = 'READ',\n  /** Can read and clone this repository. Can also manage issues and pull requests */\n  Triage = 'TRIAGE',\n  /** Can read, clone, and push to this repository. Can also manage issues and pull requests */\n  Write = 'WRITE'\n}\n\n/** The privacy of a repository */\nexport enum RepositoryPrivacy {\n  /** Private */\n  Private = 'PRIVATE',\n  /** Public */\n  Public = 'PUBLIC'\n}\n\n/** A repository-topic connects a repository to a topic. */\nexport type RepositoryTopic = Node & UniformResourceLocatable & {\n  __typename?: 'RepositoryTopic';\n  id: Scalars['ID'];\n  /** The HTTP path for this repository-topic. */\n  resourcePath: Scalars['URI'];\n  /** The topic. */\n  topic: Topic;\n  /** The HTTP URL for this repository-topic. */\n  url: Scalars['URI'];\n};\n\n/** The connection type for RepositoryTopic. */\nexport type RepositoryTopicConnection = {\n  __typename?: 'RepositoryTopicConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryTopicEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryTopic>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type RepositoryTopicEdge = {\n  __typename?: 'RepositoryTopicEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryTopic>;\n};\n\n/** The repository's visibility level. */\nexport enum RepositoryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repository_visibility_change.disable event. */\nexport type RepositoryVisibilityChangeDisableAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & {\n  __typename?: 'RepositoryVisibilityChangeDisableAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']>;\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a repository_visibility_change.enable event. */\nexport type RepositoryVisibilityChangeEnableAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & {\n  __typename?: 'RepositoryVisibilityChangeEnableAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']>;\n  id: Scalars['ID'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */\nexport type RepositoryVulnerabilityAlert = Node & RepositoryNode & {\n  __typename?: 'RepositoryVulnerabilityAlert';\n  /** When was the alert created? */\n  createdAt: Scalars['DateTime'];\n  /** The reason the alert was dismissed */\n  dismissReason?: Maybe<Scalars['String']>;\n  /** When was the alert dismissed? */\n  dismissedAt?: Maybe<Scalars['DateTime']>;\n  /** The user who dismissed the alert */\n  dismisser?: Maybe<User>;\n  /** The reason the alert was marked as fixed. */\n  fixReason?: Maybe<Scalars['String']>;\n  /** When was the alert fixed? */\n  fixedAt?: Maybe<Scalars['DateTime']>;\n  id: Scalars['ID'];\n  /** Identifies the alert number. */\n  number: Scalars['Int'];\n  /** The associated repository */\n  repository: Repository;\n  /** The associated security advisory */\n  securityAdvisory?: Maybe<SecurityAdvisory>;\n  /** The associated security vulnerability */\n  securityVulnerability?: Maybe<SecurityVulnerability>;\n  /** Identifies the state of the alert. */\n  state: RepositoryVulnerabilityAlertState;\n  /** The vulnerable manifest filename */\n  vulnerableManifestFilename: Scalars['String'];\n  /** The vulnerable manifest path */\n  vulnerableManifestPath: Scalars['String'];\n  /** The vulnerable requirements */\n  vulnerableRequirements?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for RepositoryVulnerabilityAlert. */\nexport type RepositoryVulnerabilityAlertConnection = {\n  __typename?: 'RepositoryVulnerabilityAlertConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryVulnerabilityAlertEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryVulnerabilityAlert>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type RepositoryVulnerabilityAlertEdge = {\n  __typename?: 'RepositoryVulnerabilityAlertEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryVulnerabilityAlert>;\n};\n\n/** The possible states of an alert */\nexport enum RepositoryVulnerabilityAlertState {\n  /** An alert that has been manually closed by a user. */\n  Dismissed = 'DISMISSED',\n  /** An alert that has been resolved by a code change. */\n  Fixed = 'FIXED',\n  /** An alert that is still open. */\n  Open = 'OPEN'\n}\n\n/** Autogenerated input type of RequestReviews */\nexport type RequestReviewsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the pull request to modify. */\n  pullRequestId: Scalars['ID'];\n  /** The Node IDs of the team to request. */\n  teamIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** Add users to the set rather than replace. */\n  union?: InputMaybe<Scalars['Boolean']>;\n  /** The Node IDs of the user to request. */\n  userIds?: InputMaybe<Array<Scalars['ID']>>;\n};\n\n/** Autogenerated return type of RequestReviews */\nexport type RequestReviewsPayload = {\n  __typename?: 'RequestReviewsPayload';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The pull request that is getting requests. */\n  pullRequest?: Maybe<PullRequest>;\n  /** The edge from the pull request to the requested reviewers. */\n  requestedReviewersEdge?: Maybe<UserEdge>;\n};\n\n/** The possible states that can be requested when creating a check run. */\nexport enum RequestableCheckStatusState {\n  /** The check suite or run has been completed. */\n  Completed = 'COMPLETED',\n  /** The check suite or run is in progress. */\n  InProgress = 'IN_PROGRESS',\n  /** The check suite or run is in pending state. */\n  Pending = 'PENDING',\n  /** The check suite or run has been queued. */\n  Queued = 'QUEUED',\n  /** The check suite or run is in waiting state. */\n  Waiting = 'WAITING'\n}\n\n/** Types that can be requested reviewers. */\nexport type RequestedReviewer = Mannequin | Team | User;\n\n/** Represents a type that can be required by a pull request for merging. */\nexport type RequirableByPullRequest = {\n  /** Whether this is required to pass before merging for a specific pull request. */\n  isRequired: Scalars['Boolean'];\n};\n\n\n/** Represents a type that can be required by a pull request for merging. */\nexport type RequirableByPullRequestIsRequiredArgs = {\n  pullRequestId?: InputMaybe<Scalars['ID']>;\n  pullRequestNumber?: InputMaybe<Scalars['Int']>;\n};\n\n/** Represents a required status check for a protected branch, but not any specific run of that check. */\nexport type RequiredStatusCheckDescription = {\n  __typename?: 'RequiredStatusCheckDescription';\n  /** The App that must provide this status in order for it to be accepted. */\n  app?: Maybe<App>;\n  /** The name of this status. */\n  context: Scalars['String'];\n};\n\n/** Specifies the attributes for a new or updated required status check. */\nexport type RequiredStatusCheckInput = {\n  /** The ID of the App that must set the status in order for it to be accepted. Omit this value to use whichever app has recently been setting this status, or use \"any\" to allow any app to set the status. */\n  appId?: InputMaybe<Scalars['ID']>;\n  /** Status check context that must pass for commits to be accepted to the matching branch. */\n  context: Scalars['String'];\n};\n\n/** Autogenerated input type of RerequestCheckSuite */\nexport type RerequestCheckSuiteInput = {\n  /** The Node ID of the check suite. */\n  checkSuiteId: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RerequestCheckSuite */\nexport type RerequestCheckSuitePayload = {\n  __typename?: 'RerequestCheckSuitePayload';\n  /** The requested check suite. */\n  checkSuite?: Maybe<CheckSuite>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of ResolveReviewThread */\nexport type ResolveReviewThreadInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the thread to resolve */\n  threadId: Scalars['ID'];\n};\n\n/** Autogenerated return type of ResolveReviewThread */\nexport type ResolveReviewThreadPayload = {\n  __typename?: 'ResolveReviewThreadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The thread to resolve. */\n  thread?: Maybe<PullRequestReviewThread>;\n};\n\n/** Represents a private contribution a user made on GitHub. */\nexport type RestrictedContribution = Contribution & {\n  __typename?: 'RestrictedContribution';\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   *\n   */\n  isRestricted: Scalars['Boolean'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime'];\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI'];\n  /**\n   * The user who made this contribution.\n   *\n   */\n  user: User;\n};\n\n/** A team or user who has the ability to dismiss a review on a protected branch. */\nexport type ReviewDismissalAllowance = Node & {\n  __typename?: 'ReviewDismissalAllowance';\n  /** The actor that can dismiss. */\n  actor?: Maybe<ReviewDismissalAllowanceActor>;\n  /** Identifies the branch protection rule associated with the allowed user or team. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  id: Scalars['ID'];\n};\n\n/** Types that can be an actor. */\nexport type ReviewDismissalAllowanceActor = Team | User;\n\n/** The connection type for ReviewDismissalAllowance. */\nexport type ReviewDismissalAllowanceConnection = {\n  __typename?: 'ReviewDismissalAllowanceConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReviewDismissalAllowanceEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReviewDismissalAllowance>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReviewDismissalAllowanceEdge = {\n  __typename?: 'ReviewDismissalAllowanceEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReviewDismissalAllowance>;\n};\n\n/** Represents a 'review_dismissed' event on a given issue or pull request. */\nexport type ReviewDismissedEvent = Node & UniformResourceLocatable & {\n  __typename?: 'ReviewDismissedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** Identifies the optional message associated with the 'review_dismissed' event. */\n  dismissalMessage?: Maybe<Scalars['String']>;\n  /** Identifies the optional message associated with the event, rendered to HTML. */\n  dismissalMessageHTML?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** Identifies the previous state of the review with the 'review_dismissed' event. */\n  previousReviewState: PullRequestReviewState;\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the commit which caused the review to become stale. */\n  pullRequestCommit?: Maybe<PullRequestCommit>;\n  /** The HTTP path for this review dismissed event. */\n  resourcePath: Scalars['URI'];\n  /** Identifies the review associated with the 'review_dismissed' event. */\n  review?: Maybe<PullRequestReview>;\n  /** The HTTP URL for this review dismissed event. */\n  url: Scalars['URI'];\n};\n\n/** A request for a user to review a pull request. */\nexport type ReviewRequest = Node & {\n  __typename?: 'ReviewRequest';\n  /** Whether this request was created for a code owner */\n  asCodeOwner: Scalars['Boolean'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** Identifies the pull request associated with this review request. */\n  pullRequest: PullRequest;\n  /** The reviewer that is requested. */\n  requestedReviewer?: Maybe<RequestedReviewer>;\n};\n\n/** The connection type for ReviewRequest. */\nexport type ReviewRequestConnection = {\n  __typename?: 'ReviewRequestConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReviewRequestEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReviewRequest>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ReviewRequestEdge = {\n  __typename?: 'ReviewRequestEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReviewRequest>;\n};\n\n/** Represents an 'review_request_removed' event on a given pull request. */\nexport type ReviewRequestRemovedEvent = Node & {\n  __typename?: 'ReviewRequestRemovedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the reviewer whose review request was removed. */\n  requestedReviewer?: Maybe<RequestedReviewer>;\n};\n\n/** Represents an 'review_requested' event on a given pull request. */\nexport type ReviewRequestedEvent = Node & {\n  __typename?: 'ReviewRequestedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the reviewer whose review was requested. */\n  requestedReviewer?: Maybe<RequestedReviewer>;\n};\n\n/**\n * A hovercard context with a message describing the current code review state of the pull\n * request.\n *\n */\nexport type ReviewStatusHovercardContext = HovercardContext & {\n  __typename?: 'ReviewStatusHovercardContext';\n  /** A string describing this context */\n  message: Scalars['String'];\n  /** An octicon to accompany this context */\n  octicon: Scalars['String'];\n  /** The current status of the pull request with respect to code review. */\n  reviewDecision?: Maybe<PullRequestReviewDecision>;\n};\n\n/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */\nexport type RevokeEnterpriseOrganizationsMigratorRoleInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */\n  enterpriseId: Scalars['ID'];\n  /** The login of the user to revoke the migrator role */\n  login: Scalars['String'];\n};\n\n/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */\nexport type RevokeEnterpriseOrganizationsMigratorRolePayload = {\n  __typename?: 'RevokeEnterpriseOrganizationsMigratorRolePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The organizations that had the migrator role revoked for the given user. */\n  organizations?: Maybe<OrganizationConnection>;\n};\n\n\n/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */\nexport type RevokeEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** Autogenerated input type of RevokeMigratorRole */\nexport type RevokeMigratorRoleInput = {\n  /** The user login or Team slug to revoke the migrator role from. */\n  actor: Scalars['String'];\n  /** Specifies the type of the actor, can be either USER or TEAM. */\n  actorType: ActorType;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the organization that the user/team belongs to. */\n  organizationId: Scalars['ID'];\n};\n\n/** Autogenerated return type of RevokeMigratorRole */\nexport type RevokeMigratorRolePayload = {\n  __typename?: 'RevokeMigratorRolePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** Did the operation succeed? */\n  success?: Maybe<Scalars['Boolean']>;\n};\n\n/** Possible roles a user may have in relation to an organization. */\nexport enum RoleInOrganization {\n  /** A user who is a direct member of the organization. */\n  DirectMember = 'DIRECT_MEMBER',\n  /** A user with full administrative access to the organization. */\n  Owner = 'OWNER',\n  /** A user who is unaffiliated with the organization. */\n  Unaffiliated = 'UNAFFILIATED'\n}\n\n/** The possible digest algorithms used to sign SAML requests for an identity provider. */\nexport enum SamlDigestAlgorithm {\n  /** SHA1 */\n  Sha1 = 'SHA1',\n  /** SHA256 */\n  Sha256 = 'SHA256',\n  /** SHA384 */\n  Sha384 = 'SHA384',\n  /** SHA512 */\n  Sha512 = 'SHA512'\n}\n\n/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */\nexport enum SamlSignatureAlgorithm {\n  /** RSA-SHA1 */\n  RsaSha1 = 'RSA_SHA1',\n  /** RSA-SHA256 */\n  RsaSha256 = 'RSA_SHA256',\n  /** RSA-SHA384 */\n  RsaSha384 = 'RSA_SHA384',\n  /** RSA-SHA512 */\n  RsaSha512 = 'RSA_SHA512'\n}\n\n/** A Saved Reply is text a user can use to reply quickly. */\nexport type SavedReply = Node & {\n  __typename?: 'SavedReply';\n  /** The body of the saved reply. */\n  body: Scalars['String'];\n  /** The saved reply body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** The title of the saved reply. */\n  title: Scalars['String'];\n  /** The user that saved this reply. */\n  user?: Maybe<Actor>;\n};\n\n/** The connection type for SavedReply. */\nexport type SavedReplyConnection = {\n  __typename?: 'SavedReplyConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SavedReplyEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SavedReply>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type SavedReplyEdge = {\n  __typename?: 'SavedReplyEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SavedReply>;\n};\n\n/** Ordering options for saved reply connections. */\nexport type SavedReplyOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order saved replies by. */\n  field: SavedReplyOrderField;\n};\n\n/** Properties by which saved reply connections can be ordered. */\nexport enum SavedReplyOrderField {\n  /** Order saved reply by when they were updated. */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The results of a search. */\nexport type SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User;\n\n/** A list of results that matched against a search query. */\nexport type SearchResultItemConnection = {\n  __typename?: 'SearchResultItemConnection';\n  /** The number of pieces of code that matched the search query. */\n  codeCount: Scalars['Int'];\n  /** The number of discussions that matched the search query. */\n  discussionCount: Scalars['Int'];\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SearchResultItemEdge>>>;\n  /** The number of issues that matched the search query. */\n  issueCount: Scalars['Int'];\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SearchResultItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The number of repositories that matched the search query. */\n  repositoryCount: Scalars['Int'];\n  /** The number of users that matched the search query. */\n  userCount: Scalars['Int'];\n  /** The number of wiki pages that matched the search query. */\n  wikiCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type SearchResultItemEdge = {\n  __typename?: 'SearchResultItemEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SearchResultItem>;\n  /** Text matches on the result found. */\n  textMatches?: Maybe<Array<Maybe<TextMatch>>>;\n};\n\n/** Represents the individual results of a search. */\nexport enum SearchType {\n  /** Returns matching discussions in repositories. */\n  Discussion = 'DISCUSSION',\n  /** Returns results matching issues in repositories. */\n  Issue = 'ISSUE',\n  /** Returns results matching repositories. */\n  Repository = 'REPOSITORY',\n  /** Returns results matching users and organizations on GitHub. */\n  User = 'USER'\n}\n\n/** A GitHub Security Advisory */\nexport type SecurityAdvisory = Node & {\n  __typename?: 'SecurityAdvisory';\n  /** The CVSS associated with this advisory */\n  cvss: Cvss;\n  /** CWEs associated with this Advisory */\n  cwes: CweConnection;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** This is a long plaintext description of the advisory */\n  description: Scalars['String'];\n  /** The GitHub Security Advisory ID */\n  ghsaId: Scalars['String'];\n  id: Scalars['ID'];\n  /** A list of identifiers for this advisory */\n  identifiers: Array<SecurityAdvisoryIdentifier>;\n  /** The permalink for the advisory's dependabot alerts page */\n  notificationsPermalink?: Maybe<Scalars['URI']>;\n  /** The organization that originated the advisory */\n  origin: Scalars['String'];\n  /** The permalink for the advisory */\n  permalink?: Maybe<Scalars['URI']>;\n  /** When the advisory was published */\n  publishedAt: Scalars['DateTime'];\n  /** A list of references for this advisory */\n  references: Array<SecurityAdvisoryReference>;\n  /** The severity of the advisory */\n  severity: SecurityAdvisorySeverity;\n  /** A short plaintext summary of the advisory */\n  summary: Scalars['String'];\n  /** When the advisory was last updated */\n  updatedAt: Scalars['DateTime'];\n  /** Vulnerabilities associated with this Advisory */\n  vulnerabilities: SecurityVulnerabilityConnection;\n  /** When the advisory was withdrawn, if it has been withdrawn */\n  withdrawnAt?: Maybe<Scalars['DateTime']>;\n};\n\n\n/** A GitHub Security Advisory */\nexport type SecurityAdvisoryCwesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A GitHub Security Advisory */\nexport type SecurityAdvisoryVulnerabilitiesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  ecosystem?: InputMaybe<SecurityAdvisoryEcosystem>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SecurityVulnerabilityOrder>;\n  package?: InputMaybe<Scalars['String']>;\n  severities?: InputMaybe<Array<SecurityAdvisorySeverity>>;\n};\n\n/** The connection type for SecurityAdvisory. */\nexport type SecurityAdvisoryConnection = {\n  __typename?: 'SecurityAdvisoryConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SecurityAdvisoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SecurityAdvisory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** The possible ecosystems of a security vulnerability's package. */\nexport enum SecurityAdvisoryEcosystem {\n  /** PHP packages hosted at packagist.org */\n  Composer = 'COMPOSER',\n  /** Go modules */\n  Go = 'GO',\n  /** Java artifacts hosted at the Maven central repository */\n  Maven = 'MAVEN',\n  /** JavaScript packages hosted at npmjs.com */\n  Npm = 'NPM',\n  /** .NET packages hosted at the NuGet Gallery */\n  Nuget = 'NUGET',\n  /** Python packages hosted at PyPI.org */\n  Pip = 'PIP',\n  /** Ruby gems hosted at RubyGems.org */\n  Rubygems = 'RUBYGEMS',\n  /** Rust crates */\n  Rust = 'RUST'\n}\n\n/** An edge in a connection. */\nexport type SecurityAdvisoryEdge = {\n  __typename?: 'SecurityAdvisoryEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SecurityAdvisory>;\n};\n\n/** A GitHub Security Advisory Identifier */\nexport type SecurityAdvisoryIdentifier = {\n  __typename?: 'SecurityAdvisoryIdentifier';\n  /** The identifier type, e.g. GHSA, CVE */\n  type: Scalars['String'];\n  /** The identifier */\n  value: Scalars['String'];\n};\n\n/** An advisory identifier to filter results on. */\nexport type SecurityAdvisoryIdentifierFilter = {\n  /** The identifier type. */\n  type: SecurityAdvisoryIdentifierType;\n  /** The identifier string. Supports exact or partial matching. */\n  value: Scalars['String'];\n};\n\n/** Identifier formats available for advisories. */\nexport enum SecurityAdvisoryIdentifierType {\n  /** Common Vulnerabilities and Exposures Identifier. */\n  Cve = 'CVE',\n  /** GitHub Security Advisory ID. */\n  Ghsa = 'GHSA'\n}\n\n/** Ordering options for security advisory connections */\nexport type SecurityAdvisoryOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order security advisories by. */\n  field: SecurityAdvisoryOrderField;\n};\n\n/** Properties by which security advisory connections can be ordered. */\nexport enum SecurityAdvisoryOrderField {\n  /** Order advisories by publication time */\n  PublishedAt = 'PUBLISHED_AT',\n  /** Order advisories by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** An individual package */\nexport type SecurityAdvisoryPackage = {\n  __typename?: 'SecurityAdvisoryPackage';\n  /** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */\n  ecosystem: SecurityAdvisoryEcosystem;\n  /** The package name */\n  name: Scalars['String'];\n};\n\n/** An individual package version */\nexport type SecurityAdvisoryPackageVersion = {\n  __typename?: 'SecurityAdvisoryPackageVersion';\n  /** The package name or version */\n  identifier: Scalars['String'];\n};\n\n/** A GitHub Security Advisory Reference */\nexport type SecurityAdvisoryReference = {\n  __typename?: 'SecurityAdvisoryReference';\n  /** A publicly accessible reference */\n  url: Scalars['URI'];\n};\n\n/** Severity of the vulnerability. */\nexport enum SecurityAdvisorySeverity {\n  /** Critical. */\n  Critical = 'CRITICAL',\n  /** High. */\n  High = 'HIGH',\n  /** Low. */\n  Low = 'LOW',\n  /** Moderate. */\n  Moderate = 'MODERATE'\n}\n\n/** An individual vulnerability within an Advisory */\nexport type SecurityVulnerability = {\n  __typename?: 'SecurityVulnerability';\n  /** The Advisory associated with this Vulnerability */\n  advisory: SecurityAdvisory;\n  /** The first version containing a fix for the vulnerability */\n  firstPatchedVersion?: Maybe<SecurityAdvisoryPackageVersion>;\n  /** A description of the vulnerable package */\n  package: SecurityAdvisoryPackage;\n  /** The severity of the vulnerability within this package */\n  severity: SecurityAdvisorySeverity;\n  /** When the vulnerability was last updated */\n  updatedAt: Scalars['DateTime'];\n  /**\n   * A string that describes the vulnerable package versions.\n   * This string follows a basic syntax with a few forms.\n   * + `= 0.2.0` denotes a single vulnerable version.\n   * + `<= 1.0.8` denotes a version range up to and including the specified version\n   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version\n   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.\n   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum\n   *\n   */\n  vulnerableVersionRange: Scalars['String'];\n};\n\n/** The connection type for SecurityVulnerability. */\nexport type SecurityVulnerabilityConnection = {\n  __typename?: 'SecurityVulnerabilityConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SecurityVulnerabilityEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SecurityVulnerability>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type SecurityVulnerabilityEdge = {\n  __typename?: 'SecurityVulnerabilityEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SecurityVulnerability>;\n};\n\n/** Ordering options for security vulnerability connections */\nexport type SecurityVulnerabilityOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order security vulnerabilities by. */\n  field: SecurityVulnerabilityOrderField;\n};\n\n/** Properties by which security vulnerability connections can be ordered. */\nexport enum SecurityVulnerabilityOrderField {\n  /** Order vulnerability by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** Autogenerated input type of SetEnterpriseIdentityProvider */\nexport type SetEnterpriseIdentityProviderInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The digest algorithm used to sign SAML requests for the identity provider. */\n  digestMethod: SamlDigestAlgorithm;\n  /** The ID of the enterprise on which to set an identity provider. */\n  enterpriseId: Scalars['ID'];\n  /** The x509 certificate used by the identity provider to sign assertions and responses. */\n  idpCertificate: Scalars['String'];\n  /** The Issuer Entity ID for the SAML identity provider */\n  issuer?: InputMaybe<Scalars['String']>;\n  /** The signature algorithm used to sign SAML requests for the identity provider. */\n  signatureMethod: SamlSignatureAlgorithm;\n  /** The URL endpoint for the identity provider's SAML SSO. */\n  ssoUrl: Scalars['URI'];\n};\n\n/** Autogenerated return type of SetEnterpriseIdentityProvider */\nexport type SetEnterpriseIdentityProviderPayload = {\n  __typename?: 'SetEnterpriseIdentityProviderPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The identity provider for the enterprise. */\n  identityProvider?: Maybe<EnterpriseIdentityProvider>;\n};\n\n/** Autogenerated input type of SetOrganizationInteractionLimit */\nexport type SetOrganizationInteractionLimitInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** When this limit should expire. */\n  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;\n  /** The limit to set. */\n  limit: RepositoryInteractionLimit;\n  /** The ID of the organization to set a limit for. */\n  organizationId: Scalars['ID'];\n};\n\n/** Autogenerated return type of SetOrganizationInteractionLimit */\nexport type SetOrganizationInteractionLimitPayload = {\n  __typename?: 'SetOrganizationInteractionLimitPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The organization that the interaction limit was set for. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of SetRepositoryInteractionLimit */\nexport type SetRepositoryInteractionLimitInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** When this limit should expire. */\n  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;\n  /** The limit to set. */\n  limit: RepositoryInteractionLimit;\n  /** The ID of the repository to set a limit for. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of SetRepositoryInteractionLimit */\nexport type SetRepositoryInteractionLimitPayload = {\n  __typename?: 'SetRepositoryInteractionLimitPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The repository that the interaction limit was set for. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of SetUserInteractionLimit */\nexport type SetUserInteractionLimitInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** When this limit should expire. */\n  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;\n  /** The limit to set. */\n  limit: RepositoryInteractionLimit;\n  /** The ID of the user to set a limit for. */\n  userId: Scalars['ID'];\n};\n\n/** Autogenerated return type of SetUserInteractionLimit */\nexport type SetUserInteractionLimitPayload = {\n  __typename?: 'SetUserInteractionLimitPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The user that the interaction limit was set for. */\n  user?: Maybe<User>;\n};\n\n/** Represents an S/MIME signature on a Commit or Tag. */\nexport type SmimeSignature = GitSignature & {\n  __typename?: 'SmimeSignature';\n  /** Email used to sign this object. */\n  email: Scalars['String'];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars['Boolean'];\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars['String'];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars['String'];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars['Boolean'];\n};\n\n/** Entities that can sponsor others via GitHub Sponsors */\nexport type Sponsor = Organization | User;\n\n/** The connection type for Sponsor. */\nexport type SponsorConnection = {\n  __typename?: 'SponsorConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Sponsor>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */\nexport type SponsorEdge = {\n  __typename?: 'SponsorEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Sponsor>;\n};\n\n/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */\nexport type SponsorOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order sponsor entities by. */\n  field: SponsorOrderField;\n};\n\n/** Properties by which sponsor connections can be ordered. */\nexport enum SponsorOrderField {\n  /** Order sponsorable entities by login (username). */\n  Login = 'LOGIN',\n  /** Order sponsors by their relevance to the viewer. */\n  Relevance = 'RELEVANCE'\n}\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type Sponsorable = {\n  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */\n  estimatedNextSponsorsPayoutInCents: Scalars['Int'];\n  /** True if this user/organization has a GitHub Sponsors listing. */\n  hasSponsorsListing: Scalars['Boolean'];\n  /** Check if the given account is sponsoring this user/organization. */\n  isSponsoredBy: Scalars['Boolean'];\n  /** True if the viewer is sponsored by this user/organization. */\n  isSponsoringViewer: Scalars['Boolean'];\n  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */\n  monthlyEstimatedSponsorsIncomeInCents: Scalars['Int'];\n  /** List of users and organizations this entity is sponsoring. */\n  sponsoring: SponsorConnection;\n  /** List of sponsors for this user or organization. */\n  sponsors: SponsorConnection;\n  /** Events involving this sponsorable, such as new sponsorships. */\n  sponsorsActivities: SponsorsActivityConnection;\n  /** The GitHub Sponsors listing for this user or organization. */\n  sponsorsListing?: Maybe<SponsorsListing>;\n  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */\n  sponsorshipForViewerAsSponsor?: Maybe<Sponsorship>;\n  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. */\n  sponsorshipForViewerAsSponsorable?: Maybe<Sponsorship>;\n  /** List of sponsorship updates sent from this sponsorable to sponsors. */\n  sponsorshipNewsletters: SponsorshipNewsletterConnection;\n  /** This object's sponsorships as the maintainer. */\n  sponsorshipsAsMaintainer: SponsorshipConnection;\n  /** This object's sponsorships as the sponsor. */\n  sponsorshipsAsSponsor: SponsorshipConnection;\n  /** Whether or not the viewer is able to sponsor this user/organization. */\n  viewerCanSponsor: Scalars['Boolean'];\n  /** True if the viewer is sponsoring this user/organization. */\n  viewerIsSponsoring: Scalars['Boolean'];\n};\n\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableIsSponsoredByArgs = {\n  accountLogin: Scalars['String'];\n};\n\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableSponsoringArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorOrder>;\n};\n\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableSponsorsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorOrder>;\n  tierId?: InputMaybe<Scalars['ID']>;\n};\n\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableSponsorsActivitiesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorsActivityOrder>;\n  period?: InputMaybe<SponsorsActivityPeriod>;\n};\n\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableSponsorshipNewslettersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorshipNewsletterOrder>;\n};\n\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableSponsorshipsAsMaintainerArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  includePrivate?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableSponsorshipsAsSponsorArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n/** Entities that can be sponsored via GitHub Sponsors */\nexport type SponsorableItem = Organization | User;\n\n/** The connection type for SponsorableItem. */\nexport type SponsorableItemConnection = {\n  __typename?: 'SponsorableItemConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorableItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorableItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type SponsorableItemEdge = {\n  __typename?: 'SponsorableItemEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorableItem>;\n};\n\n/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */\nexport type SponsorableOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order sponsorable entities by. */\n  field: SponsorableOrderField;\n};\n\n/** Properties by which sponsorable connections can be ordered. */\nexport enum SponsorableOrderField {\n  /** Order sponsorable entities by login (username). */\n  Login = 'LOGIN'\n}\n\n/** An event related to sponsorship activity. */\nexport type SponsorsActivity = Node & {\n  __typename?: 'SponsorsActivity';\n  /** What action this activity indicates took place. */\n  action: SponsorsActivityAction;\n  id: Scalars['ID'];\n  /** The tier that the sponsorship used to use, for tier change events. */\n  previousSponsorsTier?: Maybe<SponsorsTier>;\n  /** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */\n  sponsor?: Maybe<Sponsor>;\n  /** The user or organization that is being sponsored, the maintainer. */\n  sponsorable: Sponsorable;\n  /** The associated sponsorship tier. */\n  sponsorsTier?: Maybe<SponsorsTier>;\n  /** The timestamp of this event. */\n  timestamp?: Maybe<Scalars['DateTime']>;\n};\n\n/** The possible actions that GitHub Sponsors activities can represent. */\nexport enum SponsorsActivityAction {\n  /** The activity was cancelling a sponsorship. */\n  CancelledSponsorship = 'CANCELLED_SPONSORSHIP',\n  /** The activity was starting a sponsorship. */\n  NewSponsorship = 'NEW_SPONSORSHIP',\n  /** The activity was scheduling a downgrade or cancellation. */\n  PendingChange = 'PENDING_CHANGE',\n  /** The activity was funds being refunded to the sponsor or GitHub. */\n  Refund = 'REFUND',\n  /** The activity was disabling matching for a previously matched sponsorship. */\n  SponsorMatchDisabled = 'SPONSOR_MATCH_DISABLED',\n  /** The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change. */\n  TierChange = 'TIER_CHANGE'\n}\n\n/** The connection type for SponsorsActivity. */\nexport type SponsorsActivityConnection = {\n  __typename?: 'SponsorsActivityConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorsActivityEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorsActivity>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type SponsorsActivityEdge = {\n  __typename?: 'SponsorsActivityEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorsActivity>;\n};\n\n/** Ordering options for GitHub Sponsors activity connections. */\nexport type SponsorsActivityOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order activity by. */\n  field: SponsorsActivityOrderField;\n};\n\n/** Properties by which GitHub Sponsors activity connections can be ordered. */\nexport enum SponsorsActivityOrderField {\n  /** Order activities by when they happened. */\n  Timestamp = 'TIMESTAMP'\n}\n\n/** The possible time periods for which Sponsors activities can be requested. */\nexport enum SponsorsActivityPeriod {\n  /** Don't restrict the activity to any date range, include all activity. */\n  All = 'ALL',\n  /** The previous calendar day. */\n  Day = 'DAY',\n  /** The previous thirty days. */\n  Month = 'MONTH',\n  /** The previous seven days. */\n  Week = 'WEEK'\n}\n\n/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */\nexport type SponsorsGoal = {\n  __typename?: 'SponsorsGoal';\n  /** A description of the goal from the maintainer. */\n  description?: Maybe<Scalars['String']>;\n  /** What the objective of this goal is. */\n  kind: SponsorsGoalKind;\n  /** The percentage representing how complete this goal is, between 0-100. */\n  percentComplete: Scalars['Int'];\n  /** What the goal amount is. Represents an amount in USD for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals. */\n  targetValue: Scalars['Int'];\n  /** A brief summary of the kind and target value of this goal. */\n  title: Scalars['String'];\n};\n\n/** The different kinds of goals a GitHub Sponsors member can have. */\nexport enum SponsorsGoalKind {\n  /** The goal is about getting a certain amount in USD from sponsorships each month. */\n  MonthlySponsorshipAmount = 'MONTHLY_SPONSORSHIP_AMOUNT',\n  /** The goal is about reaching a certain number of sponsors. */\n  TotalSponsorsCount = 'TOTAL_SPONSORS_COUNT'\n}\n\n/** A GitHub Sponsors listing. */\nexport type SponsorsListing = Node & {\n  __typename?: 'SponsorsListing';\n  /** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */\n  activeGoal?: Maybe<SponsorsGoal>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The full description of the listing. */\n  fullDescription: Scalars['String'];\n  /** The full description of the listing rendered to HTML. */\n  fullDescriptionHTML: Scalars['HTML'];\n  id: Scalars['ID'];\n  /** Whether this listing is publicly visible. */\n  isPublic: Scalars['Boolean'];\n  /** The listing's full name. */\n  name: Scalars['String'];\n  /** A future date on which this listing is eligible to receive a payout. */\n  nextPayoutDate?: Maybe<Scalars['Date']>;\n  /** The short description of the listing. */\n  shortDescription: Scalars['String'];\n  /** The short name of the listing. */\n  slug: Scalars['String'];\n  /** The entity this listing represents who can be sponsored on GitHub Sponsors. */\n  sponsorable: Sponsorable;\n  /** The published tiers for this GitHub Sponsors listing. */\n  tiers?: Maybe<SponsorsTierConnection>;\n};\n\n\n/** A GitHub Sponsors listing. */\nexport type SponsorsListingTiersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorsTierOrder>;\n};\n\n/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */\nexport type SponsorsTier = Node & {\n  __typename?: 'SponsorsTier';\n  /** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */\n  adminInfo?: Maybe<SponsorsTierAdminInfo>;\n  /** Get a different tier for this tier's maintainer that is at the same frequency as this tier but with an equal or lesser cost. Returns the published tier with the monthly price closest to this tier's without going over. */\n  closestLesserValueTier?: Maybe<SponsorsTier>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The description of the tier. */\n  description: Scalars['String'];\n  /** The tier description rendered to HTML */\n  descriptionHTML: Scalars['HTML'];\n  id: Scalars['ID'];\n  /** Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing. */\n  isCustomAmount: Scalars['Boolean'];\n  /** Whether this tier is only for use with one-time sponsorships. */\n  isOneTime: Scalars['Boolean'];\n  /** How much this tier costs per month in cents. */\n  monthlyPriceInCents: Scalars['Int'];\n  /** How much this tier costs per month in USD. */\n  monthlyPriceInDollars: Scalars['Int'];\n  /** The name of the tier. */\n  name: Scalars['String'];\n  /** The sponsors listing that this tier belongs to. */\n  sponsorsListing: SponsorsListing;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */\nexport type SponsorsTierAdminInfo = {\n  __typename?: 'SponsorsTierAdminInfo';\n  /** The sponsorships associated with this tier. */\n  sponsorships: SponsorshipConnection;\n};\n\n\n/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */\nexport type SponsorsTierAdminInfoSponsorshipsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  includePrivate?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n/** The connection type for SponsorsTier. */\nexport type SponsorsTierConnection = {\n  __typename?: 'SponsorsTierConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorsTierEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorsTier>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type SponsorsTierEdge = {\n  __typename?: 'SponsorsTierEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorsTier>;\n};\n\n/** Ordering options for Sponsors tiers connections. */\nexport type SponsorsTierOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order tiers by. */\n  field: SponsorsTierOrderField;\n};\n\n/** Properties by which Sponsors tiers connections can be ordered. */\nexport enum SponsorsTierOrderField {\n  /** Order tiers by creation time. */\n  CreatedAt = 'CREATED_AT',\n  /** Order tiers by their monthly price in cents */\n  MonthlyPriceInCents = 'MONTHLY_PRICE_IN_CENTS'\n}\n\n/** A sponsorship relationship between a sponsor and a maintainer */\nexport type Sponsorship = Node & {\n  __typename?: 'Sponsorship';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */\n  isOneTimePayment: Scalars['Boolean'];\n  /** Check if the sponsor has chosen to receive sponsorship update emails sent from the sponsorable. Only returns a non-null value when the viewer has permission to know this. */\n  isSponsorOptedIntoEmail?: Maybe<Scalars['Boolean']>;\n  /**\n   * The entity that is being sponsored\n   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.\n   */\n  maintainer: User;\n  /** The privacy level for this sponsorship. */\n  privacyLevel: SponsorshipPrivacy;\n  /**\n   * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.\n   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.\n   */\n  sponsor?: Maybe<User>;\n  /** The user or organization that is sponsoring, if you have permission to view them. */\n  sponsorEntity?: Maybe<Sponsor>;\n  /** The entity that is being sponsored */\n  sponsorable: Sponsorable;\n  /** The associated sponsorship tier */\n  tier?: Maybe<SponsorsTier>;\n  /** Identifies the date and time when the current tier was chosen for this sponsorship. */\n  tierSelectedAt?: Maybe<Scalars['DateTime']>;\n};\n\n/** The connection type for Sponsorship. */\nexport type SponsorshipConnection = {\n  __typename?: 'SponsorshipConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorshipEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Sponsorship>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n  /** The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships. */\n  totalRecurringMonthlyPriceInCents: Scalars['Int'];\n  /** The total amount in USD of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships. */\n  totalRecurringMonthlyPriceInDollars: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type SponsorshipEdge = {\n  __typename?: 'SponsorshipEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Sponsorship>;\n};\n\n/** An update sent to sponsors of a user or organization on GitHub Sponsors. */\nexport type SponsorshipNewsletter = Node & {\n  __typename?: 'SponsorshipNewsletter';\n  /** The contents of the newsletter, the message the sponsorable wanted to give. */\n  body: Scalars['String'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Indicates if the newsletter has been made available to sponsors. */\n  isPublished: Scalars['Boolean'];\n  /** The user or organization this newsletter is from. */\n  sponsorable: Sponsorable;\n  /** The subject of the newsletter, what it's about. */\n  subject: Scalars['String'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** The connection type for SponsorshipNewsletter. */\nexport type SponsorshipNewsletterConnection = {\n  __typename?: 'SponsorshipNewsletterConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorshipNewsletterEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorshipNewsletter>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type SponsorshipNewsletterEdge = {\n  __typename?: 'SponsorshipNewsletterEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorshipNewsletter>;\n};\n\n/** Ordering options for sponsorship newsletter connections. */\nexport type SponsorshipNewsletterOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order sponsorship newsletters by. */\n  field: SponsorshipNewsletterOrderField;\n};\n\n/** Properties by which sponsorship update connections can be ordered. */\nexport enum SponsorshipNewsletterOrderField {\n  /** Order sponsorship newsletters by when they were created. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Ordering options for sponsorship connections. */\nexport type SponsorshipOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order sponsorship by. */\n  field: SponsorshipOrderField;\n};\n\n/** Properties by which sponsorship connections can be ordered. */\nexport enum SponsorshipOrderField {\n  /** Order sponsorship by creation time. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** The privacy of a sponsorship */\nexport enum SponsorshipPrivacy {\n  /** Private */\n  Private = 'PRIVATE',\n  /** Public */\n  Public = 'PUBLIC'\n}\n\n/** Ways in which star connections can be ordered. */\nexport type StarOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field in which to order nodes by. */\n  field: StarOrderField;\n};\n\n/** Properties by which star connections can be ordered. */\nexport enum StarOrderField {\n  /** Allows ordering a list of stars by when they were created. */\n  StarredAt = 'STARRED_AT'\n}\n\n/** The connection type for User. */\nexport type StargazerConnection = {\n  __typename?: 'StargazerConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StargazerEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Represents a user that's starred a repository. */\nexport type StargazerEdge = {\n  __typename?: 'StargazerEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  node: User;\n  /** Identifies when the item was starred. */\n  starredAt: Scalars['DateTime'];\n};\n\n/** Things that can be starred. */\nexport type Starrable = {\n  id: Scalars['ID'];\n  /**\n   * Returns a count of how many stargazers there are on this object\n   *\n   */\n  stargazerCount: Scalars['Int'];\n  /** A list of users who have starred this starrable. */\n  stargazers: StargazerConnection;\n  /** Returns a boolean indicating whether the viewing user has starred this starrable. */\n  viewerHasStarred: Scalars['Boolean'];\n};\n\n\n/** Things that can be starred. */\nexport type StarrableStargazersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<StarOrder>;\n};\n\n/** The connection type for Repository. */\nexport type StarredRepositoryConnection = {\n  __typename?: 'StarredRepositoryConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarredRepositoryEdge>>>;\n  /** Is the list of stars for this user truncated? This is true for users that have many stars. */\n  isOverLimit: Scalars['Boolean'];\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Repository>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Represents a starred repository. */\nexport type StarredRepositoryEdge = {\n  __typename?: 'StarredRepositoryEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  node: Repository;\n  /** Identifies when the item was starred. */\n  starredAt: Scalars['DateTime'];\n};\n\n/** Autogenerated input type of StartRepositoryMigration */\nexport type StartRepositoryMigrationInput = {\n  /** The Octoshift migration source access token. */\n  accessToken?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Whether to continue the migration on error */\n  continueOnError?: InputMaybe<Scalars['Boolean']>;\n  /** The signed URL to access the user-uploaded git archive */\n  gitArchiveUrl?: InputMaybe<Scalars['String']>;\n  /** The GitHub personal access token of the user importing to the target repository. */\n  githubPat?: InputMaybe<Scalars['String']>;\n  /** The signed URL to access the user-uploaded metadata archive */\n  metadataArchiveUrl?: InputMaybe<Scalars['String']>;\n  /** The ID of the organization that will own the imported repository. */\n  ownerId: Scalars['ID'];\n  /** The name of the imported repository. */\n  repositoryName: Scalars['String'];\n  /** The ID of the Octoshift migration source. */\n  sourceId: Scalars['ID'];\n  /** The Octoshift migration source repository URL. */\n  sourceRepositoryUrl: Scalars['URI'];\n};\n\n/** Autogenerated return type of StartRepositoryMigration */\nexport type StartRepositoryMigrationPayload = {\n  __typename?: 'StartRepositoryMigrationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The new Octoshift repository migration. */\n  repositoryMigration?: Maybe<RepositoryMigration>;\n};\n\n/** Represents a commit status. */\nexport type Status = Node & {\n  __typename?: 'Status';\n  /** A list of status contexts and check runs for this commit. */\n  combinedContexts: StatusCheckRollupContextConnection;\n  /** The commit this status is attached to. */\n  commit?: Maybe<Commit>;\n  /** Looks up an individual status context by context name. */\n  context?: Maybe<StatusContext>;\n  /** The individual status contexts for this commit. */\n  contexts: Array<StatusContext>;\n  id: Scalars['ID'];\n  /** The combined commit status. */\n  state: StatusState;\n};\n\n\n/** Represents a commit status. */\nexport type StatusCombinedContextsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** Represents a commit status. */\nexport type StatusContextArgs = {\n  name: Scalars['String'];\n};\n\n/** Represents the rollup for both the check runs and status for a commit. */\nexport type StatusCheckRollup = Node & {\n  __typename?: 'StatusCheckRollup';\n  /** The commit the status and check runs are attached to. */\n  commit?: Maybe<Commit>;\n  /** A list of status contexts and check runs for this commit. */\n  contexts: StatusCheckRollupContextConnection;\n  id: Scalars['ID'];\n  /** The combined status for the commit. */\n  state: StatusState;\n};\n\n\n/** Represents the rollup for both the check runs and status for a commit. */\nexport type StatusCheckRollupContextsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** Types that can be inside a StatusCheckRollup context. */\nexport type StatusCheckRollupContext = CheckRun | StatusContext;\n\n/** The connection type for StatusCheckRollupContext. */\nexport type StatusCheckRollupContextConnection = {\n  __typename?: 'StatusCheckRollupContextConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StatusCheckRollupContextEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<StatusCheckRollupContext>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type StatusCheckRollupContextEdge = {\n  __typename?: 'StatusCheckRollupContextEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<StatusCheckRollupContext>;\n};\n\n/** Represents an individual commit status context */\nexport type StatusContext = Node & RequirableByPullRequest & {\n  __typename?: 'StatusContext';\n  /** The avatar of the OAuth application or the user that created the status */\n  avatarUrl?: Maybe<Scalars['URI']>;\n  /** This commit this status context is attached to. */\n  commit?: Maybe<Commit>;\n  /** The name of this status context. */\n  context: Scalars['String'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The actor who created this status context. */\n  creator?: Maybe<Actor>;\n  /** The description for this status context. */\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  /** Whether this is required to pass before merging for a specific pull request. */\n  isRequired: Scalars['Boolean'];\n  /** The state of this status context. */\n  state: StatusState;\n  /** The URL for this status context. */\n  targetUrl?: Maybe<Scalars['URI']>;\n};\n\n\n/** Represents an individual commit status context */\nexport type StatusContextAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** Represents an individual commit status context */\nexport type StatusContextIsRequiredArgs = {\n  pullRequestId?: InputMaybe<Scalars['ID']>;\n  pullRequestNumber?: InputMaybe<Scalars['Int']>;\n};\n\n/** The possible commit status states. */\nexport enum StatusState {\n  /** Status is errored. */\n  Error = 'ERROR',\n  /** Status is expected. */\n  Expected = 'EXPECTED',\n  /** Status is failing. */\n  Failure = 'FAILURE',\n  /** Status is pending. */\n  Pending = 'PENDING',\n  /** Status is successful. */\n  Success = 'SUCCESS'\n}\n\n/** Autogenerated input type of SubmitPullRequestReview */\nexport type SubmitPullRequestReviewInput = {\n  /** The text field to set on the Pull Request Review. */\n  body?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The event to send to the Pull Request Review. */\n  event: PullRequestReviewEvent;\n  /** The Pull Request ID to submit any pending reviews. */\n  pullRequestId?: InputMaybe<Scalars['ID']>;\n  /** The Pull Request Review ID to submit. */\n  pullRequestReviewId?: InputMaybe<Scalars['ID']>;\n};\n\n/** Autogenerated return type of SubmitPullRequestReview */\nexport type SubmitPullRequestReviewPayload = {\n  __typename?: 'SubmitPullRequestReviewPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The submitted pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** A pointer to a repository at a specific revision embedded inside another repository. */\nexport type Submodule = {\n  __typename?: 'Submodule';\n  /** The branch of the upstream submodule for tracking updates */\n  branch?: Maybe<Scalars['String']>;\n  /** The git URL of the submodule repository */\n  gitUrl: Scalars['URI'];\n  /** The name of the submodule in .gitmodules */\n  name: Scalars['String'];\n  /** The path in the superproject that this submodule is located in */\n  path: Scalars['String'];\n  /** The commit revision of the subproject repository being tracked by the submodule */\n  subprojectCommitOid?: Maybe<Scalars['GitObjectID']>;\n};\n\n/** The connection type for Submodule. */\nexport type SubmoduleConnection = {\n  __typename?: 'SubmoduleConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SubmoduleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Submodule>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type SubmoduleEdge = {\n  __typename?: 'SubmoduleEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Submodule>;\n};\n\n/** Entities that can be subscribed to for web and email notifications. */\nexport type Subscribable = {\n  id: Scalars['ID'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n};\n\n/** Represents a 'subscribed' event on a given `Subscribable`. */\nexport type SubscribedEvent = Node & {\n  __typename?: 'SubscribedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Object referenced by event. */\n  subscribable: Subscribable;\n};\n\n/** The possible states of a subscription. */\nexport enum SubscriptionState {\n  /** The User is never notified. */\n  Ignored = 'IGNORED',\n  /** The User is notified of all conversations. */\n  Subscribed = 'SUBSCRIBED',\n  /** The User is only notified when participating or @mentioned. */\n  Unsubscribed = 'UNSUBSCRIBED'\n}\n\n/** A suggestion to review a pull request based on a user's commit history and review comments. */\nexport type SuggestedReviewer = {\n  __typename?: 'SuggestedReviewer';\n  /** Is this suggestion based on past commits? */\n  isAuthor: Scalars['Boolean'];\n  /** Is this suggestion based on past review comments? */\n  isCommenter: Scalars['Boolean'];\n  /** Identifies the user suggested to review the pull request. */\n  reviewer: User;\n};\n\n/** Represents a Git tag. */\nexport type Tag = GitObject & Node & {\n  __typename?: 'Tag';\n  /** An abbreviated version of the Git object ID */\n  abbreviatedOid: Scalars['String'];\n  /** The HTTP path for this Git object */\n  commitResourcePath: Scalars['URI'];\n  /** The HTTP URL for this Git object */\n  commitUrl: Scalars['URI'];\n  id: Scalars['ID'];\n  /** The Git tag message. */\n  message?: Maybe<Scalars['String']>;\n  /** The Git tag name. */\n  name: Scalars['String'];\n  /** The Git object ID */\n  oid: Scalars['GitObjectID'];\n  /** The Repository the Git object belongs to */\n  repository: Repository;\n  /** Details about the tag author. */\n  tagger?: Maybe<GitActor>;\n  /** The Git object the tag points to. */\n  target: GitObject;\n};\n\n/** A team of users in an organization. */\nexport type Team = MemberStatusable & Node & Subscribable & {\n  __typename?: 'Team';\n  /** A list of teams that are ancestors of this team. */\n  ancestors: TeamConnection;\n  /** A URL pointing to the team's avatar. */\n  avatarUrl?: Maybe<Scalars['URI']>;\n  /** List of child teams belonging to this team */\n  childTeams: TeamConnection;\n  /** The slug corresponding to the organization and team. */\n  combinedSlug: Scalars['String'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The description of the team. */\n  description?: Maybe<Scalars['String']>;\n  /** Find a team discussion by its number. */\n  discussion?: Maybe<TeamDiscussion>;\n  /** A list of team discussions. */\n  discussions: TeamDiscussionConnection;\n  /** The HTTP path for team discussions */\n  discussionsResourcePath: Scalars['URI'];\n  /** The HTTP URL for team discussions */\n  discussionsUrl: Scalars['URI'];\n  /** The HTTP path for editing this team */\n  editTeamResourcePath: Scalars['URI'];\n  /** The HTTP URL for editing this team */\n  editTeamUrl: Scalars['URI'];\n  id: Scalars['ID'];\n  /** A list of pending invitations for users to this team */\n  invitations?: Maybe<OrganizationInvitationConnection>;\n  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */\n  memberStatuses: UserStatusConnection;\n  /** A list of users who are members of this team. */\n  members: TeamMemberConnection;\n  /** The HTTP path for the team' members */\n  membersResourcePath: Scalars['URI'];\n  /** The HTTP URL for the team' members */\n  membersUrl: Scalars['URI'];\n  /** The name of the team. */\n  name: Scalars['String'];\n  /** The HTTP path creating a new team */\n  newTeamResourcePath: Scalars['URI'];\n  /** The HTTP URL creating a new team */\n  newTeamUrl: Scalars['URI'];\n  /** The organization that owns this team. */\n  organization: Organization;\n  /** The parent team of the team. */\n  parentTeam?: Maybe<Team>;\n  /** The level of privacy the team has. */\n  privacy: TeamPrivacy;\n  /** A list of repositories this team has access to. */\n  repositories: TeamRepositoryConnection;\n  /** The HTTP path for this team's repositories */\n  repositoriesResourcePath: Scalars['URI'];\n  /** The HTTP URL for this team's repositories */\n  repositoriesUrl: Scalars['URI'];\n  /** The HTTP path for this team */\n  resourcePath: Scalars['URI'];\n  /** The slug corresponding to the team. */\n  slug: Scalars['String'];\n  /** The HTTP path for this team's teams */\n  teamsResourcePath: Scalars['URI'];\n  /** The HTTP URL for this team's teams */\n  teamsUrl: Scalars['URI'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this team */\n  url: Scalars['URI'];\n  /** Team is adminable by the viewer. */\n  viewerCanAdminister: Scalars['Boolean'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamAncestorsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamChildTeamsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  immediateOnly?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TeamOrder>;\n  userLogins?: InputMaybe<Array<Scalars['String']>>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamDiscussionArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** A team of users in an organization. */\nexport type TeamDiscussionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  isPinned?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TeamDiscussionOrder>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamInvitationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamMemberStatusesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserStatusOrder>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamMembersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  membership?: InputMaybe<TeamMembershipType>;\n  orderBy?: InputMaybe<TeamMemberOrder>;\n  query?: InputMaybe<Scalars['String']>;\n  role?: InputMaybe<TeamMemberRole>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamRepositoriesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TeamRepositoryOrder>;\n  query?: InputMaybe<Scalars['String']>;\n};\n\n/** Audit log entry for a team.add_member event. */\nexport type TeamAddMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData & {\n  __typename?: 'TeamAddMemberAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** Whether the team was mapped to an LDAP Group. */\n  isLdapMapped?: Maybe<Scalars['Boolean']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a team.add_repository event. */\nexport type TeamAddRepositoryAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData & {\n  __typename?: 'TeamAddRepositoryAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** Whether the team was mapped to an LDAP Group. */\n  isLdapMapped?: Maybe<Scalars['Boolean']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Metadata for an audit entry with action team.* */\nexport type TeamAuditEntryData = {\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a team.change_parent_team event. */\nexport type TeamChangeParentTeamAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData & {\n  __typename?: 'TeamChangeParentTeamAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** Whether the team was mapped to an LDAP Group. */\n  isLdapMapped?: Maybe<Scalars['Boolean']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The new parent team. */\n  parentTeam?: Maybe<Team>;\n  /** The name of the new parent team */\n  parentTeamName?: Maybe<Scalars['String']>;\n  /** The name of the former parent team */\n  parentTeamNameWas?: Maybe<Scalars['String']>;\n  /** The HTTP path for the parent team */\n  parentTeamResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the parent team */\n  parentTeamUrl?: Maybe<Scalars['URI']>;\n  /** The former parent team. */\n  parentTeamWas?: Maybe<Team>;\n  /** The HTTP path for the previous parent team */\n  parentTeamWasResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the previous parent team */\n  parentTeamWasUrl?: Maybe<Scalars['URI']>;\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** The connection type for Team. */\nexport type TeamConnection = {\n  __typename?: 'TeamConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Team>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** A team discussion. */\nexport type TeamDiscussion = Comment & Deletable & Node & Reactable & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment & {\n  __typename?: 'TeamDiscussion';\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the discussion's team. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The body as Markdown. */\n  body: Scalars['String'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String'];\n  /** Identifies the discussion body hash. */\n  bodyVersion: Scalars['String'];\n  /** A list of comments on this discussion. */\n  comments: TeamDiscussionCommentConnection;\n  /** The HTTP path for discussion comments */\n  commentsResourcePath: Scalars['URI'];\n  /** The HTTP URL for discussion comments */\n  commentsUrl: Scalars['URI'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  id: Scalars['ID'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean'];\n  /** Whether or not the discussion is pinned. */\n  isPinned: Scalars['Boolean'];\n  /** Whether or not the discussion is only visible to team members and org admins. */\n  isPrivate: Scalars['Boolean'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']>;\n  /** Identifies the discussion within its team. */\n  number: Scalars['Int'];\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The HTTP path for this discussion */\n  resourcePath: Scalars['URI'];\n  /** The team that defines the context of this discussion. */\n  team: Team;\n  /** The title of the discussion */\n  title: Scalars['String'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this discussion */\n  url: Scalars['URI'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean'];\n  /** Whether or not the current viewer can pin this discussion. */\n  viewerCanPin: Scalars['Boolean'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n};\n\n\n/** A team discussion. */\nexport type TeamDiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  fromComment?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TeamDiscussionCommentOrder>;\n};\n\n\n/** A team discussion. */\nexport type TeamDiscussionReactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A team discussion. */\nexport type TeamDiscussionUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A comment on a team discussion. */\nexport type TeamDiscussionComment = Comment & Deletable & Node & Reactable & UniformResourceLocatable & Updatable & UpdatableComment & {\n  __typename?: 'TeamDiscussionComment';\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the comment's team. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The body as Markdown. */\n  body: Scalars['String'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String'];\n  /** The current version of the body content. */\n  bodyVersion: Scalars['String'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The discussion this comment is about. */\n  discussion: TeamDiscussion;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  id: Scalars['ID'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']>;\n  /** Identifies the comment number. */\n  number: Scalars['Int'];\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The HTTP path for this comment */\n  resourcePath: Scalars['URI'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this comment */\n  url: Scalars['URI'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean'];\n};\n\n\n/** A comment on a team discussion. */\nexport type TeamDiscussionCommentReactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A comment on a team discussion. */\nexport type TeamDiscussionCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** The connection type for TeamDiscussionComment. */\nexport type TeamDiscussionCommentConnection = {\n  __typename?: 'TeamDiscussionCommentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamDiscussionCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TeamDiscussionComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TeamDiscussionCommentEdge = {\n  __typename?: 'TeamDiscussionCommentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<TeamDiscussionComment>;\n};\n\n/** Ways in which team discussion comment connections can be ordered. */\nexport type TeamDiscussionCommentOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field by which to order nodes. */\n  field: TeamDiscussionCommentOrderField;\n};\n\n/** Properties by which team discussion comment connections can be ordered. */\nexport enum TeamDiscussionCommentOrderField {\n  /** Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering). */\n  Number = 'NUMBER'\n}\n\n/** The connection type for TeamDiscussion. */\nexport type TeamDiscussionConnection = {\n  __typename?: 'TeamDiscussionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamDiscussionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TeamDiscussion>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TeamDiscussionEdge = {\n  __typename?: 'TeamDiscussionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<TeamDiscussion>;\n};\n\n/** Ways in which team discussion connections can be ordered. */\nexport type TeamDiscussionOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field by which to order nodes. */\n  field: TeamDiscussionOrderField;\n};\n\n/** Properties by which team discussion connections can be ordered. */\nexport enum TeamDiscussionOrderField {\n  /** Allows chronological ordering of team discussions. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** An edge in a connection. */\nexport type TeamEdge = {\n  __typename?: 'TeamEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Team>;\n};\n\n/** The connection type for User. */\nexport type TeamMemberConnection = {\n  __typename?: 'TeamMemberConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamMemberEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Represents a user who is a member of a team. */\nexport type TeamMemberEdge = {\n  __typename?: 'TeamMemberEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The HTTP path to the organization's member access page. */\n  memberAccessResourcePath: Scalars['URI'];\n  /** The HTTP URL to the organization's member access page. */\n  memberAccessUrl: Scalars['URI'];\n  node: User;\n  /** The role the member has on the team. */\n  role: TeamMemberRole;\n};\n\n/** Ordering options for team member connections */\nexport type TeamMemberOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order team members by. */\n  field: TeamMemberOrderField;\n};\n\n/** Properties by which team member connections can be ordered. */\nexport enum TeamMemberOrderField {\n  /** Order team members by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order team members by login */\n  Login = 'LOGIN'\n}\n\n/** The possible team member roles; either 'maintainer' or 'member'. */\nexport enum TeamMemberRole {\n  /** A team maintainer has permission to add and remove team members. */\n  Maintainer = 'MAINTAINER',\n  /** A team member has no administrative permissions on the team. */\n  Member = 'MEMBER'\n}\n\n/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */\nexport enum TeamMembershipType {\n  /** Includes immediate and child team members for the team. */\n  All = 'ALL',\n  /** Includes only child team members for the team. */\n  ChildTeam = 'CHILD_TEAM',\n  /** Includes only immediate members of the team. */\n  Immediate = 'IMMEDIATE'\n}\n\n/** Ways in which team connections can be ordered. */\nexport type TeamOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field in which to order nodes by. */\n  field: TeamOrderField;\n};\n\n/** Properties by which team connections can be ordered. */\nexport enum TeamOrderField {\n  /** Allows ordering a list of teams by name. */\n  Name = 'NAME'\n}\n\n/** The possible team privacy values. */\nexport enum TeamPrivacy {\n  /** A secret team can only be seen by its members. */\n  Secret = 'SECRET',\n  /** A visible team can be seen and @mentioned by every member of the organization. */\n  Visible = 'VISIBLE'\n}\n\n/** Audit log entry for a team.remove_member event. */\nexport type TeamRemoveMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData & {\n  __typename?: 'TeamRemoveMemberAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** Whether the team was mapped to an LDAP Group. */\n  isLdapMapped?: Maybe<Scalars['Boolean']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** Audit log entry for a team.remove_repository event. */\nexport type TeamRemoveRepositoryAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData & {\n  __typename?: 'TeamRemoveRepositoryAuditEntry';\n  /** The action name */\n  action: Scalars['String'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime'];\n  id: Scalars['ID'];\n  /** Whether the team was mapped to an LDAP Group. */\n  isLdapMapped?: Maybe<Scalars['Boolean']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']>;\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']>;\n};\n\n/** The connection type for Repository. */\nexport type TeamRepositoryConnection = {\n  __typename?: 'TeamRepositoryConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamRepositoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Repository>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** Represents a team repository. */\nexport type TeamRepositoryEdge = {\n  __typename?: 'TeamRepositoryEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  node: Repository;\n  /** The permission level the team has on the repository */\n  permission: RepositoryPermission;\n};\n\n/** Ordering options for team repository connections */\nexport type TeamRepositoryOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repositories by. */\n  field: TeamRepositoryOrderField;\n};\n\n/** Properties by which team repository connections can be ordered. */\nexport enum TeamRepositoryOrderField {\n  /** Order repositories by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order repositories by name */\n  Name = 'NAME',\n  /** Order repositories by permission */\n  Permission = 'PERMISSION',\n  /** Order repositories by push time */\n  PushedAt = 'PUSHED_AT',\n  /** Order repositories by number of stargazers */\n  Stargazers = 'STARGAZERS',\n  /** Order repositories by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The role of a user on a team. */\nexport enum TeamRole {\n  /** User has admin rights on the team. */\n  Admin = 'ADMIN',\n  /** User is a member of the team. */\n  Member = 'MEMBER'\n}\n\n/** A text match within a search result. */\nexport type TextMatch = {\n  __typename?: 'TextMatch';\n  /** The specific text fragment within the property matched on. */\n  fragment: Scalars['String'];\n  /** Highlights within the matched fragment. */\n  highlights: Array<TextMatchHighlight>;\n  /** The property matched on. */\n  property: Scalars['String'];\n};\n\n/** Represents a single highlight in a search result match. */\nexport type TextMatchHighlight = {\n  __typename?: 'TextMatchHighlight';\n  /** The indice in the fragment where the matched text begins. */\n  beginIndice: Scalars['Int'];\n  /** The indice in the fragment where the matched text ends. */\n  endIndice: Scalars['Int'];\n  /** The text matched. */\n  text: Scalars['String'];\n};\n\n/** A topic aggregates entities that are related to a subject. */\nexport type Topic = Node & Starrable & {\n  __typename?: 'Topic';\n  id: Scalars['ID'];\n  /** The topic's name. */\n  name: Scalars['String'];\n  /**\n   * A list of related topics, including aliases of this topic, sorted with the most relevant\n   * first. Returns up to 10 Topics.\n   *\n   */\n  relatedTopics: Array<Topic>;\n  /** A list of repositories. */\n  repositories: RepositoryConnection;\n  /**\n   * Returns a count of how many stargazers there are on this object\n   *\n   */\n  stargazerCount: Scalars['Int'];\n  /** A list of users who have starred this starrable. */\n  stargazers: StargazerConnection;\n  /** Returns a boolean indicating whether the viewing user has starred this starrable. */\n  viewerHasStarred: Scalars['Boolean'];\n};\n\n\n/** A topic aggregates entities that are related to a subject. */\nexport type TopicRelatedTopicsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A topic aggregates entities that are related to a subject. */\nexport type TopicRepositoriesArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  isLocked?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n  sponsorableOnly?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** A topic aggregates entities that are related to a subject. */\nexport type TopicStargazersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<StarOrder>;\n};\n\n/** Metadata for an audit entry with a topic. */\nexport type TopicAuditEntryData = {\n  /** The name of the topic added to the repository */\n  topic?: Maybe<Topic>;\n  /** The name of the topic added to the repository */\n  topicName?: Maybe<Scalars['String']>;\n};\n\n/** Reason that the suggested topic is declined. */\nexport enum TopicSuggestionDeclineReason {\n  /** The suggested topic is not relevant to the repository. */\n  NotRelevant = 'NOT_RELEVANT',\n  /** The viewer does not like the suggested topic. */\n  PersonalPreference = 'PERSONAL_PREFERENCE',\n  /** The suggested topic is too general for the repository. */\n  TooGeneral = 'TOO_GENERAL',\n  /** The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1). */\n  TooSpecific = 'TOO_SPECIFIC'\n}\n\n/** Autogenerated input type of TransferIssue */\nexport type TransferIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the issue to be transferred */\n  issueId: Scalars['ID'];\n  /** The Node ID of the repository the issue should be transferred to */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of TransferIssue */\nexport type TransferIssuePayload = {\n  __typename?: 'TransferIssuePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The issue that was transferred */\n  issue?: Maybe<Issue>;\n};\n\n/** Represents a 'transferred' event on a given issue or pull request. */\nexport type TransferredEvent = Node & {\n  __typename?: 'TransferredEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The repository this came from */\n  fromRepository?: Maybe<Repository>;\n  id: Scalars['ID'];\n  /** Identifies the issue associated with the event. */\n  issue: Issue;\n};\n\n/** Represents a Git tree. */\nexport type Tree = GitObject & Node & {\n  __typename?: 'Tree';\n  /** An abbreviated version of the Git object ID */\n  abbreviatedOid: Scalars['String'];\n  /** The HTTP path for this Git object */\n  commitResourcePath: Scalars['URI'];\n  /** The HTTP URL for this Git object */\n  commitUrl: Scalars['URI'];\n  /** A list of tree entries. */\n  entries?: Maybe<Array<TreeEntry>>;\n  id: Scalars['ID'];\n  /** The Git object ID */\n  oid: Scalars['GitObjectID'];\n  /** The Repository the Git object belongs to */\n  repository: Repository;\n};\n\n/** Represents a Git tree entry. */\nexport type TreeEntry = {\n  __typename?: 'TreeEntry';\n  /** The extension of the file */\n  extension?: Maybe<Scalars['String']>;\n  /** Whether or not this tree entry is generated */\n  isGenerated: Scalars['Boolean'];\n  /** Entry file mode. */\n  mode: Scalars['Int'];\n  /** Entry file name. */\n  name: Scalars['String'];\n  /** Entry file object. */\n  object?: Maybe<GitObject>;\n  /** Entry file Git object ID. */\n  oid: Scalars['GitObjectID'];\n  /** The full path of the file. */\n  path?: Maybe<Scalars['String']>;\n  /** The Repository the tree entry belongs to */\n  repository: Repository;\n  /** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */\n  submodule?: Maybe<Submodule>;\n  /** Entry file type. */\n  type: Scalars['String'];\n};\n\n/** Autogenerated input type of UnarchiveRepository */\nexport type UnarchiveRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the repository to unarchive. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UnarchiveRepository */\nexport type UnarchiveRepositoryPayload = {\n  __typename?: 'UnarchiveRepositoryPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The repository that was unarchived. */\n  repository?: Maybe<Repository>;\n};\n\n/** Represents an 'unassigned' event on any assignable object. */\nexport type UnassignedEvent = Node & {\n  __typename?: 'UnassignedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the assignable associated with the event. */\n  assignable: Assignable;\n  /** Identifies the user or mannequin that was unassigned. */\n  assignee?: Maybe<Assignee>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /**\n   * Identifies the subject (user) who was unassigned.\n   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.\n   */\n  user?: Maybe<User>;\n};\n\n/** Autogenerated input type of UnfollowUser */\nexport type UnfollowUserInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** ID of the user to unfollow. */\n  userId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UnfollowUser */\nexport type UnfollowUserPayload = {\n  __typename?: 'UnfollowUserPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The user that was unfollowed. */\n  user?: Maybe<User>;\n};\n\n/** Represents a type that can be retrieved by a URL. */\nexport type UniformResourceLocatable = {\n  /** The HTML path to this resource. */\n  resourcePath: Scalars['URI'];\n  /** The URL to this resource. */\n  url: Scalars['URI'];\n};\n\n/** Represents an unknown signature on a Commit or Tag. */\nexport type UnknownSignature = GitSignature & {\n  __typename?: 'UnknownSignature';\n  /** Email used to sign this object. */\n  email: Scalars['String'];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars['Boolean'];\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars['String'];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars['String'];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars['Boolean'];\n};\n\n/** Represents an 'unlabeled' event on a given issue or pull request. */\nexport type UnlabeledEvent = Node & {\n  __typename?: 'UnlabeledEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Identifies the label associated with the 'unlabeled' event. */\n  label: Label;\n  /** Identifies the `Labelable` associated with the event. */\n  labelable: Labelable;\n};\n\n/** Autogenerated input type of UnlinkRepositoryFromProject */\nexport type UnlinkRepositoryFromProjectInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the Project linked to the Repository. */\n  projectId: Scalars['ID'];\n  /** The ID of the Repository linked to the Project. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UnlinkRepositoryFromProject */\nexport type UnlinkRepositoryFromProjectPayload = {\n  __typename?: 'UnlinkRepositoryFromProjectPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The linked Project. */\n  project?: Maybe<Project>;\n  /** The linked Repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of UnlockLockable */\nexport type UnlockLockableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** ID of the item to be unlocked. */\n  lockableId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UnlockLockable */\nexport type UnlockLockablePayload = {\n  __typename?: 'UnlockLockablePayload';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The item that was unlocked. */\n  unlockedRecord?: Maybe<Lockable>;\n};\n\n/** Represents an 'unlocked' event on a given issue or pull request. */\nexport type UnlockedEvent = Node & {\n  __typename?: 'UnlockedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Object that was unlocked. */\n  lockable: Lockable;\n};\n\n/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */\nexport type UnmarkDiscussionCommentAsAnswerInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the discussion comment to unmark as an answer. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer */\nexport type UnmarkDiscussionCommentAsAnswerPayload = {\n  __typename?: 'UnmarkDiscussionCommentAsAnswerPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The discussion that includes the comment. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of UnmarkFileAsViewed */\nexport type UnmarkFileAsViewedInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The path of the file to mark as unviewed */\n  path: Scalars['String'];\n  /** The Node ID of the pull request. */\n  pullRequestId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UnmarkFileAsViewed */\nexport type UnmarkFileAsViewedPayload = {\n  __typename?: 'UnmarkFileAsViewedPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of UnmarkIssueAsDuplicate */\nexport type UnmarkIssueAsDuplicateInput = {\n  /** ID of the issue or pull request currently considered canonical/authoritative/original. */\n  canonicalId: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** ID of the issue or pull request currently marked as a duplicate. */\n  duplicateId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UnmarkIssueAsDuplicate */\nexport type UnmarkIssueAsDuplicatePayload = {\n  __typename?: 'UnmarkIssueAsDuplicatePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The issue or pull request that was marked as a duplicate. */\n  duplicate?: Maybe<IssueOrPullRequest>;\n};\n\n/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */\nexport type UnmarkedAsDuplicateEvent = Node & {\n  __typename?: 'UnmarkedAsDuplicateEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** The authoritative issue or pull request which has been duplicated by another. */\n  canonical?: Maybe<IssueOrPullRequest>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** The issue or pull request which has been marked as a duplicate of another. */\n  duplicate?: Maybe<IssueOrPullRequest>;\n  id: Scalars['ID'];\n  /** Canonical and duplicate belong to different repositories. */\n  isCrossRepository: Scalars['Boolean'];\n};\n\n/** Autogenerated input type of UnminimizeComment */\nexport type UnminimizeCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UnminimizeComment */\nexport type UnminimizeCommentPayload = {\n  __typename?: 'UnminimizeCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The comment that was unminimized. */\n  unminimizedComment?: Maybe<Minimizable>;\n};\n\n/** Autogenerated input type of UnpinIssue */\nexport type UnpinIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the issue to be unpinned */\n  issueId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UnpinIssue */\nexport type UnpinIssuePayload = {\n  __typename?: 'UnpinIssuePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The issue that was unpinned */\n  issue?: Maybe<Issue>;\n};\n\n/** Represents an 'unpinned' event on a given issue or pull request. */\nexport type UnpinnedEvent = Node & {\n  __typename?: 'UnpinnedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Identifies the issue associated with the event. */\n  issue: Issue;\n};\n\n/** Autogenerated input type of UnresolveReviewThread */\nexport type UnresolveReviewThreadInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the thread to unresolve */\n  threadId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UnresolveReviewThread */\nexport type UnresolveReviewThreadPayload = {\n  __typename?: 'UnresolveReviewThreadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The thread to resolve. */\n  thread?: Maybe<PullRequestReviewThread>;\n};\n\n/** Represents an 'unsubscribed' event on a given `Subscribable`. */\nexport type UnsubscribedEvent = Node & {\n  __typename?: 'UnsubscribedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** Object referenced by event. */\n  subscribable: Subscribable;\n};\n\n/** Entities that can be updated. */\nexport type Updatable = {\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean'];\n};\n\n/** Comments that can be updated. */\nexport type UpdatableComment = {\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n};\n\n/** Autogenerated input type of UpdateBranchProtectionRule */\nexport type UpdateBranchProtectionRuleInput = {\n  /** Can this branch be deleted. */\n  allowsDeletions?: InputMaybe<Scalars['Boolean']>;\n  /** Are force pushes allowed on this branch. */\n  allowsForcePushes?: InputMaybe<Scalars['Boolean']>;\n  /** The global relay id of the branch protection rule to be updated. */\n  branchProtectionRuleId: Scalars['ID'];\n  /** A list of User or Team IDs allowed to bypass force push targeting matching branches. */\n  bypassForcePushActorIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** A list of User or Team IDs allowed to bypass pull requests targeting matching branches. */\n  bypassPullRequestActorIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Will new commits pushed to matching branches dismiss pull request review approvals. */\n  dismissesStaleReviews?: InputMaybe<Scalars['Boolean']>;\n  /** Can admins overwrite branch protection. */\n  isAdminEnforced?: InputMaybe<Scalars['Boolean']>;\n  /** The glob-like pattern used to determine matching branches. */\n  pattern?: InputMaybe<Scalars['String']>;\n  /** A list of User, Team or App IDs allowed to push to matching branches. */\n  pushActorIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** Number of approving reviews required to update matching branches. */\n  requiredApprovingReviewCount?: InputMaybe<Scalars['Int']>;\n  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */\n  requiredStatusCheckContexts?: InputMaybe<Array<Scalars['String']>>;\n  /** The list of required status checks */\n  requiredStatusChecks?: InputMaybe<Array<RequiredStatusCheckInput>>;\n  /** Are approving reviews required to update matching branches. */\n  requiresApprovingReviews?: InputMaybe<Scalars['Boolean']>;\n  /** Are reviews from code owners required to update matching branches. */\n  requiresCodeOwnerReviews?: InputMaybe<Scalars['Boolean']>;\n  /** Are commits required to be signed. */\n  requiresCommitSignatures?: InputMaybe<Scalars['Boolean']>;\n  /** Are conversations required to be resolved before merging. */\n  requiresConversationResolution?: InputMaybe<Scalars['Boolean']>;\n  /** Are merge commits prohibited from being pushed to this branch. */\n  requiresLinearHistory?: InputMaybe<Scalars['Boolean']>;\n  /** Are status checks required to update matching branches. */\n  requiresStatusChecks?: InputMaybe<Scalars['Boolean']>;\n  /** Are branches required to be up to date before merging. */\n  requiresStrictStatusChecks?: InputMaybe<Scalars['Boolean']>;\n  /** Is pushing to matching branches restricted. */\n  restrictsPushes?: InputMaybe<Scalars['Boolean']>;\n  /** Is dismissal of pull request reviews restricted. */\n  restrictsReviewDismissals?: InputMaybe<Scalars['Boolean']>;\n  /** A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches. */\n  reviewDismissalActorIds?: InputMaybe<Array<Scalars['ID']>>;\n};\n\n/** Autogenerated return type of UpdateBranchProtectionRule */\nexport type UpdateBranchProtectionRulePayload = {\n  __typename?: 'UpdateBranchProtectionRulePayload';\n  /** The newly created BranchProtectionRule. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateCheckRun */\nexport type UpdateCheckRunInput = {\n  /** Possible further actions the integrator can perform, which a user may trigger. */\n  actions?: InputMaybe<Array<CheckRunAction>>;\n  /** The node of the check. */\n  checkRunId: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The time that the check run finished. */\n  completedAt?: InputMaybe<Scalars['DateTime']>;\n  /** The final conclusion of the check. */\n  conclusion?: InputMaybe<CheckConclusionState>;\n  /** The URL of the integrator's site that has the full details of the check. */\n  detailsUrl?: InputMaybe<Scalars['URI']>;\n  /** A reference for the run on the integrator's system. */\n  externalId?: InputMaybe<Scalars['String']>;\n  /** The name of the check. */\n  name?: InputMaybe<Scalars['String']>;\n  /** Descriptive details about the run. */\n  output?: InputMaybe<CheckRunOutput>;\n  /** The node ID of the repository. */\n  repositoryId: Scalars['ID'];\n  /** The time that the check run began. */\n  startedAt?: InputMaybe<Scalars['DateTime']>;\n  /** The current status. */\n  status?: InputMaybe<RequestableCheckStatusState>;\n};\n\n/** Autogenerated return type of UpdateCheckRun */\nexport type UpdateCheckRunPayload = {\n  __typename?: 'UpdateCheckRunPayload';\n  /** The updated check run. */\n  checkRun?: Maybe<CheckRun>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateCheckSuitePreferences */\nexport type UpdateCheckSuitePreferencesInput = {\n  /** The check suite preferences to modify. */\n  autoTriggerPreferences: Array<CheckSuiteAutoTriggerPreference>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UpdateCheckSuitePreferences */\nexport type UpdateCheckSuitePreferencesPayload = {\n  __typename?: 'UpdateCheckSuitePreferencesPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of UpdateDiscussionComment */\nexport type UpdateDiscussionCommentInput = {\n  /** The new contents of the comment body. */\n  body: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the discussion comment to update. */\n  commentId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UpdateDiscussionComment */\nexport type UpdateDiscussionCommentPayload = {\n  __typename?: 'UpdateDiscussionCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The modified discussion comment. */\n  comment?: Maybe<DiscussionComment>;\n};\n\n/** Autogenerated input type of UpdateDiscussion */\nexport type UpdateDiscussionInput = {\n  /** The new contents of the discussion body. */\n  body?: InputMaybe<Scalars['String']>;\n  /** The Node ID of a discussion category within the same repository to change this discussion to. */\n  categoryId?: InputMaybe<Scalars['ID']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the discussion to update. */\n  discussionId: Scalars['ID'];\n  /** The new discussion title. */\n  title?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateDiscussion */\nexport type UpdateDiscussionPayload = {\n  __typename?: 'UpdateDiscussionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The modified discussion. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseAdministratorRole */\nexport type UpdateEnterpriseAdministratorRoleInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the Enterprise which the admin belongs to. */\n  enterpriseId: Scalars['ID'];\n  /** The login of a administrator whose role is being changed. */\n  login: Scalars['String'];\n  /** The new role for the Enterprise administrator. */\n  role: EnterpriseAdministratorRole;\n};\n\n/** Autogenerated return type of UpdateEnterpriseAdministratorRole */\nexport type UpdateEnterpriseAdministratorRolePayload = {\n  __typename?: 'UpdateEnterpriseAdministratorRolePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** A message confirming the result of changing the administrator's role. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */\nexport type UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the allow private repository forking setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the allow private repository forking setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */\nexport type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload = {\n  __typename?: 'UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated allow private repository forking setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the allow private repository forking setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */\nexport type UpdateEnterpriseDefaultRepositoryPermissionSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the base repository permission setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the base repository permission setting on the enterprise. */\n  settingValue: EnterpriseDefaultRepositoryPermissionSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */\nexport type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload = {\n  __typename?: 'UpdateEnterpriseDefaultRepositoryPermissionSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated base repository permission setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the base repository permission setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */\nexport type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the members can change repository visibility setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the members can change repository visibility setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */\nexport type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload = {\n  __typename?: 'UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated members can change repository visibility setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can change repository visibility setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */\nexport type UpdateEnterpriseMembersCanCreateRepositoriesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the members can create repositories setting. */\n  enterpriseId: Scalars['ID'];\n  /** Allow members to create internal repositories. Defaults to current value. */\n  membersCanCreateInternalRepositories?: InputMaybe<Scalars['Boolean']>;\n  /** Allow members to create private repositories. Defaults to current value. */\n  membersCanCreatePrivateRepositories?: InputMaybe<Scalars['Boolean']>;\n  /** Allow members to create public repositories. Defaults to current value. */\n  membersCanCreatePublicRepositories?: InputMaybe<Scalars['Boolean']>;\n  /** When false, allow member organizations to set their own repository creation member privileges. */\n  membersCanCreateRepositoriesPolicyEnabled?: InputMaybe<Scalars['Boolean']>;\n  /** Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided. */\n  settingValue?: InputMaybe<EnterpriseMembersCanCreateRepositoriesSettingValue>;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */\nexport type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload = {\n  __typename?: 'UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated members can create repositories setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can create repositories setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */\nexport type UpdateEnterpriseMembersCanDeleteIssuesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the members can delete issues setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the members can delete issues setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */\nexport type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload = {\n  __typename?: 'UpdateEnterpriseMembersCanDeleteIssuesSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated members can delete issues setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can delete issues setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */\nexport type UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the members can delete repositories setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the members can delete repositories setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */\nexport type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload = {\n  __typename?: 'UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated members can delete repositories setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can delete repositories setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */\nexport type UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the members can invite collaborators setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the members can invite collaborators setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */\nexport type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload = {\n  __typename?: 'UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated members can invite collaborators setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can invite collaborators setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */\nexport type UpdateEnterpriseMembersCanMakePurchasesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the members can make purchases setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the members can make purchases setting on the enterprise. */\n  settingValue: EnterpriseMembersCanMakePurchasesSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */\nexport type UpdateEnterpriseMembersCanMakePurchasesSettingPayload = {\n  __typename?: 'UpdateEnterpriseMembersCanMakePurchasesSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated members can make purchases setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can make purchases setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */\nexport type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the members can update protected branches setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the members can update protected branches setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */\nexport type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload = {\n  __typename?: 'UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated members can update protected branches setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can update protected branches setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */\nexport type UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the members can view dependency insights setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the members can view dependency insights setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */\nexport type UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload = {\n  __typename?: 'UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated members can view dependency insights setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can view dependency insights setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */\nexport type UpdateEnterpriseOrganizationProjectsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the organization projects setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the organization projects setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */\nexport type UpdateEnterpriseOrganizationProjectsSettingPayload = {\n  __typename?: 'UpdateEnterpriseOrganizationProjectsSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated organization projects setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the organization projects setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */\nexport type UpdateEnterpriseOwnerOrganizationRoleInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the Enterprise which the owner belongs to. */\n  enterpriseId: Scalars['ID'];\n  /** The ID of the organization for membership change. */\n  organizationId: Scalars['ID'];\n  /** The role to assume in the organization. */\n  organizationRole: RoleInOrganization;\n};\n\n/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole */\nexport type UpdateEnterpriseOwnerOrganizationRolePayload = {\n  __typename?: 'UpdateEnterpriseOwnerOrganizationRolePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** A message confirming the result of changing the owner's organization role. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseProfile */\nexport type UpdateEnterpriseProfileInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The description of the enterprise. */\n  description?: InputMaybe<Scalars['String']>;\n  /** The Enterprise ID to update. */\n  enterpriseId: Scalars['ID'];\n  /** The location of the enterprise. */\n  location?: InputMaybe<Scalars['String']>;\n  /** The name of the enterprise. */\n  name?: InputMaybe<Scalars['String']>;\n  /** The URL of the enterprise's website. */\n  websiteUrl?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateEnterpriseProfile */\nexport type UpdateEnterpriseProfilePayload = {\n  __typename?: 'UpdateEnterpriseProfilePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated enterprise. */\n  enterprise?: Maybe<Enterprise>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */\nexport type UpdateEnterpriseRepositoryProjectsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the repository projects setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the repository projects setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */\nexport type UpdateEnterpriseRepositoryProjectsSettingPayload = {\n  __typename?: 'UpdateEnterpriseRepositoryProjectsSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated repository projects setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the repository projects setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */\nexport type UpdateEnterpriseTeamDiscussionsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the team discussions setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the team discussions setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */\nexport type UpdateEnterpriseTeamDiscussionsSettingPayload = {\n  __typename?: 'UpdateEnterpriseTeamDiscussionsSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated team discussions setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the team discussions setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */\nexport type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the enterprise on which to set the two factor authentication required setting. */\n  enterpriseId: Scalars['ID'];\n  /** The value for the two factor authentication required setting on the enterprise. */\n  settingValue: EnterpriseEnabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */\nexport type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload = {\n  __typename?: 'UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The enterprise with the updated two factor authentication required setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the two factor authentication required setting. */\n  message?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateEnvironment */\nexport type UpdateEnvironmentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The node ID of the environment. */\n  environmentId: Scalars['ID'];\n  /** The ids of users or teams that can approve deployments to this environment */\n  reviewers?: InputMaybe<Array<Scalars['ID']>>;\n  /** The wait timer in minutes. */\n  waitTimer?: InputMaybe<Scalars['Int']>;\n};\n\n/** Autogenerated return type of UpdateEnvironment */\nexport type UpdateEnvironmentPayload = {\n  __typename?: 'UpdateEnvironmentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated environment. */\n  environment?: Maybe<Environment>;\n};\n\n/** Autogenerated input type of UpdateIpAllowListEnabledSetting */\nexport type UpdateIpAllowListEnabledSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the owner on which to set the IP allow list enabled setting. */\n  ownerId: Scalars['ID'];\n  /** The value for the IP allow list enabled setting. */\n  settingValue: IpAllowListEnabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateIpAllowListEnabledSetting */\nexport type UpdateIpAllowListEnabledSettingPayload = {\n  __typename?: 'UpdateIpAllowListEnabledSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The IP allow list owner on which the setting was updated. */\n  owner?: Maybe<IpAllowListOwner>;\n};\n\n/** Autogenerated input type of UpdateIpAllowListEntry */\nexport type UpdateIpAllowListEntryInput = {\n  /** An IP address or range of addresses in CIDR notation. */\n  allowListValue: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the IP allow list entry to update. */\n  ipAllowListEntryId: Scalars['ID'];\n  /** Whether the IP allow list entry is active when an IP allow list is enabled. */\n  isActive: Scalars['Boolean'];\n  /** An optional name for the IP allow list entry. */\n  name?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateIpAllowListEntry */\nexport type UpdateIpAllowListEntryPayload = {\n  __typename?: 'UpdateIpAllowListEntryPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The IP allow list entry that was updated. */\n  ipAllowListEntry?: Maybe<IpAllowListEntry>;\n};\n\n/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */\nexport type UpdateIpAllowListForInstalledAppsEnabledSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the owner. */\n  ownerId: Scalars['ID'];\n  /** The value for the IP allow list configuration for installed GitHub Apps setting. */\n  settingValue: IpAllowListForInstalledAppsEnabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting */\nexport type UpdateIpAllowListForInstalledAppsEnabledSettingPayload = {\n  __typename?: 'UpdateIpAllowListForInstalledAppsEnabledSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The IP allow list owner on which the setting was updated. */\n  owner?: Maybe<IpAllowListOwner>;\n};\n\n/** Autogenerated input type of UpdateIssueComment */\nexport type UpdateIssueCommentInput = {\n  /** The updated text of the comment. */\n  body: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the IssueComment to modify. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of UpdateIssueComment */\nexport type UpdateIssueCommentPayload = {\n  __typename?: 'UpdateIssueCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated comment. */\n  issueComment?: Maybe<IssueComment>;\n};\n\n/** Autogenerated input type of UpdateIssue */\nexport type UpdateIssueInput = {\n  /** An array of Node IDs of users for this issue. */\n  assigneeIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** The body for the issue description. */\n  body?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the Issue to modify. */\n  id: Scalars['ID'];\n  /** An array of Node IDs of labels for this issue. */\n  labelIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** The Node ID of the milestone for this issue. */\n  milestoneId?: InputMaybe<Scalars['ID']>;\n  /** An array of Node IDs for projects associated with this issue. */\n  projectIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** The desired issue state. */\n  state?: InputMaybe<IssueState>;\n  /** The title for the issue. */\n  title?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateIssue */\nexport type UpdateIssuePayload = {\n  __typename?: 'UpdateIssuePayload';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The issue. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of UpdateNotificationRestrictionSetting */\nexport type UpdateNotificationRestrictionSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the owner on which to set the restrict notifications setting. */\n  ownerId: Scalars['ID'];\n  /** The value for the restrict notifications setting. */\n  settingValue: NotificationRestrictionSettingValue;\n};\n\n/** Autogenerated return type of UpdateNotificationRestrictionSetting */\nexport type UpdateNotificationRestrictionSettingPayload = {\n  __typename?: 'UpdateNotificationRestrictionSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The owner on which the setting was updated. */\n  owner?: Maybe<VerifiableDomainOwner>;\n};\n\n/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */\nexport type UpdateOrganizationAllowPrivateRepositoryForkingSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Enable forking of private repositories in the organization? */\n  forkingEnabled: Scalars['Boolean'];\n  /** The ID of the organization on which to set the allow private repository forking setting. */\n  organizationId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */\nexport type UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload = {\n  __typename?: 'UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** A message confirming the result of updating the allow private repository forking setting. */\n  message?: Maybe<Scalars['String']>;\n  /** The organization with the updated allow private repository forking setting. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of UpdateProjectCard */\nexport type UpdateProjectCardInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Whether or not the ProjectCard should be archived */\n  isArchived?: InputMaybe<Scalars['Boolean']>;\n  /** The note of ProjectCard. */\n  note?: InputMaybe<Scalars['String']>;\n  /** The ProjectCard ID to update. */\n  projectCardId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UpdateProjectCard */\nexport type UpdateProjectCardPayload = {\n  __typename?: 'UpdateProjectCardPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated ProjectCard. */\n  projectCard?: Maybe<ProjectCard>;\n};\n\n/** Autogenerated input type of UpdateProjectColumn */\nexport type UpdateProjectColumnInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The name of project column. */\n  name: Scalars['String'];\n  /** The ProjectColumn ID to update. */\n  projectColumnId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UpdateProjectColumn */\nexport type UpdateProjectColumnPayload = {\n  __typename?: 'UpdateProjectColumnPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated project column. */\n  projectColumn?: Maybe<ProjectColumn>;\n};\n\n/** Autogenerated input type of UpdateProject */\nexport type UpdateProjectInput = {\n  /** The description of project. */\n  body?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The name of project. */\n  name?: InputMaybe<Scalars['String']>;\n  /** The Project ID to update. */\n  projectId: Scalars['ID'];\n  /** Whether the project is public or not. */\n  public?: InputMaybe<Scalars['Boolean']>;\n  /** Whether the project is open or closed. */\n  state?: InputMaybe<ProjectState>;\n};\n\n/** Autogenerated input type of UpdateProjectNext */\nexport type UpdateProjectNextInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Set the project to closed or open. */\n  closed?: InputMaybe<Scalars['Boolean']>;\n  /** Set the readme description of the project. */\n  description?: InputMaybe<Scalars['String']>;\n  /** The ID of the Project to update. */\n  projectId: Scalars['ID'];\n  /** Set the project to public or private. */\n  public?: InputMaybe<Scalars['Boolean']>;\n  /** Set the short description of the project. */\n  shortDescription?: InputMaybe<Scalars['String']>;\n  /** Set the title of the project. */\n  title?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateProjectNextItemField */\nexport type UpdateProjectNextItemFieldInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The id of the field to be updated. */\n  fieldId?: InputMaybe<Scalars['ID']>;\n  /** The id of the item to be updated. */\n  itemId: Scalars['ID'];\n  /** The ID of the Project. */\n  projectId: Scalars['ID'];\n  /** The value which will be set on the field. */\n  value: Scalars['String'];\n};\n\n/** Autogenerated return type of UpdateProjectNextItemField */\nexport type UpdateProjectNextItemFieldPayload = {\n  __typename?: 'UpdateProjectNextItemFieldPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated item. */\n  projectNextItem?: Maybe<ProjectNextItem>;\n};\n\n/** Autogenerated return type of UpdateProjectNext */\nexport type UpdateProjectNextPayload = {\n  __typename?: 'UpdateProjectNextPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated Project. */\n  projectNext?: Maybe<ProjectNext>;\n};\n\n/** Autogenerated return type of UpdateProject */\nexport type UpdateProjectPayload = {\n  __typename?: 'UpdateProjectPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated project. */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of UpdatePullRequestBranch */\nexport type UpdatePullRequestBranchInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The head ref oid for the upstream branch. */\n  expectedHeadOid?: InputMaybe<Scalars['GitObjectID']>;\n  /** The Node ID of the pull request. */\n  pullRequestId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UpdatePullRequestBranch */\nexport type UpdatePullRequestBranchPayload = {\n  __typename?: 'UpdatePullRequestBranchPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of UpdatePullRequest */\nexport type UpdatePullRequestInput = {\n  /** An array of Node IDs of users for this pull request. */\n  assigneeIds?: InputMaybe<Array<Scalars['ID']>>;\n  /**\n   * The name of the branch you want your changes pulled into. This should be an existing branch\n   * on the current repository.\n   *\n   */\n  baseRefName?: InputMaybe<Scalars['String']>;\n  /** The contents of the pull request. */\n  body?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** An array of Node IDs of labels for this pull request. */\n  labelIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** Indicates whether maintainers can modify the pull request. */\n  maintainerCanModify?: InputMaybe<Scalars['Boolean']>;\n  /** The Node ID of the milestone for this pull request. */\n  milestoneId?: InputMaybe<Scalars['ID']>;\n  /** An array of Node IDs for projects associated with this pull request. */\n  projectIds?: InputMaybe<Array<Scalars['ID']>>;\n  /** The Node ID of the pull request. */\n  pullRequestId: Scalars['ID'];\n  /** The target state of the pull request. */\n  state?: InputMaybe<PullRequestUpdateState>;\n  /** The title of the pull request. */\n  title?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdatePullRequest */\nexport type UpdatePullRequestPayload = {\n  __typename?: 'UpdatePullRequestPayload';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of UpdatePullRequestReviewComment */\nexport type UpdatePullRequestReviewCommentInput = {\n  /** The text of the comment. */\n  body: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the comment to modify. */\n  pullRequestReviewCommentId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UpdatePullRequestReviewComment */\nexport type UpdatePullRequestReviewCommentPayload = {\n  __typename?: 'UpdatePullRequestReviewCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated comment. */\n  pullRequestReviewComment?: Maybe<PullRequestReviewComment>;\n};\n\n/** Autogenerated input type of UpdatePullRequestReview */\nexport type UpdatePullRequestReviewInput = {\n  /** The contents of the pull request review body. */\n  body: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the pull request review to modify. */\n  pullRequestReviewId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UpdatePullRequestReview */\nexport type UpdatePullRequestReviewPayload = {\n  __typename?: 'UpdatePullRequestReviewPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** Autogenerated input type of UpdateRef */\nexport type UpdateRefInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Permit updates of branch Refs that are not fast-forwards? */\n  force?: InputMaybe<Scalars['Boolean']>;\n  /** The GitObjectID that the Ref shall be updated to target. */\n  oid: Scalars['GitObjectID'];\n  /** The Node ID of the Ref to be updated. */\n  refId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UpdateRef */\nexport type UpdateRefPayload = {\n  __typename?: 'UpdateRefPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated Ref. */\n  ref?: Maybe<Ref>;\n};\n\n/** Autogenerated input type of UpdateRepository */\nexport type UpdateRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** A new description for the repository. Pass an empty string to erase the existing description. */\n  description?: InputMaybe<Scalars['String']>;\n  /** Indicates if the repository should have the issues feature enabled. */\n  hasIssuesEnabled?: InputMaybe<Scalars['Boolean']>;\n  /** Indicates if the repository should have the project boards feature enabled. */\n  hasProjectsEnabled?: InputMaybe<Scalars['Boolean']>;\n  /** Indicates if the repository should have the wiki feature enabled. */\n  hasWikiEnabled?: InputMaybe<Scalars['Boolean']>;\n  /** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */\n  homepageUrl?: InputMaybe<Scalars['URI']>;\n  /** The new name of the repository. */\n  name?: InputMaybe<Scalars['String']>;\n  /** The ID of the repository to update. */\n  repositoryId: Scalars['ID'];\n  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */\n  template?: InputMaybe<Scalars['Boolean']>;\n};\n\n/** Autogenerated return type of UpdateRepository */\nexport type UpdateRepositoryPayload = {\n  __typename?: 'UpdateRepositoryPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of UpdateSponsorshipPreferences */\nexport type UpdateSponsorshipPreferencesInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */\n  privacyLevel?: InputMaybe<SponsorshipPrivacy>;\n  /** Whether the sponsor should receive email updates from the sponsorable. */\n  receiveEmails?: InputMaybe<Scalars['Boolean']>;\n  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */\n  sponsorId?: InputMaybe<Scalars['ID']>;\n  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */\n  sponsorLogin?: InputMaybe<Scalars['String']>;\n  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */\n  sponsorableId?: InputMaybe<Scalars['ID']>;\n  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */\n  sponsorableLogin?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateSponsorshipPreferences */\nexport type UpdateSponsorshipPreferencesPayload = {\n  __typename?: 'UpdateSponsorshipPreferencesPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The sponsorship that was updated. */\n  sponsorship?: Maybe<Sponsorship>;\n};\n\n/** Autogenerated input type of UpdateSubscription */\nexport type UpdateSubscriptionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The new state of the subscription. */\n  state: SubscriptionState;\n  /** The Node ID of the subscribable object to modify. */\n  subscribableId: Scalars['ID'];\n};\n\n/** Autogenerated return type of UpdateSubscription */\nexport type UpdateSubscriptionPayload = {\n  __typename?: 'UpdateSubscriptionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The input subscribable entity. */\n  subscribable?: Maybe<Subscribable>;\n};\n\n/** Autogenerated input type of UpdateTeamDiscussionComment */\nexport type UpdateTeamDiscussionCommentInput = {\n  /** The updated text of the comment. */\n  body: Scalars['String'];\n  /** The current version of the body content. */\n  bodyVersion?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the comment to modify. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of UpdateTeamDiscussionComment */\nexport type UpdateTeamDiscussionCommentPayload = {\n  __typename?: 'UpdateTeamDiscussionCommentPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated comment. */\n  teamDiscussionComment?: Maybe<TeamDiscussionComment>;\n};\n\n/** Autogenerated input type of UpdateTeamDiscussion */\nexport type UpdateTeamDiscussionInput = {\n  /** The updated text of the discussion. */\n  body?: InputMaybe<Scalars['String']>;\n  /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */\n  bodyVersion?: InputMaybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the discussion to modify. */\n  id: Scalars['ID'];\n  /** If provided, sets the pinned state of the updated discussion. */\n  pinned?: InputMaybe<Scalars['Boolean']>;\n  /** The updated title of the discussion. */\n  title?: InputMaybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateTeamDiscussion */\nexport type UpdateTeamDiscussionPayload = {\n  __typename?: 'UpdateTeamDiscussionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The updated discussion. */\n  teamDiscussion?: Maybe<TeamDiscussion>;\n};\n\n/** Autogenerated input type of UpdateTopics */\nexport type UpdateTopicsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID'];\n  /** An array of topic names. */\n  topicNames: Array<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateTopics */\nexport type UpdateTopicsPayload = {\n  __typename?: 'UpdateTopicsPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** Names of the provided topics that are not valid. */\n  invalidTopicNames?: Maybe<Array<Scalars['String']>>;\n  /** The updated repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type User = Actor & Node & PackageOwner & ProfileOwner & ProjectNextOwner & ProjectOwner & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable & {\n  __typename?: 'User';\n  /** Determine if this repository owner has any items that can be pinned to their profile. */\n  anyPinnableItems: Scalars['Boolean'];\n  /** A URL pointing to the user's public avatar. */\n  avatarUrl: Scalars['URI'];\n  /** The user's public profile bio. */\n  bio?: Maybe<Scalars['String']>;\n  /** The user's public profile bio as HTML. */\n  bioHTML: Scalars['HTML'];\n  /** Could this user receive email notifications, if the organization had notification restrictions enabled? */\n  canReceiveOrganizationEmailsWhenNotificationsRestricted: Scalars['Boolean'];\n  /** A list of commit comments made by this user. */\n  commitComments: CommitCommentConnection;\n  /** The user's public profile company. */\n  company?: Maybe<Scalars['String']>;\n  /** The user's public profile company as HTML. */\n  companyHTML: Scalars['HTML'];\n  /** The collection of contributions this user has made to different repositories. */\n  contributionsCollection: ContributionsCollection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The user's publicly visible profile email. */\n  email: Scalars['String'];\n  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */\n  estimatedNextSponsorsPayoutInCents: Scalars['Int'];\n  /** A list of users the given user is followed by. */\n  followers: FollowerConnection;\n  /** A list of users the given user is following. */\n  following: FollowingConnection;\n  /** Find gist by repo name. */\n  gist?: Maybe<Gist>;\n  /** A list of gist comments made by this user. */\n  gistComments: GistCommentConnection;\n  /** A list of the Gists the user has created. */\n  gists: GistConnection;\n  /** True if this user/organization has a GitHub Sponsors listing. */\n  hasSponsorsListing: Scalars['Boolean'];\n  /** The hovercard information for this user in a given context */\n  hovercard: Hovercard;\n  id: Scalars['ID'];\n  /** The interaction ability settings for this user. */\n  interactionAbility?: Maybe<RepositoryInteractionAbility>;\n  /** Whether or not this user is a participant in the GitHub Security Bug Bounty. */\n  isBountyHunter: Scalars['Boolean'];\n  /** Whether or not this user is a participant in the GitHub Campus Experts Program. */\n  isCampusExpert: Scalars['Boolean'];\n  /** Whether or not this user is a GitHub Developer Program member. */\n  isDeveloperProgramMember: Scalars['Boolean'];\n  /** Whether or not this user is a GitHub employee. */\n  isEmployee: Scalars['Boolean'];\n  /** Whether or not this user is following the viewer. Inverse of viewer_is_following */\n  isFollowingViewer: Scalars['Boolean'];\n  /** Whether or not this user is a member of the GitHub Stars Program. */\n  isGitHubStar: Scalars['Boolean'];\n  /** Whether or not the user has marked themselves as for hire. */\n  isHireable: Scalars['Boolean'];\n  /** Whether or not this user is a site administrator. */\n  isSiteAdmin: Scalars['Boolean'];\n  /** Check if the given account is sponsoring this user/organization. */\n  isSponsoredBy: Scalars['Boolean'];\n  /** True if the viewer is sponsored by this user/organization. */\n  isSponsoringViewer: Scalars['Boolean'];\n  /** Whether or not this user is the viewing user. */\n  isViewer: Scalars['Boolean'];\n  /** A list of issue comments made by this user. */\n  issueComments: IssueCommentConnection;\n  /** A list of issues associated with this user. */\n  issues: IssueConnection;\n  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */\n  itemShowcase: ProfileItemShowcase;\n  /** The user's public profile location. */\n  location?: Maybe<Scalars['String']>;\n  /** The username used to login. */\n  login: Scalars['String'];\n  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */\n  monthlyEstimatedSponsorsIncomeInCents: Scalars['Int'];\n  /** The user's public profile name. */\n  name?: Maybe<Scalars['String']>;\n  /** Find an organization by its login that the user belongs to. */\n  organization?: Maybe<Organization>;\n  /** Verified email addresses that match verified domains for a specified organization the user is a member of. */\n  organizationVerifiedDomainEmails: Array<Scalars['String']>;\n  /** A list of organizations the user belongs to. */\n  organizations: OrganizationConnection;\n  /** A list of packages under the owner. */\n  packages: PackageConnection;\n  /** A list of repositories and gists this profile owner can pin to their profile. */\n  pinnableItems: PinnableItemConnection;\n  /** A list of repositories and gists this profile owner has pinned to their profile */\n  pinnedItems: PinnableItemConnection;\n  /** Returns how many more items this profile owner can pin to their profile. */\n  pinnedItemsRemaining: Scalars['Int'];\n  /** Find project by number. */\n  project?: Maybe<Project>;\n  /** Find a project by project (beta) number. */\n  projectNext?: Maybe<ProjectNext>;\n  /** A list of projects under the owner. */\n  projects: ProjectConnection;\n  /** A list of projects (beta) under the owner. */\n  projectsNext: ProjectNextConnection;\n  /** The HTTP path listing user's projects */\n  projectsResourcePath: Scalars['URI'];\n  /** The HTTP URL listing user's projects */\n  projectsUrl: Scalars['URI'];\n  /** A list of public keys associated with this user. */\n  publicKeys: PublicKeyConnection;\n  /** A list of pull requests associated with this user. */\n  pullRequests: PullRequestConnection;\n  /** A list of repositories that the user owns. */\n  repositories: RepositoryConnection;\n  /** A list of repositories that the user recently contributed to. */\n  repositoriesContributedTo: RepositoryConnection;\n  /** Find Repository. */\n  repository?: Maybe<Repository>;\n  /** Discussion comments this user has authored. */\n  repositoryDiscussionComments: DiscussionCommentConnection;\n  /** Discussions this user has started. */\n  repositoryDiscussions: DiscussionConnection;\n  /** The HTTP path for this user */\n  resourcePath: Scalars['URI'];\n  /** Replies this user has saved */\n  savedReplies?: Maybe<SavedReplyConnection>;\n  /** List of users and organizations this entity is sponsoring. */\n  sponsoring: SponsorConnection;\n  /** List of sponsors for this user or organization. */\n  sponsors: SponsorConnection;\n  /** Events involving this sponsorable, such as new sponsorships. */\n  sponsorsActivities: SponsorsActivityConnection;\n  /** The GitHub Sponsors listing for this user or organization. */\n  sponsorsListing?: Maybe<SponsorsListing>;\n  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */\n  sponsorshipForViewerAsSponsor?: Maybe<Sponsorship>;\n  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. */\n  sponsorshipForViewerAsSponsorable?: Maybe<Sponsorship>;\n  /** List of sponsorship updates sent from this sponsorable to sponsors. */\n  sponsorshipNewsletters: SponsorshipNewsletterConnection;\n  /** This object's sponsorships as the maintainer. */\n  sponsorshipsAsMaintainer: SponsorshipConnection;\n  /** This object's sponsorships as the sponsor. */\n  sponsorshipsAsSponsor: SponsorshipConnection;\n  /** Repositories the user has starred. */\n  starredRepositories: StarredRepositoryConnection;\n  /** The user's description of what they're currently doing. */\n  status?: Maybe<UserStatus>;\n  /**\n   * Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created\n   *\n   */\n  topRepositories: RepositoryConnection;\n  /** The user's Twitter username. */\n  twitterUsername?: Maybe<Scalars['String']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this user */\n  url: Scalars['URI'];\n  /** Can the viewer pin repositories and gists to the profile? */\n  viewerCanChangePinnedItems: Scalars['Boolean'];\n  /** Can the current viewer create new projects on this owner. */\n  viewerCanCreateProjects: Scalars['Boolean'];\n  /** Whether or not the viewer is able to follow the user. */\n  viewerCanFollow: Scalars['Boolean'];\n  /** Whether or not the viewer is able to sponsor this user/organization. */\n  viewerCanSponsor: Scalars['Boolean'];\n  /** Whether or not this user is followed by the viewer. Inverse of is_following_viewer. */\n  viewerIsFollowing: Scalars['Boolean'];\n  /** True if the viewer is sponsoring this user/organization. */\n  viewerIsSponsoring: Scalars['Boolean'];\n  /** A list of repositories the given user is watching. */\n  watching: RepositoryConnection;\n  /** A URL pointing to the user's public website/blog. */\n  websiteUrl?: Maybe<Scalars['URI']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserAnyPinnableItemsArgs = {\n  type?: InputMaybe<PinnableItemType>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserCanReceiveOrganizationEmailsWhenNotificationsRestrictedArgs = {\n  login: Scalars['String'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserCommitCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserContributionsCollectionArgs = {\n  from?: InputMaybe<Scalars['DateTime']>;\n  organizationID?: InputMaybe<Scalars['ID']>;\n  to?: InputMaybe<Scalars['DateTime']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserFollowersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserFollowingArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserGistArgs = {\n  name: Scalars['String'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserGistCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserGistsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GistOrder>;\n  privacy?: InputMaybe<GistPrivacy>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserHovercardArgs = {\n  primarySubjectId?: InputMaybe<Scalars['ID']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserIsSponsoredByArgs = {\n  accountLogin: Scalars['String'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserIssueCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueCommentOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserIssuesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  filterBy?: InputMaybe<IssueFilters>;\n  first?: InputMaybe<Scalars['Int']>;\n  labels?: InputMaybe<Array<Scalars['String']>>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<IssueState>>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserOrganizationArgs = {\n  login: Scalars['String'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserOrganizationVerifiedDomainEmailsArgs = {\n  login: Scalars['String'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPackagesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  names?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  orderBy?: InputMaybe<PackageOrder>;\n  packageType?: InputMaybe<PackageType>;\n  repositoryId?: InputMaybe<Scalars['ID']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPinnableItemsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPinnedItemsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserProjectArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserProjectNextArgs = {\n  number: Scalars['Int'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserProjectsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ProjectOrder>;\n  search?: InputMaybe<Scalars['String']>;\n  states?: InputMaybe<Array<ProjectState>>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserProjectsNextArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  query?: InputMaybe<Scalars['String']>;\n  sortBy?: InputMaybe<ProjectNextOrderField>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPublicKeysArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  baseRefName?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  headRefName?: InputMaybe<Scalars['String']>;\n  labels?: InputMaybe<Array<Scalars['String']>>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoriesArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  isFork?: InputMaybe<Scalars['Boolean']>;\n  isLocked?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoriesContributedToArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  contributionTypes?: InputMaybe<Array<InputMaybe<RepositoryContributionType>>>;\n  first?: InputMaybe<Scalars['Int']>;\n  includeUserRepositories?: InputMaybe<Scalars['Boolean']>;\n  isLocked?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoryArgs = {\n  followRenames?: InputMaybe<Scalars['Boolean']>;\n  name: Scalars['String'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoryDiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  onlyAnswers?: InputMaybe<Scalars['Boolean']>;\n  repositoryId?: InputMaybe<Scalars['ID']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoryDiscussionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  answered?: InputMaybe<Scalars['Boolean']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<DiscussionOrder>;\n  repositoryId?: InputMaybe<Scalars['ID']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSavedRepliesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SavedReplyOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsoringArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorOrder>;\n  tierId?: InputMaybe<Scalars['ID']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorsActivitiesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorsActivityOrder>;\n  period?: InputMaybe<SponsorsActivityPeriod>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorshipNewslettersArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorshipNewsletterOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorshipsAsMaintainerArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  includePrivate?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorshipsAsSponsorArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserStarredRepositoriesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<StarOrder>;\n  ownedByViewer?: InputMaybe<Scalars['Boolean']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserTopRepositoriesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy: RepositoryOrder;\n  since?: InputMaybe<Scalars['DateTime']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserWatchingArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  isLocked?: InputMaybe<Scalars['Boolean']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n/** The possible durations that a user can be blocked for. */\nexport enum UserBlockDuration {\n  /** The user was blocked for 1 day */\n  OneDay = 'ONE_DAY',\n  /** The user was blocked for 30 days */\n  OneMonth = 'ONE_MONTH',\n  /** The user was blocked for 7 days */\n  OneWeek = 'ONE_WEEK',\n  /** The user was blocked permanently */\n  Permanent = 'PERMANENT',\n  /** The user was blocked for 3 days */\n  ThreeDays = 'THREE_DAYS'\n}\n\n/** Represents a 'user_blocked' event on a given user. */\nexport type UserBlockedEvent = Node & {\n  __typename?: 'UserBlockedEvent';\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Number of days that the user was blocked for. */\n  blockDuration: UserBlockDuration;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  id: Scalars['ID'];\n  /** The user who was blocked. */\n  subject?: Maybe<User>;\n};\n\n/** The connection type for User. */\nexport type UserConnection = {\n  __typename?: 'UserConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edit on user content */\nexport type UserContentEdit = Node & {\n  __typename?: 'UserContentEdit';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the date and time when the object was deleted. */\n  deletedAt?: Maybe<Scalars['DateTime']>;\n  /** The actor who deleted this content */\n  deletedBy?: Maybe<Actor>;\n  /** A summary of the changes for this edit */\n  diff?: Maybe<Scalars['String']>;\n  /** When this content was edited */\n  editedAt: Scalars['DateTime'];\n  /** The actor who edited this content */\n  editor?: Maybe<Actor>;\n  id: Scalars['ID'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** A list of edits to content. */\nexport type UserContentEditConnection = {\n  __typename?: 'UserContentEditConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserContentEditEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<UserContentEdit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type UserContentEditEdge = {\n  __typename?: 'UserContentEditEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<UserContentEdit>;\n};\n\n/** Represents a user. */\nexport type UserEdge = {\n  __typename?: 'UserEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n};\n\n/** Email attributes from External Identity */\nexport type UserEmailMetadata = {\n  __typename?: 'UserEmailMetadata';\n  /** Boolean to identify primary emails */\n  primary?: Maybe<Scalars['Boolean']>;\n  /** Type of email */\n  type?: Maybe<Scalars['String']>;\n  /** Email id */\n  value: Scalars['String'];\n};\n\n/** The user's description of what they're currently doing. */\nexport type UserStatus = Node & {\n  __typename?: 'UserStatus';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** An emoji summarizing the user's status. */\n  emoji?: Maybe<Scalars['String']>;\n  /** The status emoji as HTML. */\n  emojiHTML?: Maybe<Scalars['HTML']>;\n  /** If set, the status will not be shown after this date. */\n  expiresAt?: Maybe<Scalars['DateTime']>;\n  id: Scalars['ID'];\n  /** Whether this status indicates the user is not fully available on GitHub. */\n  indicatesLimitedAvailability: Scalars['Boolean'];\n  /** A brief message describing what the user is doing. */\n  message?: Maybe<Scalars['String']>;\n  /** The organization whose members can see this status. If null, this status is publicly visible. */\n  organization?: Maybe<Organization>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The user who has this status. */\n  user: User;\n};\n\n/** The connection type for UserStatus. */\nexport type UserStatusConnection = {\n  __typename?: 'UserStatusConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserStatusEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<UserStatus>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type UserStatusEdge = {\n  __typename?: 'UserStatusEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<UserStatus>;\n};\n\n/** Ordering options for user status connections. */\nexport type UserStatusOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order user statuses by. */\n  field: UserStatusOrderField;\n};\n\n/** Properties by which user status connections can be ordered. */\nexport enum UserStatusOrderField {\n  /** Order user statuses by when they were updated. */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** A domain that can be verified or approved for an organization or an enterprise. */\nexport type VerifiableDomain = Node & {\n  __typename?: 'VerifiableDomain';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The DNS host name that should be used for verification. */\n  dnsHostName?: Maybe<Scalars['URI']>;\n  /** The unicode encoded domain. */\n  domain: Scalars['URI'];\n  /** Whether a TXT record for verification with the expected host name was found. */\n  hasFoundHostName: Scalars['Boolean'];\n  /** Whether a TXT record for verification with the expected verification token was found. */\n  hasFoundVerificationToken: Scalars['Boolean'];\n  id: Scalars['ID'];\n  /** Whether or not the domain is approved. */\n  isApproved: Scalars['Boolean'];\n  /** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */\n  isRequiredForPolicyEnforcement: Scalars['Boolean'];\n  /** Whether or not the domain is verified. */\n  isVerified: Scalars['Boolean'];\n  /** The owner of the domain. */\n  owner: VerifiableDomainOwner;\n  /** The punycode encoded domain. */\n  punycodeEncodedDomain: Scalars['URI'];\n  /** The time that the current verification token will expire. */\n  tokenExpirationTime?: Maybe<Scalars['DateTime']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The current verification token for the domain. */\n  verificationToken?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for VerifiableDomain. */\nexport type VerifiableDomainConnection = {\n  __typename?: 'VerifiableDomainConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VerifiableDomainEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<VerifiableDomain>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type VerifiableDomainEdge = {\n  __typename?: 'VerifiableDomainEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<VerifiableDomain>;\n};\n\n/** Ordering options for verifiable domain connections. */\nexport type VerifiableDomainOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order verifiable domains by. */\n  field: VerifiableDomainOrderField;\n};\n\n/** Properties by which verifiable domain connections can be ordered. */\nexport enum VerifiableDomainOrderField {\n  /** Order verifiable domains by their creation date. */\n  CreatedAt = 'CREATED_AT',\n  /** Order verifiable domains by the domain name. */\n  Domain = 'DOMAIN'\n}\n\n/** Types that can own a verifiable domain. */\nexport type VerifiableDomainOwner = Enterprise | Organization;\n\n/** Autogenerated input type of VerifyVerifiableDomain */\nexport type VerifyVerifiableDomainInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']>;\n  /** The ID of the verifiable domain to verify. */\n  id: Scalars['ID'];\n};\n\n/** Autogenerated return type of VerifyVerifiableDomain */\nexport type VerifyVerifiableDomainPayload = {\n  __typename?: 'VerifyVerifiableDomainPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  /** The verifiable domain that was verified. */\n  domain?: Maybe<VerifiableDomain>;\n};\n\n/** A hovercard context with a message describing how the viewer is related. */\nexport type ViewerHovercardContext = HovercardContext & {\n  __typename?: 'ViewerHovercardContext';\n  /** A string describing this context */\n  message: Scalars['String'];\n  /** An octicon to accompany this context */\n  octicon: Scalars['String'];\n  /** Identifies the user who is related to this context. */\n  viewer: User;\n};\n\n/** A subject that may be upvoted. */\nexport type Votable = {\n  /** Number of upvotes that this subject has received. */\n  upvoteCount: Scalars['Int'];\n  /** Whether or not the current user can add or remove an upvote on this subject. */\n  viewerCanUpvote: Scalars['Boolean'];\n  /** Whether or not the current user has already upvoted this subject. */\n  viewerHasUpvoted: Scalars['Boolean'];\n};\n\n/** A workflow contains meta information about an Actions workflow file. */\nexport type Workflow = Node & {\n  __typename?: 'Workflow';\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  /** The name of the workflow. */\n  name: Scalars['String'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n};\n\n/** A workflow run. */\nexport type WorkflowRun = Node & {\n  __typename?: 'WorkflowRun';\n  /** The check suite this workflow run belongs to. */\n  checkSuite: CheckSuite;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']>;\n  /** The log of deployment reviews */\n  deploymentReviews: DeploymentReviewConnection;\n  id: Scalars['ID'];\n  /** The pending deployment requests of all check runs in this workflow run */\n  pendingDeploymentRequests: DeploymentRequestConnection;\n  /** The HTTP path for this workflow run */\n  resourcePath: Scalars['URI'];\n  /** A number that uniquely identifies this workflow run in its parent workflow. */\n  runNumber: Scalars['Int'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime'];\n  /** The HTTP URL for this workflow run */\n  url: Scalars['URI'];\n  /** The workflow executed in this workflow run. */\n  workflow: Workflow;\n};\n\n\n/** A workflow run. */\nexport type WorkflowRunDeploymentReviewsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A workflow run. */\nexport type WorkflowRunPendingDeploymentRequestsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\nexport type UserReposQueryVariables = Exact<{\n  username: Scalars['String'];\n}>;\n\n\nexport type UserReposQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, login: string, name?: string | null, bio?: string | null, avatarUrl: string, starredRepositories: { __typename?: 'StarredRepositoryConnection', nodes?: Array<{ __typename?: 'Repository', id: string, name: string, isInOrganization: boolean, owner: { __typename?: 'Organization', id: string, login: string } | { __typename?: 'User', id: string, login: string } } | null> | null } } | null };\n\n\nexport const UserReposDocument = gql`\n    query UserRepos($username: String!) {\n  user(login: $username) {\n    id\n    login\n    name\n    bio\n    avatarUrl(size: 100)\n    starredRepositories(first: 100) {\n      nodes {\n        id\n        name\n        isInOrganization\n        owner {\n          id\n          login\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useUserReposQuery__\n *\n * To run a query within a React component, call `useUserReposQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserReposQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserReposQuery({\n *   variables: {\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function useUserReposQuery(baseOptions: Apollo.QueryHookOptions<UserReposQuery, UserReposQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UserReposQuery, UserReposQueryVariables>(UserReposDocument, options);\n      }\nexport function useUserReposLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserReposQuery, UserReposQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UserReposQuery, UserReposQueryVariables>(UserReposDocument, options);\n        }\nexport type UserReposQueryHookResult = ReturnType<typeof useUserReposQuery>;\nexport type UserReposLazyQueryHookResult = ReturnType<typeof useUserReposLazyQuery>;\nexport type UserReposQueryResult = Apollo.QueryResult<UserReposQuery, UserReposQueryVariables>;","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import React from 'react';\nimport { useReactiveVar } from '@apollo/client';\nimport { usernameVar, userVar } from '../apollo';\nimport { useUserReposLazyQuery } from '../generated/graphql';\n\nfunction Search(): React.ReactElement {\n  const user = useReactiveVar(userVar);\n  const username = useReactiveVar(usernameVar);\n  const [getUserRepos] = useUserReposLazyQuery();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => usernameVar(e.target.value);\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    try {\n      const res = await getUserRepos({ variables: { username } });\n      if (!res?.data?.user) {\n        alert('사용자를 찾을 수 없습니다. ');\n        usernameVar('');\n        return;\n      }\n      userVar(res?.data?.user);\n    } catch (error) {\n      alert('오류가 발생했습니다. 잠시 후 다시 시도해주세요. ');\n      usernameVar('');\n      console.log(error);\n    }\n  };\n\n  return (\n    <section className=\"absolute top-8 left-10 rounded-lg bg-white px-6  pt-2 pb-4 shadow-lg first-letter:space-y-4\">\n      <form className=\"flex items-center space-x-2\" onSubmit={handleSubmit}>\n        <input\n          className=\"border-b border-gray-200 px-1 py-2 placeholder:text-base focus:outline-none focus:ring-0\"\n          placeholder=\"Github 아이디 검색\"\n          value={username}\n          onChange={handleChange}\n        />\n        <button type=\"submit\" className=\"text-gray-500\">\n          ⏎\n        </button>\n      </form>\n      {user && (\n        <>\n          <div className=\"mt-4 flex items-center space-x-4\">\n            <img src={user.avatarUrl} alt=\"github profile\" className=\"h-12 w-12 rounded-2xl\" />\n            <div className=\"text-sm text-gray-600\">\n              <p className=\"space-x-1\">\n                <a\n                  href={`https://github.com/${user.login}`}\n                  className=\"font-semibold hover:text-black\"\n                >\n                  {user.login}\n                </a>\n                {user.name && <span className=\"ml-1\">{`(${user.name})`}</span>}\n              </p>\n              {user.bio && <p className=\"text-ellipsis\">{user.bio}</p>}\n            </div>\n          </div>\n          <p className=\"mt-4 pt-4 text-sm text-gray-400\">\n            * 유저들 간의 스타를 누른 리포지토리 관계를 보여줍니다.\n          </p>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default Search;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","function none() {}\n\nexport default function(selector) {\n  return selector == null ? none : function() {\n    return this.querySelector(selector);\n  };\n}\n","// Given something array like (or null), returns something that is strictly an\n// array. This is used to ensure that array-like objects passed to d3.selectAll\n// or selection.selectAll are converted into proper arrays when creating a\n// selection; we don’t ever want to create a selection backed by a live\n// HTMLCollection or NodeList. However, note that selection.selectAll will use a\n// static NodeList as a group, since it safely derived from querySelectorAll.\nexport default function array(x) {\n  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);\n}\n","function empty() {\n  return [];\n}\n\nexport default function(selector) {\n  return selector == null ? empty : function() {\n    return this.querySelectorAll(selector);\n  };\n}\n","export default function(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n}\n\nexport function childMatcher(selector) {\n  return function(node) {\n    return node.matches(selector);\n  };\n}\n\n","import {childMatcher} from \"../matcher.js\";\n\nvar find = Array.prototype.find;\n\nfunction childFind(match) {\n  return function() {\n    return find.call(this.children, match);\n  };\n}\n\nfunction childFirst() {\n  return this.firstElementChild;\n}\n\nexport default function(match) {\n  return this.select(match == null ? childFirst\n      : childFind(typeof match === \"function\" ? match : childMatcher(match)));\n}\n","import {childMatcher} from \"../matcher.js\";\n\nvar filter = Array.prototype.filter;\n\nfunction children() {\n  return Array.from(this.children);\n}\n\nfunction childrenFilter(match) {\n  return function() {\n    return filter.call(this.children, match);\n  };\n}\n\nexport default function(match) {\n  return this.selectAll(match == null ? children\n      : childrenFilter(typeof match === \"function\" ? match : childMatcher(match)));\n}\n","export default function(update) {\n  return new Array(update.length);\n}\n","import sparse from \"./sparse.js\";\nimport {Selection} from \"./index.js\";\n\nexport default function() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nexport function EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n};\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import {Selection} from \"./index.js\";\nimport {EnterNode} from \"./enter.js\";\nimport constant from \"../constant.js\";\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = new Map,\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + \"\";\n      if (nodeByKeyValue.has(keyValue)) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue.set(keyValue, node);\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = key.call(parent, data[i], i, data) + \"\";\n    if (node = nodeByKeyValue.get(keyValue)) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue.delete(keyValue);\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction datum(node) {\n  return node.__data__;\n}\n\nexport default function(value, key) {\n  if (!arguments.length) return Array.from(this, datum);\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n\n// Given some data, this returns an array-like view of it: an object that\n// exposes a length property and allows numeric indexing. Note that unlike\n// selectAll, this isn’t worried about “live” collections because the resulting\n// array will only be used briefly while data is being bound. (It is possible to\n// cause the data to change while iterating by using a key function, but please\n// don’t; we’d rather avoid a gratuitous copy.)\nfunction arraylike(data) {\n  return typeof data === \"object\" && \"length\" in data\n    ? data // Array, TypedArray, NodeList, array-like\n    : Array.from(data); // Map, Set, iterable, string, or anything else\n}\n","import {Selection} from \"./index.js\";\n\nexport default function(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export var xhtml = \"http://www.w3.org/1999/xhtml\";\n\nexport default {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n","import namespaces from \"./namespaces.js\";\n\nexport default function(name) {\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins\n}\n","import namespace from \"../namespace.js\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function() {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function() {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);\n    else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n    else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local\n        ? node.getAttributeNS(fullname.space, fullname.local)\n        : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n}\n","export default function(node) {\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n      || (node.document && node) // node is a Window\n      || node.defaultView; // node is a Document\n}\n","import defaultView from \"../window.js\";\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function() {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n  };\n}\n\nexport default function(name, value, priority) {\n  return arguments.length > 1\n      ? this.each((value == null\n            ? styleRemove : typeof value === \"function\"\n            ? styleFunction\n            : styleConstant)(name, value, priority == null ? \"\" : priority))\n      : styleValue(this.node(), name);\n}\n\nexport function styleValue(node, name) {\n  return node.style.getPropertyValue(name)\n      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n","function propertyRemove(name) {\n  return function() {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function() {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];\n    else this[name] = v;\n  };\n}\n\nexport default function(name, value) {\n  return arguments.length > 1\n      ? this.each((value == null\n          ? propertyRemove : typeof value === \"function\"\n          ? propertyFunction\n          : propertyConstant)(name, value))\n      : this.node()[name];\n}\n","function classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\n}\n\nClassList.prototype = {\n  add: function(name) {\n    var i = this._names.indexOf(name);\n    if (i < 0) {\n      this._names.push(name);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  remove: function(name) {\n    var i = this._names.indexOf(name);\n    if (i >= 0) {\n      this._names.splice(i, 1);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  contains: function(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n  return function() {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function() {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function() {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\nexport default function(name, value) {\n  var names = classArray(name + \"\");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()), i = -1, n = names.length;\n    while (++i < n) if (!list.contains(names[i])) return false;\n    return true;\n  }\n\n  return this.each((typeof value === \"function\"\n      ? classedFunction : value\n      ? classedTrue\n      : classedFalse)(names, value));\n}\n","function textRemove() {\n  this.textContent = \"\";\n}\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? textRemove : (typeof value === \"function\"\n          ? textFunction\n          : textConstant)(value))\n      : this.node().textContent;\n}\n","function htmlRemove() {\n  this.innerHTML = \"\";\n}\n\nfunction htmlConstant(value) {\n  return function() {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? htmlRemove : (typeof value === \"function\"\n          ? htmlFunction\n          : htmlConstant)(value))\n      : this.node().innerHTML;\n}\n","function raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\nexport default function() {\n  return this.each(raise);\n}\n","function lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\nexport default function() {\n  return this.each(lower);\n}\n","import namespace from \"./namespace.js\";\nimport {xhtml} from \"./namespaces.js\";\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n        ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nexport default function(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n      ? creatorFixed\n      : creatorInherit)(fullname);\n}\n","import creator from \"../creator.js\";\nimport selector from \"../selector.js\";\n\nfunction constantNull() {\n  return null;\n}\n\nexport default function(name, before) {\n  var create = typeof name === \"function\" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n  return this.select(function() {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n","function remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\nexport default function() {\n  return this.each(remove);\n}\n","function selection_cloneShallow() {\n  var clone = this.cloneNode(false), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nfunction selection_cloneDeep() {\n  var clone = this.cloneNode(true), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nexport default function(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n","function contextListener(listener) {\n  return function(event) {\n    listener.call(this, event, this.__data__);\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, options) {\n  return function() {\n    var on = this.__on, o, listener = contextListener(value);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n        this.addEventListener(o.type, o.listener = listener, o.options = options);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, options);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\nexport default function(typename, value, options) {\n  var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));\n  return this;\n}\n","import defaultView from \"../window.js\";\n\nfunction dispatchEvent(node, type, params) {\n  var window = defaultView(node),\n      event = window.CustomEvent;\n\n  if (typeof event === \"function\") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent(\"Event\");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n    else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\nexport default function(type, params) {\n  return this.each((typeof params === \"function\"\n      ? dispatchFunction\n      : dispatchConstant)(type, params));\n}\n","export default function*() {\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) yield node;\n    }\n  }\n}\n","import selection_select from \"./select.js\";\nimport selection_selectAll from \"./selectAll.js\";\nimport selection_selectChild from \"./selectChild.js\";\nimport selection_selectChildren from \"./selectChildren.js\";\nimport selection_filter from \"./filter.js\";\nimport selection_data from \"./data.js\";\nimport selection_enter from \"./enter.js\";\nimport selection_exit from \"./exit.js\";\nimport selection_join from \"./join.js\";\nimport selection_merge from \"./merge.js\";\nimport selection_order from \"./order.js\";\nimport selection_sort from \"./sort.js\";\nimport selection_call from \"./call.js\";\nimport selection_nodes from \"./nodes.js\";\nimport selection_node from \"./node.js\";\nimport selection_size from \"./size.js\";\nimport selection_empty from \"./empty.js\";\nimport selection_each from \"./each.js\";\nimport selection_attr from \"./attr.js\";\nimport selection_style from \"./style.js\";\nimport selection_property from \"./property.js\";\nimport selection_classed from \"./classed.js\";\nimport selection_text from \"./text.js\";\nimport selection_html from \"./html.js\";\nimport selection_raise from \"./raise.js\";\nimport selection_lower from \"./lower.js\";\nimport selection_append from \"./append.js\";\nimport selection_insert from \"./insert.js\";\nimport selection_remove from \"./remove.js\";\nimport selection_clone from \"./clone.js\";\nimport selection_datum from \"./datum.js\";\nimport selection_on from \"./on.js\";\nimport selection_dispatch from \"./dispatch.js\";\nimport selection_iterator from \"./iterator.js\";\n\nexport var root = [null];\n\nexport function Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nfunction selection_selection() {\n  return this;\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selection_selectAll,\n  selectChild: selection_selectChild,\n  selectChildren: selection_selectChildren,\n  filter: selection_filter,\n  data: selection_data,\n  enter: selection_enter,\n  exit: selection_exit,\n  join: selection_join,\n  merge: selection_merge,\n  selection: selection_selection,\n  order: selection_order,\n  sort: selection_sort,\n  call: selection_call,\n  nodes: selection_nodes,\n  node: selection_node,\n  size: selection_size,\n  empty: selection_empty,\n  each: selection_each,\n  attr: selection_attr,\n  style: selection_style,\n  property: selection_property,\n  classed: selection_classed,\n  text: selection_text,\n  html: selection_html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: selection_append,\n  insert: selection_insert,\n  remove: selection_remove,\n  clone: selection_clone,\n  datum: selection_datum,\n  on: selection_on,\n  dispatch: selection_dispatch,\n  [Symbol.iterator]: selection_iterator\n};\n\nexport default selection;\n","import {Selection} from \"./index.js\";\nimport selector from \"../selector.js\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","import {Selection} from \"./index.js\";\nimport array from \"../array.js\";\nimport selectorAll from \"../selectorAll.js\";\n\nfunction arrayAll(select) {\n  return function() {\n    return array(select.apply(this, arguments));\n  };\n}\n\nexport default function(select) {\n  if (typeof select === \"function\") select = arrayAll(select);\n  else select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n","import {Selection} from \"./index.js\";\nimport matcher from \"../matcher.js\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","import sparse from \"./sparse.js\";\nimport {Selection} from \"./index.js\";\n\nexport default function() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n","export default function(onenter, onupdate, onexit) {\n  var enter = this.enter(), update = this, exit = this.exit();\n  if (typeof onenter === \"function\") {\n    enter = onenter(enter);\n    if (enter) enter = enter.selection();\n  } else {\n    enter = enter.append(onenter + \"\");\n  }\n  if (onupdate != null) {\n    update = onupdate(update);\n    if (update) update = update.selection();\n  }\n  if (onexit == null) exit.remove(); else onexit(exit);\n  return enter && update ? enter.merge(update).order() : update;\n}\n","import {Selection} from \"./index.js\";\n\nexport default function(context) {\n  var selection = context.selection ? context.selection() : context;\n\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n","export default function() {\n\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n","export default function() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n","export default function() {\n  return Array.from(this);\n}\n","export default function() {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n","export default function() {\n  let size = 0;\n  for (const node of this) ++size; // eslint-disable-line no-unused-vars\n  return size;\n}\n","export default function() {\n  return !this.node();\n}\n","export default function(callback) {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n","import creator from \"../creator.js\";\n\nexport default function(name) {\n  var create = typeof name === \"function\" ? name : creator(name);\n  return this.select(function() {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n","export default function(value) {\n  return arguments.length\n      ? this.property(\"__data__\", value)\n      : this.node().__data__;\n}\n","var noop = {value: () => {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n","var frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nexport function now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nexport function Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nexport function timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nexport function timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);\n    t = t._next;\n  }\n  --frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    frame = 1, setFrame(wake);\n  }\n}\n","import {Timer} from \"./timer.js\";\n\nexport default function(callback, delay, time) {\n  var t = new Timer;\n  delay = delay == null ? 0 : +delay;\n  t.restart(elapsed => {\n    t.stop();\n    callback(elapsed + delay);\n  }, delay, time);\n  return t;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {timer, timeout} from \"d3-timer\";\n\nvar emptyOn = dispatch(\"start\", \"end\", \"cancel\", \"interrupt\");\nvar emptyTween = [];\n\nexport var CREATED = 0;\nexport var SCHEDULED = 1;\nexport var STARTING = 2;\nexport var STARTED = 3;\nexport var RUNNING = 4;\nexport var ENDING = 5;\nexport var ENDED = 6;\n\nexport default function(node, name, id, index, group, timing) {\n  var schedules = node.__transition;\n  if (!schedules) node.__transition = {};\n  else if (id in schedules) return;\n  create(node, id, {\n    name: name,\n    index: index, // For context during callback.\n    group: group, // For context during callback.\n    on: emptyOn,\n    tween: emptyTween,\n    time: timing.time,\n    delay: timing.delay,\n    duration: timing.duration,\n    ease: timing.ease,\n    timer: null,\n    state: CREATED\n  });\n}\n\nexport function init(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > CREATED) throw new Error(\"too late; already scheduled\");\n  return schedule;\n}\n\nexport function set(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > STARTED) throw new Error(\"too late; already running\");\n  return schedule;\n}\n\nexport function get(node, id) {\n  var schedule = node.__transition;\n  if (!schedule || !(schedule = schedule[id])) throw new Error(\"transition not found\");\n  return schedule;\n}\n\nfunction create(node, id, self) {\n  var schedules = node.__transition,\n      tween;\n\n  // Initialize the self timer when the transition is created.\n  // Note the actual delay is not known until the first callback!\n  schedules[id] = self;\n  self.timer = timer(schedule, 0, self.time);\n\n  function schedule(elapsed) {\n    self.state = SCHEDULED;\n    self.timer.restart(start, self.delay, self.time);\n\n    // If the elapsed delay is less than our first sleep, start immediately.\n    if (self.delay <= elapsed) start(elapsed - self.delay);\n  }\n\n  function start(elapsed) {\n    var i, j, n, o;\n\n    // If the state is not SCHEDULED, then we previously errored on start.\n    if (self.state !== SCHEDULED) return stop();\n\n    for (i in schedules) {\n      o = schedules[i];\n      if (o.name !== self.name) continue;\n\n      // While this element already has a starting transition during this frame,\n      // defer starting an interrupting transition until that transition has a\n      // chance to tick (and possibly end); see d3/d3-transition#54!\n      if (o.state === STARTED) return timeout(start);\n\n      // Interrupt the active transition, if any.\n      if (o.state === RUNNING) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n\n      // Cancel any pre-empted transitions.\n      else if (+i < id) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"cancel\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n    }\n\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\n    // Note the transition may be canceled after start and before the first tick!\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\n    // Assuming this is successful, subsequent callbacks go straight to tick.\n    timeout(function() {\n      if (self.state === STARTED) {\n        self.state = RUNNING;\n        self.timer.restart(tick, self.delay, self.time);\n        tick(elapsed);\n      }\n    });\n\n    // Dispatch the start event.\n    // Note this must be done before the tween are initialized.\n    self.state = STARTING;\n    self.on.call(\"start\", node, node.__data__, self.index, self.group);\n    if (self.state !== STARTING) return; // interrupted\n    self.state = STARTED;\n\n    // Initialize the tween, deleting null tween.\n    tween = new Array(n = self.tween.length);\n    for (i = 0, j = -1; i < n; ++i) {\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n        tween[++j] = o;\n      }\n    }\n    tween.length = j + 1;\n  }\n\n  function tick(elapsed) {\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\n        i = -1,\n        n = tween.length;\n\n    while (++i < n) {\n      tween[i].call(node, t);\n    }\n\n    // Dispatch the end event.\n    if (self.state === ENDING) {\n      self.on.call(\"end\", node, node.__data__, self.index, self.group);\n      stop();\n    }\n  }\n\n  function stop() {\n    self.state = ENDED;\n    self.timer.stop();\n    delete schedules[id];\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\n    delete node.__transition;\n  }\n}\n","import {STARTING, ENDING, ENDED} from \"./transition/schedule.js\";\n\nexport default function(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      active,\n      empty = true,\n      i;\n\n  if (!schedules) return;\n\n  name = name == null ? null : name + \"\";\n\n  for (i in schedules) {\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n    active = schedule.state > STARTING && schedule.state < ENDING;\n    schedule.state = ENDED;\n    schedule.timer.stop();\n    schedule.on.call(active ? \"interrupt\" : \"cancel\", node, node.__data__, schedule.index, schedule.group);\n    delete schedules[i];\n  }\n\n  if (empty) delete node.__transition;\n}\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n","var degrees = 180 / Math.PI;\n\nexport var identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\nexport default function(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * degrees,\n    skewX: Math.atan(skewX) * degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n","import decompose, {identity} from \"./decompose.js\";\n\nvar svgNode;\n\n/* eslint-disable no-undef */\nexport function parseCss(value) {\n  const m = new (typeof DOMMatrix === \"function\" ? DOMMatrix : WebKitCSSMatrix)(value + \"\");\n  return m.isIdentity ? identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n}\n\nexport function parseSvg(value) {\n  if (value == null) return identity;\n  if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  svgNode.setAttribute(\"transform\", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;\n  value = value.matrix;\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n","import number from \"../number.js\";\nimport {parseCss, parseSvg} from \"./parse.js\";\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + \" \" : \"\";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb || yb) {\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"rotate(\" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"skewX(\" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  };\n}\n\nexport var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\nexport var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n","import {get, set} from \"./schedule.js\";\n\nfunction tweenRemove(id, name) {\n  var tween0, tween1;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = tween0 = tween;\n      for (var i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1 = tween1.slice();\n          tween1.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nfunction tweenFunction(id, name, value) {\n  var tween0, tween1;\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = (tween0 = tween).slice();\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1[i] = t;\n          break;\n        }\n      }\n      if (i === n) tween1.push(t);\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nexport default function(name, value) {\n  var id = this._id;\n\n  name += \"\";\n\n  if (arguments.length < 2) {\n    var tween = get(this.node(), id).tween;\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\n      if ((t = tween[i]).name === name) {\n        return t.value;\n      }\n    }\n    return null;\n  }\n\n  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n}\n\nexport function tweenValue(transition, name, value) {\n  var id = transition._id;\n\n  transition.each(function() {\n    var schedule = set(this, id);\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n  });\n\n  return function(node) {\n    return get(node, id).value[name];\n  };\n}\n","export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n","import define, {extend} from \"./define.js\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  copy: function(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable: function() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nexport default function color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function() {\n    return this;\n  },\n  displayable: function() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n}\n\nfunction rgb_formatRgb() {\n  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n  return (a === 1 ? \"rgb(\" : \"rgba(\")\n      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n      + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n      + (a === 1 ? \")\" : \", \" + a + \")\");\n}\n\nfunction hex(value) {\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  displayable: function() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl: function() {\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"hsl(\" : \"hsla(\")\n        + (this.h || 0) + \", \"\n        + (this.s || 0) * 100 + \"%, \"\n        + (this.l || 0) * 100 + \"%\"\n        + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n}));\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","export default x => () => x;\n","import constant from \"./constant.js\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n","import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis.js\";\nimport basisClosed from \"./basisClosed.js\";\nimport nogamma, {gamma} from \"./color.js\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n","import {basis} from \"./basis.js\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import number from \"./number.js\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n","import {color} from \"d3-color\";\nimport {interpolateNumber, interpolateRgb, interpolateString} from \"d3-interpolate\";\n\nexport default function(a, b) {\n  var c;\n  return (typeof b === \"number\" ? interpolateNumber\n      : b instanceof color ? interpolateRgb\n      : (c = color(b)) ? (b = c, interpolateRgb)\n      : interpolateString)(a, b);\n}\n","import {interpolateTransformSvg as interpolateTransform} from \"d3-interpolate\";\nimport {namespace} from \"d3-selection\";\nimport {tweenValue} from \"./tween.js\";\nimport interpolate from \"./interpolate.js\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttribute(name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrConstantNS(fullname, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttributeNS(fullname.space, fullname.local);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttribute(name);\n    string0 = this.getAttribute(name);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction attrFunctionNS(fullname, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n    string0 = this.getAttributeNS(fullname.space, fullname.local);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform : interpolate;\n  return this.attrTween(name, typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)\n      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));\n}\n","import {namespace} from \"d3-selection\";\n\nfunction attrInterpolate(name, i) {\n  return function(t) {\n    this.setAttribute(name, i.call(this, t));\n  };\n}\n\nfunction attrInterpolateNS(fullname, i) {\n  return function(t) {\n    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));\n  };\n}\n\nfunction attrTweenNS(fullname, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nfunction attrTween(name, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value) {\n  var key = \"attr.\" + name;\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  var fullname = namespace(name);\n  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n}\n","import {get, init} from \"./schedule.js\";\n\nfunction delayFunction(id, value) {\n  return function() {\n    init(this, id).delay = +value.apply(this, arguments);\n  };\n}\n\nfunction delayConstant(id, value) {\n  return value = +value, function() {\n    init(this, id).delay = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? delayFunction\n          : delayConstant)(id, value))\n      : get(this.node(), id).delay;\n}\n","import {get, set} from \"./schedule.js\";\n\nfunction durationFunction(id, value) {\n  return function() {\n    set(this, id).duration = +value.apply(this, arguments);\n  };\n}\n\nfunction durationConstant(id, value) {\n  return value = +value, function() {\n    set(this, id).duration = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? durationFunction\n          : durationConstant)(id, value))\n      : get(this.node(), id).duration;\n}\n","import {get, set} from \"./schedule.js\";\n\nfunction easeConstant(id, value) {\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    set(this, id).ease = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each(easeConstant(id, value))\n      : get(this.node(), id).ease;\n}\n","import {get, set, init} from \"./schedule.js\";\n\nfunction start(name) {\n  return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n    var i = t.indexOf(\".\");\n    if (i >= 0) t = t.slice(0, i);\n    return !t || t === \"start\";\n  });\n}\n\nfunction onFunction(id, name, listener) {\n  var on0, on1, sit = start(name) ? init : set;\n  return function() {\n    var schedule = sit(this, id),\n        on = schedule.on;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, listener) {\n  var id = this._id;\n\n  return arguments.length < 2\n      ? get(this.node(), id).on.on(name)\n      : this.each(onFunction(id, name, listener));\n}\n","import {selection} from \"d3-selection\";\n\nvar Selection = selection.prototype.constructor;\n\nexport default function() {\n  return new Selection(this._groups, this._parents);\n}\n","import {interpolateTransformCss as interpolateTransform} from \"d3-interpolate\";\nimport {style} from \"d3-selection\";\nimport {set} from \"./schedule.js\";\nimport {tweenValue} from \"./tween.js\";\nimport interpolate from \"./interpolate.js\";\n\nfunction styleNull(name, interpolate) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        string1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, string10 = string1);\n  };\n}\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = style(this, name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction styleFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        value1 = value(this),\n        string1 = value1 + \"\";\n    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction styleMaybeRemove(id, name) {\n  var on0, on1, listener0, key = \"style.\" + name, event = \"end.\" + key, remove;\n  return function() {\n    var schedule = set(this, id),\n        on = schedule.on,\n        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, value, priority) {\n  var i = (name += \"\") === \"transform\" ? interpolateTransform : interpolate;\n  return value == null ? this\n      .styleTween(name, styleNull(name, i))\n      .on(\"end.style.\" + name, styleRemove(name))\n    : typeof value === \"function\" ? this\n      .styleTween(name, styleFunction(name, i, tweenValue(this, \"style.\" + name, value)))\n      .each(styleMaybeRemove(this._id, name))\n    : this\n      .styleTween(name, styleConstant(name, i, value), priority)\n      .on(\"end.style.\" + name, null);\n}\n","function styleInterpolate(name, i, priority) {\n  return function(t) {\n    this.style.setProperty(name, i.call(this, t), priority);\n  };\n}\n\nfunction styleTween(name, value, priority) {\n  var t, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\n    return t;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value, priority) {\n  var key = \"style.\" + (name += \"\");\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n}\n","function textInterpolate(i) {\n  return function(t) {\n    this.textContent = i.call(this, t);\n  };\n}\n\nfunction textTween(value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(value) {\n  var key = \"text\";\n  if (arguments.length < 1) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, textTween(value));\n}\n","import {selection} from \"d3-selection\";\nimport transition_attr from \"./attr.js\";\nimport transition_attrTween from \"./attrTween.js\";\nimport transition_delay from \"./delay.js\";\nimport transition_duration from \"./duration.js\";\nimport transition_ease from \"./ease.js\";\nimport transition_easeVarying from \"./easeVarying.js\";\nimport transition_filter from \"./filter.js\";\nimport transition_merge from \"./merge.js\";\nimport transition_on from \"./on.js\";\nimport transition_remove from \"./remove.js\";\nimport transition_select from \"./select.js\";\nimport transition_selectAll from \"./selectAll.js\";\nimport transition_selection from \"./selection.js\";\nimport transition_style from \"./style.js\";\nimport transition_styleTween from \"./styleTween.js\";\nimport transition_text from \"./text.js\";\nimport transition_textTween from \"./textTween.js\";\nimport transition_transition from \"./transition.js\";\nimport transition_tween from \"./tween.js\";\nimport transition_end from \"./end.js\";\n\nvar id = 0;\n\nexport function Transition(groups, parents, name, id) {\n  this._groups = groups;\n  this._parents = parents;\n  this._name = name;\n  this._id = id;\n}\n\nexport default function transition(name) {\n  return selection().transition(name);\n}\n\nexport function newId() {\n  return ++id;\n}\n\nvar selection_prototype = selection.prototype;\n\nTransition.prototype = transition.prototype = {\n  constructor: Transition,\n  select: transition_select,\n  selectAll: transition_selectAll,\n  selectChild: selection_prototype.selectChild,\n  selectChildren: selection_prototype.selectChildren,\n  filter: transition_filter,\n  merge: transition_merge,\n  selection: transition_selection,\n  transition: transition_transition,\n  call: selection_prototype.call,\n  nodes: selection_prototype.nodes,\n  node: selection_prototype.node,\n  size: selection_prototype.size,\n  empty: selection_prototype.empty,\n  each: selection_prototype.each,\n  on: transition_on,\n  attr: transition_attr,\n  attrTween: transition_attrTween,\n  style: transition_style,\n  styleTween: transition_styleTween,\n  text: transition_text,\n  textTween: transition_textTween,\n  remove: transition_remove,\n  tween: transition_tween,\n  delay: transition_delay,\n  duration: transition_duration,\n  ease: transition_ease,\n  easeVarying: transition_easeVarying,\n  end: transition_end,\n  [Symbol.iterator]: selection_prototype[Symbol.iterator]\n};\n","import {selector} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n        schedule(subgroup[i], name, id, i, subgroup, get(node, id));\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, name, id);\n}\n","import {selectorAll} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {\n          if (child = children[k]) {\n            schedule(child, name, id, k, children, inherit);\n          }\n        }\n        subgroups.push(children);\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, parents, name, id);\n}\n","import {matcher} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, this._name, this._id);\n}\n","import {Transition} from \"./index.js\";\n\nexport default function(transition) {\n  if (transition._id !== this._id) throw new Error;\n\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Transition(merges, this._parents, this._name, this._id);\n}\n","import {Transition, newId} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function() {\n  var name = this._name,\n      id0 = this._id,\n      id1 = newId();\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        var inherit = get(node, id0);\n        schedule(node, name, id1, i, group, {\n          time: inherit.time + inherit.delay + inherit.duration,\n          delay: 0,\n          duration: inherit.duration,\n          ease: inherit.ease\n        });\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id1);\n}\n","import {tweenValue} from \"./tween.js\";\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var value1 = value(this);\n    this.textContent = value1 == null ? \"\" : value1;\n  };\n}\n\nexport default function(value) {\n  return this.tween(\"text\", typeof value === \"function\"\n      ? textFunction(tweenValue(this, \"text\", value))\n      : textConstant(value == null ? \"\" : value + \"\"));\n}\n","function removeFunction(id) {\n  return function() {\n    var parent = this.parentNode;\n    for (var i in this.__transition) if (+i !== id) return;\n    if (parent) parent.removeChild(this);\n  };\n}\n\nexport default function() {\n  return this.on(\"end.remove\", removeFunction(this._id));\n}\n","import {set} from \"./schedule.js\";\n\nfunction easeVarying(id, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (typeof v !== \"function\") throw new Error;\n    set(this, id).ease = v;\n  };\n}\n\nexport default function(value) {\n  if (typeof value !== \"function\") throw new Error;\n  return this.each(easeVarying(this._id, value));\n}\n","import {set} from \"./schedule.js\";\n\nexport default function() {\n  var on0, on1, that = this, id = that._id, size = that.size();\n  return new Promise(function(resolve, reject) {\n    var cancel = {value: reject},\n        end = {value: function() { if (--size === 0) resolve(); }};\n\n    that.each(function() {\n      var schedule = set(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) {\n        on1 = (on0 = on).copy();\n        on1._.cancel.push(cancel);\n        on1._.interrupt.push(cancel);\n        on1._.end.push(end);\n      }\n\n      schedule.on = on1;\n    });\n\n    // The selection was empty, resolve end immediately\n    if (size === 0) resolve();\n  });\n}\n","import {Transition, newId} from \"../transition/index.js\";\nimport schedule from \"../transition/schedule.js\";\nimport {easeCubicInOut} from \"d3-ease\";\nimport {now} from \"d3-timer\";\n\nvar defaultTiming = {\n  time: null, // Set on use.\n  delay: 0,\n  duration: 250,\n  ease: easeCubicInOut\n};\n\nfunction inherit(node, id) {\n  var timing;\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\n    if (!(node = node.parentNode)) {\n      throw new Error(`transition ${id} not found`);\n    }\n  }\n  return timing;\n}\n\nexport default function(name) {\n  var id,\n      timing;\n\n  if (name instanceof Transition) {\n    id = name._id, name = name._name;\n  } else {\n    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n  }\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        schedule(node, name, id, i, group, timing || inherit(node, id));\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id);\n}\n","export function cubicIn(t) {\n  return t * t * t;\n}\n\nexport function cubicOut(t) {\n  return --t * t * t + 1;\n}\n\nexport function cubicInOut(t) {\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n}\n","import {selection} from \"d3-selection\";\nimport selection_interrupt from \"./interrupt.js\";\nimport selection_transition from \"./transition.js\";\n\nselection.prototype.interrupt = selection_interrupt;\nselection.prototype.transition = selection_transition;\n","import interrupt from \"../interrupt.js\";\n\nexport default function(name) {\n  return this.each(function() {\n    interrupt(this, name);\n  });\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {dragDisable, dragEnable} from \"d3-drag\";\nimport {interpolate} from \"d3-interpolate\";\nimport {pointer, select} from \"d3-selection\";\nimport {interrupt} from \"d3-transition\";\nimport constant from \"./constant.js\";\nimport BrushEvent from \"./event.js\";\nimport noevent, {nopropagation} from \"./noevent.js\";\n\nvar MODE_DRAG = {name: \"drag\"},\n    MODE_SPACE = {name: \"space\"},\n    MODE_HANDLE = {name: \"handle\"},\n    MODE_CENTER = {name: \"center\"};\n\nconst {abs, max, min} = Math;\n\nfunction number1(e) {\n  return [+e[0], +e[1]];\n}\n\nfunction number2(e) {\n  return [number1(e[0]), number1(e[1])];\n}\n\nvar X = {\n  name: \"x\",\n  handles: [\"w\", \"e\"].map(type),\n  input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n};\n\nvar Y = {\n  name: \"y\",\n  handles: [\"n\", \"s\"].map(type),\n  input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n};\n\nvar XY = {\n  name: \"xy\",\n  handles: [\"n\", \"w\", \"e\", \"s\", \"nw\", \"ne\", \"sw\", \"se\"].map(type),\n  input: function(xy) { return xy == null ? null : number2(xy); },\n  output: function(xy) { return xy; }\n};\n\nvar cursors = {\n  overlay: \"crosshair\",\n  selection: \"move\",\n  n: \"ns-resize\",\n  e: \"ew-resize\",\n  s: \"ns-resize\",\n  w: \"ew-resize\",\n  nw: \"nwse-resize\",\n  ne: \"nesw-resize\",\n  se: \"nwse-resize\",\n  sw: \"nesw-resize\"\n};\n\nvar flipX = {\n  e: \"w\",\n  w: \"e\",\n  nw: \"ne\",\n  ne: \"nw\",\n  se: \"sw\",\n  sw: \"se\"\n};\n\nvar flipY = {\n  n: \"s\",\n  s: \"n\",\n  nw: \"sw\",\n  ne: \"se\",\n  se: \"ne\",\n  sw: \"nw\"\n};\n\nvar signsX = {\n  overlay: +1,\n  selection: +1,\n  n: null,\n  e: +1,\n  s: null,\n  w: -1,\n  nw: -1,\n  ne: +1,\n  se: +1,\n  sw: -1\n};\n\nvar signsY = {\n  overlay: +1,\n  selection: +1,\n  n: -1,\n  e: null,\n  s: +1,\n  w: null,\n  nw: -1,\n  ne: -1,\n  se: +1,\n  sw: +1\n};\n\nfunction type(t) {\n  return {type: t};\n}\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultExtent() {\n  var svg = this.ownerSVGElement || this;\n  if (svg.hasAttribute(\"viewBox\")) {\n    svg = svg.viewBox.baseVal;\n    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\n  }\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n\n// Like d3.local, but with the name “__brush” rather than auto-generated.\nfunction local(node) {\n  while (!node.__brush) if (!(node = node.parentNode)) return;\n  return node.__brush;\n}\n\nfunction empty(extent) {\n  return extent[0][0] === extent[1][0]\n      || extent[0][1] === extent[1][1];\n}\n\nexport function brushSelection(node) {\n  var state = node.__brush;\n  return state ? state.dim.output(state.selection) : null;\n}\n\nexport function brushX() {\n  return brush(X);\n}\n\nexport function brushY() {\n  return brush(Y);\n}\n\nexport default function() {\n  return brush(XY);\n}\n\nfunction brush(dim) {\n  var extent = defaultExtent,\n      filter = defaultFilter,\n      touchable = defaultTouchable,\n      keys = true,\n      listeners = dispatch(\"start\", \"brush\", \"end\"),\n      handleSize = 6,\n      touchending;\n\n  function brush(group) {\n    var overlay = group\n        .property(\"__brush\", initialize)\n      .selectAll(\".overlay\")\n      .data([type(\"overlay\")]);\n\n    overlay.enter().append(\"rect\")\n        .attr(\"class\", \"overlay\")\n        .attr(\"pointer-events\", \"all\")\n        .attr(\"cursor\", cursors.overlay)\n      .merge(overlay)\n        .each(function() {\n          var extent = local(this).extent;\n          select(this)\n              .attr(\"x\", extent[0][0])\n              .attr(\"y\", extent[0][1])\n              .attr(\"width\", extent[1][0] - extent[0][0])\n              .attr(\"height\", extent[1][1] - extent[0][1]);\n        });\n\n    group.selectAll(\".selection\")\n      .data([type(\"selection\")])\n      .enter().append(\"rect\")\n        .attr(\"class\", \"selection\")\n        .attr(\"cursor\", cursors.selection)\n        .attr(\"fill\", \"#777\")\n        .attr(\"fill-opacity\", 0.3)\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"shape-rendering\", \"crispEdges\");\n\n    var handle = group.selectAll(\".handle\")\n      .data(dim.handles, function(d) { return d.type; });\n\n    handle.exit().remove();\n\n    handle.enter().append(\"rect\")\n        .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n        .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\n    group\n        .each(redraw)\n        .attr(\"fill\", \"none\")\n        .attr(\"pointer-events\", \"all\")\n        .on(\"mousedown.brush\", started)\n      .filter(touchable)\n        .on(\"touchstart.brush\", started)\n        .on(\"touchmove.brush\", touchmoved)\n        .on(\"touchend.brush touchcancel.brush\", touchended)\n        .style(\"touch-action\", \"none\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  brush.move = function(group, selection, event) {\n    if (group.tween) {\n      group\n          .on(\"start.brush\", function(event) { emitter(this, arguments).beforestart().start(event); })\n          .on(\"interrupt.brush end.brush\", function(event) { emitter(this, arguments).end(event); })\n          .tween(\"brush\", function() {\n            var that = this,\n                state = that.__brush,\n                emit = emitter(that, arguments),\n                selection0 = state.selection,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n                i = interpolate(selection0, selection1);\n\n            function tween(t) {\n              state.selection = t === 1 && selection1 === null ? null : i(t);\n              redraw.call(that);\n              emit.brush();\n            }\n\n            return selection0 !== null && selection1 !== null ? tween : tween(1);\n          });\n    } else {\n      group\n          .each(function() {\n            var that = this,\n                args = arguments,\n                state = that.__brush,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n                emit = emitter(that, args).beforestart();\n\n            interrupt(that);\n            state.selection = selection1 === null ? null : selection1;\n            redraw.call(that);\n            emit.start(event).brush(event).end(event);\n          });\n    }\n  };\n\n  brush.clear = function(group, event) {\n    brush.move(group, null, event);\n  };\n\n  function redraw() {\n    var group = select(this),\n        selection = local(this).selection;\n\n    if (selection) {\n      group.selectAll(\".selection\")\n          .style(\"display\", null)\n          .attr(\"x\", selection[0][0])\n          .attr(\"y\", selection[0][1])\n          .attr(\"width\", selection[1][0] - selection[0][0])\n          .attr(\"height\", selection[1][1] - selection[0][1]);\n\n      group.selectAll(\".handle\")\n          .style(\"display\", null)\n          .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n          .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n          .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n          .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n    }\n\n    else {\n      group.selectAll(\".selection,.handle\")\n          .style(\"display\", \"none\")\n          .attr(\"x\", null)\n          .attr(\"y\", null)\n          .attr(\"width\", null)\n          .attr(\"height\", null);\n    }\n  }\n\n  function emitter(that, args, clean) {\n    var emit = that.__brush.emitter;\n    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);\n  }\n\n  function Emitter(that, args, clean) {\n    this.that = that;\n    this.args = args;\n    this.state = that.__brush;\n    this.active = 0;\n    this.clean = clean;\n  }\n\n  Emitter.prototype = {\n    beforestart: function() {\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\n      return this;\n    },\n    start: function(event, mode) {\n      if (this.starting) this.starting = false, this.emit(\"start\", event, mode);\n      else this.emit(\"brush\", event);\n      return this;\n    },\n    brush: function(event, mode) {\n      this.emit(\"brush\", event, mode);\n      return this;\n    },\n    end: function(event, mode) {\n      if (--this.active === 0) delete this.state.emitter, this.emit(\"end\", event, mode);\n      return this;\n    },\n    emit: function(type, event, mode) {\n      var d = select(this.that).datum();\n      listeners.call(\n        type,\n        this.that,\n        new BrushEvent(type, {\n          sourceEvent: event,\n          target: brush,\n          selection: dim.output(this.state.selection),\n          mode,\n          dispatch: listeners\n        }),\n        d\n      );\n    }\n  };\n\n  function started(event) {\n    if (touchending && !event.touches) return;\n    if (!filter.apply(this, arguments)) return;\n\n    var that = this,\n        type = event.target.__data__.type,\n        mode = (keys && event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (keys && event.altKey ? MODE_CENTER : MODE_HANDLE),\n        signX = dim === Y ? null : signsX[type],\n        signY = dim === X ? null : signsY[type],\n        state = local(that),\n        extent = state.extent,\n        selection = state.selection,\n        W = extent[0][0], w0, w1,\n        N = extent[0][1], n0, n1,\n        E = extent[1][0], e0, e1,\n        S = extent[1][1], s0, s1,\n        dx = 0,\n        dy = 0,\n        moving,\n        shifting = signX && signY && keys && event.shiftKey,\n        lockX,\n        lockY,\n        points = Array.from(event.touches || [event], t => {\n          const i = t.identifier;\n          t = pointer(t, that);\n          t.point0 = t.slice();\n          t.identifier = i;\n          return t;\n        });\n\n    interrupt(that);\n    var emit = emitter(that, arguments, true).beforestart();\n\n    if (type === \"overlay\") {\n      if (selection) moving = true;\n      const pts = [points[0], points[1] || points[0]];\n      state.selection = selection = [[\n          w0 = dim === Y ? W : min(pts[0][0], pts[1][0]),\n          n0 = dim === X ? N : min(pts[0][1], pts[1][1])\n        ], [\n          e0 = dim === Y ? E : max(pts[0][0], pts[1][0]),\n          s0 = dim === X ? S : max(pts[0][1], pts[1][1])\n        ]];\n      if (points.length > 1) move(event);\n    } else {\n      w0 = selection[0][0];\n      n0 = selection[0][1];\n      e0 = selection[1][0];\n      s0 = selection[1][1];\n    }\n\n    w1 = w0;\n    n1 = n0;\n    e1 = e0;\n    s1 = s0;\n\n    var group = select(that)\n        .attr(\"pointer-events\", \"none\");\n\n    var overlay = group.selectAll(\".overlay\")\n        .attr(\"cursor\", cursors[type]);\n\n    if (event.touches) {\n      emit.moved = moved;\n      emit.ended = ended;\n    } else {\n      var view = select(event.view)\n          .on(\"mousemove.brush\", moved, true)\n          .on(\"mouseup.brush\", ended, true);\n      if (keys) view\n          .on(\"keydown.brush\", keydowned, true)\n          .on(\"keyup.brush\", keyupped, true)\n\n      dragDisable(event.view);\n    }\n\n    redraw.call(that);\n    emit.start(event, mode.name);\n\n    function moved(event) {\n      for (const p of event.changedTouches || [event]) {\n        for (const d of points)\n          if (d.identifier === p.identifier) d.cur = pointer(p, that);\n      }\n      if (shifting && !lockX && !lockY && points.length === 1) {\n        const point = points[0];\n        if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1]))\n          lockY = true;\n        else\n          lockX = true;\n      }\n      for (const point of points)\n        if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];\n      moving = true;\n      noevent(event);\n      move(event);\n    }\n\n    function move(event) {\n      const point = points[0], point0 = point.point0;\n      var t;\n\n      dx = point[0] - point0[0];\n      dy = point[1] - point0[1];\n\n      switch (mode) {\n        case MODE_SPACE:\n        case MODE_DRAG: {\n          if (signX) dx = max(W - w0, min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n          if (signY) dy = max(N - n0, min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n          break;\n        }\n        case MODE_HANDLE: {\n          if (points[1]) {\n            if (signX) w1 = max(W, min(E, points[0][0])), e1 = max(W, min(E, points[1][0])), signX = 1;\n            if (signY) n1 = max(N, min(S, points[0][1])), s1 = max(N, min(S, points[1][1])), signY = 1;\n          } else {\n            if (signX < 0) dx = max(W - w0, min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n            else if (signX > 0) dx = max(W - e0, min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n            if (signY < 0) dy = max(N - n0, min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n            else if (signY > 0) dy = max(N - s0, min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n          }\n          break;\n        }\n        case MODE_CENTER: {\n          if (signX) w1 = max(W, min(E, w0 - dx * signX)), e1 = max(W, min(E, e0 + dx * signX));\n          if (signY) n1 = max(N, min(S, n0 - dy * signY)), s1 = max(N, min(S, s0 + dy * signY));\n          break;\n        }\n      }\n\n      if (e1 < w1) {\n        signX *= -1;\n        t = w0, w0 = e0, e0 = t;\n        t = w1, w1 = e1, e1 = t;\n        if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n      }\n\n      if (s1 < n1) {\n        signY *= -1;\n        t = n0, n0 = s0, s0 = t;\n        t = n1, n1 = s1, s1 = t;\n        if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n      }\n\n      if (state.selection) selection = state.selection; // May be set by brush.move!\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n      if (selection[0][0] !== w1\n          || selection[0][1] !== n1\n          || selection[1][0] !== e1\n          || selection[1][1] !== s1) {\n        state.selection = [[w1, n1], [e1, s1]];\n        redraw.call(that);\n        emit.brush(event, mode.name);\n      }\n    }\n\n    function ended(event) {\n      nopropagation(event);\n      if (event.touches) {\n        if (event.touches.length) return;\n        if (touchending) clearTimeout(touchending);\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n      } else {\n        dragEnable(event.view, moving);\n        view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n      }\n      group.attr(\"pointer-events\", \"all\");\n      overlay.attr(\"cursor\", cursors.overlay);\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\n      if (empty(selection)) state.selection = null, redraw.call(that);\n      emit.end(event, mode.name);\n    }\n\n    function keydowned(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          shifting = signX && signY;\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_HANDLE) {\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n            mode = MODE_CENTER;\n            move(event);\n          }\n          break;\n        }\n        case 32: { // SPACE; takes priority over ALT\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n            mode = MODE_SPACE;\n            overlay.attr(\"cursor\", cursors.selection);\n            move(event);\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n\n    function keyupped(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          if (shifting) {\n            lockX = lockY = shifting = false;\n            move(event);\n          }\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n            mode = MODE_HANDLE;\n            move(event);\n          }\n          break;\n        }\n        case 32: { // SPACE\n          if (mode === MODE_SPACE) {\n            if (event.altKey) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n            } else {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n            }\n            overlay.attr(\"cursor\", cursors[type]);\n            move(event);\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n  }\n\n  function touchmoved(event) {\n    emitter(this, arguments).moved(event);\n  }\n\n  function touchended(event) {\n    emitter(this, arguments).ended(event);\n  }\n\n  function initialize() {\n    var state = this.__brush || {selection: null};\n    state.extent = number2(extent.apply(this, arguments));\n    state.dim = dim;\n    return state;\n  }\n\n  brush.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant(number2(_)), brush) : extent;\n  };\n\n  brush.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), brush) : filter;\n  };\n\n  brush.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), brush) : touchable;\n  };\n\n  brush.handleSize = function(_) {\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\n  };\n\n  brush.keyModifiers = function(_) {\n    return arguments.length ? (keys = !!_, brush) : keys;\n  };\n\n  brush.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? brush : value;\n  };\n\n  return brush;\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(random) {\n  return (random() - 0.5) * 1e-6;\n}\n","import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      random,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        y = target.y + target.vy - source.y - source.vy || jiggle(random);\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n","export default function(d) {\n  const x = +this._x.call(null, d),\n      y = +this._y.call(null, d);\n  return add(this.cover(x, y), x, y, d);\n}\n\nfunction add(tree, x, y, d) {\n  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      y0 = tree._y0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      xm,\n      ym,\n      xp,\n      yp,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  var d, i, n = data.length,\n      x,\n      y,\n      xz = new Array(n),\n      yz = new Array(n),\n      x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (i = 0; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  // If there were no (valid) points, abort.\n  if (x0 > x1 || y0 > y1) return this;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0, y0).cover(x1, y1);\n\n  // Add the new points.\n  for (i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], data[i]);\n  }\n\n  return this;\n}\n","export default function(node, x0, y0, x1, y1) {\n  this.node = node;\n  this.x0 = x0;\n  this.y0 = y0;\n  this.x1 = x1;\n  this.y1 = y1;\n}\n","export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n","export function defaultY(d) {\n  return d[1];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._y = _, this) : this._y;\n}\n","import tree_add, {addAll as tree_addAll} from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, {defaultX} from \"./x.js\";\nimport tree_y, {defaultY} from \"./y.js\";\n\nexport default function quadtree(nodes, x, y) {\n  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Quadtree(x, y, x0, y0, x1, y1) {\n  this._x = x;\n  this._y = y;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = quadtree.prototype = Quadtree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(4)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 4; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\n","export default function(x, y) {\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1;\n\n  // If the quadtree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing quadrant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1) {\n      i = (y < y0) << 1 | (x < x0);\n      parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n      switch (i) {\n        case 0: x1 = x0 + z, y1 = y0 + z; break;\n        case 1: x0 = x1 - z, y1 = y0 + z; break;\n        case 2: x1 = x0 + z, y0 = y1 - z; break;\n        case 3: x0 = x1 - z, y0 = y1 - z; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  return this;\n}\n","export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n","export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n}\n","import Quad from \"./quad.js\";\n\nexport default function(x, y, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1,\n      y1,\n      x2,\n      y2,\n      x3 = this._x1,\n      y3 = this._y1,\n      quads = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius;\n    x3 = x + radius, y3 = y + radius;\n    radius *= radius;\n  }\n\n  while (q = quads.pop()) {\n\n    // Stop searching if this quadrant can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0) continue;\n\n    // Bisect the current quadrant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2;\n\n      quads.push(\n        new Quad(node[3], xm, ym, x2, y2),\n        new Quad(node[2], x1, ym, xm, y2),\n        new Quad(node[1], xm, y1, x2, ym),\n        new Quad(node[0], x1, y1, xm, ym)\n      );\n\n      // Visit the closest quadrant first.\n      if (i = (y >= ym) << 1 | (x >= xm)) {\n        q = quads[quads.length - 1];\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\n        quads[quads.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          d2 = dx * dx + dy * dy;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d;\n        x3 = x + d, y3 = y + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n","export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1,\n      x,\n      y,\n      xm,\n      ym,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n      && node === (parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n","export default function() {\n  return this._root;\n}\n","export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n","import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n    }\n  }\n  return this;\n}\n","import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], next = [], q;\n  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.y0, q.x1, q.y1);\n  }\n  return this;\n}\n","// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst a = 1664525;\nconst c = 1013904223;\nconst m = 4294967296; // 2^32\n\nexport default function() {\n  let s = 1;\n  return () => (s = (a * s + c) % m) / m;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {timer} from \"d3-timer\";\nimport lcg from \"./lcg.js\";\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nexport default function(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\"),\n      random = lcg();\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.forEach(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes, random);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    randomSource: function(_) {\n      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n","import {Selection, root} from \"./selection/index.js\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n      : new Selection([[selector]], root);\n}\n","// These are typically used in conjunction with noevent to ensure that we can\n// preventDefault on the event.\nexport const nonpassive = {passive: false};\nexport const nonpassivecapture = {capture: true, passive: false};\n\nexport function nopropagation(event) {\n  event.stopImmediatePropagation();\n}\n\nexport default function(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n","import {select} from \"d3-selection\";\nimport noevent, {nonpassivecapture} from \"./noevent.js\";\n\nexport default function(view) {\n  var root = view.document.documentElement,\n      selection = select(view).on(\"dragstart.drag\", noevent, nonpassivecapture);\n  if (\"onselectstart\" in root) {\n    selection.on(\"selectstart.drag\", noevent, nonpassivecapture);\n  } else {\n    root.__noselect = root.style.MozUserSelect;\n    root.style.MozUserSelect = \"none\";\n  }\n}\n\nexport function yesdrag(view, noclick) {\n  var root = view.document.documentElement,\n      selection = select(view).on(\"dragstart.drag\", null);\n  if (noclick) {\n    selection.on(\"click.drag\", noevent, nonpassivecapture);\n    setTimeout(function() { selection.on(\"click.drag\", null); }, 0);\n  }\n  if (\"onselectstart\" in root) {\n    selection.on(\"selectstart.drag\", null);\n  } else {\n    root.style.MozUserSelect = root.__noselect;\n    delete root.__noselect;\n  }\n}\n","var epsilon2 = 1e-12;\n\nfunction cosh(x) {\n  return ((x = Math.exp(x)) + 1 / x) / 2;\n}\n\nfunction sinh(x) {\n  return ((x = Math.exp(x)) - 1 / x) / 2;\n}\n\nfunction tanh(x) {\n  return ((x = Math.exp(2 * x)) - 1) / (x + 1);\n}\n\nexport default (function zoomRho(rho, rho2, rho4) {\n\n  // p0 = [ux0, uy0, w0]\n  // p1 = [ux1, uy1, w1]\n  function zoom(p0, p1) {\n    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],\n        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],\n        dx = ux1 - ux0,\n        dy = uy1 - uy0,\n        d2 = dx * dx + dy * dy,\n        i,\n        S;\n\n    // Special case for u0 ≅ u1.\n    if (d2 < epsilon2) {\n      S = Math.log(w1 / w0) / rho;\n      i = function(t) {\n        return [\n          ux0 + t * dx,\n          uy0 + t * dy,\n          w0 * Math.exp(rho * t * S)\n        ];\n      }\n    }\n\n    // General case.\n    else {\n      var d1 = Math.sqrt(d2),\n          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),\n          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),\n          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),\n          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n      S = (r1 - r0) / rho;\n      i = function(t) {\n        var s = t * S,\n            coshr0 = cosh(r0),\n            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));\n        return [\n          ux0 + u * dx,\n          uy0 + u * dy,\n          w0 * coshr0 / cosh(rho * s + r0)\n        ];\n      }\n    }\n\n    i.duration = S * 1000 * rho / Math.SQRT2;\n\n    return i;\n  }\n\n  zoom.rho = function(_) {\n    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;\n    return zoomRho(_1, _2, _4);\n  };\n\n  return zoom;\n})(Math.SQRT2, 2, 4);\n","import sourceEvent from \"./sourceEvent.js\";\n\nexport default function(event, node) {\n  event = sourceEvent(event);\n  if (node === undefined) node = event.currentTarget;\n  if (node) {\n    var svg = node.ownerSVGElement || node;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = event.clientX, point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n    if (node.getBoundingClientRect) {\n      var rect = node.getBoundingClientRect();\n      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n    }\n  }\n  return [event.pageX, event.pageY];\n}\n","export default function(event) {\n  let sourceEvent;\n  while (sourceEvent = event.sourceEvent) event = sourceEvent;\n  return event;\n}\n","export default x => () => x;\n","export default function ZoomEvent(type, {\n  sourceEvent,\n  target,\n  transform,\n  dispatch\n}) {\n  Object.defineProperties(this, {\n    type: {value: type, enumerable: true, configurable: true},\n    sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},\n    target: {value: target, enumerable: true, configurable: true},\n    transform: {value: transform, enumerable: true, configurable: true},\n    _: {value: dispatch}\n  });\n}\n","export function Transform(k, x, y) {\n  this.k = k;\n  this.x = x;\n  this.y = y;\n}\n\nTransform.prototype = {\n  constructor: Transform,\n  scale: function(k) {\n    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);\n  },\n  translate: function(x, y) {\n    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);\n  },\n  apply: function(point) {\n    return [point[0] * this.k + this.x, point[1] * this.k + this.y];\n  },\n  applyX: function(x) {\n    return x * this.k + this.x;\n  },\n  applyY: function(y) {\n    return y * this.k + this.y;\n  },\n  invert: function(location) {\n    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];\n  },\n  invertX: function(x) {\n    return (x - this.x) / this.k;\n  },\n  invertY: function(y) {\n    return (y - this.y) / this.k;\n  },\n  rescaleX: function(x) {\n    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));\n  },\n  rescaleY: function(y) {\n    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));\n  },\n  toString: function() {\n    return \"translate(\" + this.x + \",\" + this.y + \") scale(\" + this.k + \")\";\n  }\n};\n\nexport var identity = new Transform(1, 0, 0);\n\ntransform.prototype = Transform.prototype;\n\nexport default function transform(node) {\n  while (!node.__zoom) if (!(node = node.parentNode)) return identity;\n  return node.__zoom;\n}\n","export function nopropagation(event) {\n  event.stopImmediatePropagation();\n}\n\nexport default function(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {dragDisable, dragEnable} from \"d3-drag\";\nimport {interpolateZoom} from \"d3-interpolate\";\nimport {select, pointer} from \"d3-selection\";\nimport {interrupt} from \"d3-transition\";\nimport constant from \"./constant.js\";\nimport ZoomEvent from \"./event.js\";\nimport {Transform, identity} from \"./transform.js\";\nimport noevent, {nopropagation} from \"./noevent.js\";\n\n// Ignore right-click, since that should open the context menu.\n// except for pinch-to-zoom, which is sent as a wheel+ctrlKey event\nfunction defaultFilter(event) {\n  return (!event.ctrlKey || event.type === 'wheel') && !event.button;\n}\n\nfunction defaultExtent() {\n  var e = this;\n  if (e instanceof SVGElement) {\n    e = e.ownerSVGElement || e;\n    if (e.hasAttribute(\"viewBox\")) {\n      e = e.viewBox.baseVal;\n      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];\n    }\n    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];\n  }\n  return [[0, 0], [e.clientWidth, e.clientHeight]];\n}\n\nfunction defaultTransform() {\n  return this.__zoom || identity;\n}\n\nfunction defaultWheelDelta(event) {\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n\nfunction defaultConstrain(transform, extent, translateExtent) {\n  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],\n      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],\n      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],\n      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];\n  return transform.translate(\n    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),\n    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)\n  );\n}\n\nexport default function() {\n  var filter = defaultFilter,\n      extent = defaultExtent,\n      constrain = defaultConstrain,\n      wheelDelta = defaultWheelDelta,\n      touchable = defaultTouchable,\n      scaleExtent = [0, Infinity],\n      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],\n      duration = 250,\n      interpolate = interpolateZoom,\n      listeners = dispatch(\"start\", \"zoom\", \"end\"),\n      touchstarting,\n      touchfirst,\n      touchending,\n      touchDelay = 500,\n      wheelDelay = 150,\n      clickDistance2 = 0,\n      tapDistance = 10;\n\n  function zoom(selection) {\n    selection\n        .property(\"__zoom\", defaultTransform)\n        .on(\"wheel.zoom\", wheeled, {passive: false})\n        .on(\"mousedown.zoom\", mousedowned)\n        .on(\"dblclick.zoom\", dblclicked)\n      .filter(touchable)\n        .on(\"touchstart.zoom\", touchstarted)\n        .on(\"touchmove.zoom\", touchmoved)\n        .on(\"touchend.zoom touchcancel.zoom\", touchended)\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  zoom.transform = function(collection, transform, point, event) {\n    var selection = collection.selection ? collection.selection() : collection;\n    selection.property(\"__zoom\", defaultTransform);\n    if (collection !== selection) {\n      schedule(collection, transform, point, event);\n    } else {\n      selection.interrupt().each(function() {\n        gesture(this, arguments)\n          .event(event)\n          .start()\n          .zoom(null, typeof transform === \"function\" ? transform.apply(this, arguments) : transform)\n          .end();\n      });\n    }\n  };\n\n  zoom.scaleBy = function(selection, k, p, event) {\n    zoom.scaleTo(selection, function() {\n      var k0 = this.__zoom.k,\n          k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n      return k0 * k1;\n    }, p, event);\n  };\n\n  zoom.scaleTo = function(selection, k, p, event) {\n    zoom.transform(selection, function() {\n      var e = extent.apply(this, arguments),\n          t0 = this.__zoom,\n          p0 = p == null ? centroid(e) : typeof p === \"function\" ? p.apply(this, arguments) : p,\n          p1 = t0.invert(p0),\n          k1 = typeof k === \"function\" ? k.apply(this, arguments) : k;\n      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);\n    }, p, event);\n  };\n\n  zoom.translateBy = function(selection, x, y, event) {\n    zoom.transform(selection, function() {\n      return constrain(this.__zoom.translate(\n        typeof x === \"function\" ? x.apply(this, arguments) : x,\n        typeof y === \"function\" ? y.apply(this, arguments) : y\n      ), extent.apply(this, arguments), translateExtent);\n    }, null, event);\n  };\n\n  zoom.translateTo = function(selection, x, y, p, event) {\n    zoom.transform(selection, function() {\n      var e = extent.apply(this, arguments),\n          t = this.__zoom,\n          p0 = p == null ? centroid(e) : typeof p === \"function\" ? p.apply(this, arguments) : p;\n      return constrain(identity.translate(p0[0], p0[1]).scale(t.k).translate(\n        typeof x === \"function\" ? -x.apply(this, arguments) : -x,\n        typeof y === \"function\" ? -y.apply(this, arguments) : -y\n      ), e, translateExtent);\n    }, p, event);\n  };\n\n  function scale(transform, k) {\n    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));\n    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);\n  }\n\n  function translate(transform, p0, p1) {\n    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;\n    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);\n  }\n\n  function centroid(extent) {\n    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];\n  }\n\n  function schedule(transition, transform, point, event) {\n    transition\n        .on(\"start.zoom\", function() { gesture(this, arguments).event(event).start(); })\n        .on(\"interrupt.zoom end.zoom\", function() { gesture(this, arguments).event(event).end(); })\n        .tween(\"zoom\", function() {\n          var that = this,\n              args = arguments,\n              g = gesture(that, args).event(event),\n              e = extent.apply(that, args),\n              p = point == null ? centroid(e) : typeof point === \"function\" ? point.apply(that, args) : point,\n              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),\n              a = that.__zoom,\n              b = typeof transform === \"function\" ? transform.apply(that, args) : transform,\n              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));\n          return function(t) {\n            if (t === 1) t = b; // Avoid rounding error on end.\n            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }\n            g.zoom(null, t);\n          };\n        });\n  }\n\n  function gesture(that, args, clean) {\n    return (!clean && that.__zooming) || new Gesture(that, args);\n  }\n\n  function Gesture(that, args) {\n    this.that = that;\n    this.args = args;\n    this.active = 0;\n    this.sourceEvent = null;\n    this.extent = extent.apply(that, args);\n    this.taps = 0;\n  }\n\n  Gesture.prototype = {\n    event: function(event) {\n      if (event) this.sourceEvent = event;\n      return this;\n    },\n    start: function() {\n      if (++this.active === 1) {\n        this.that.__zooming = this;\n        this.emit(\"start\");\n      }\n      return this;\n    },\n    zoom: function(key, transform) {\n      if (this.mouse && key !== \"mouse\") this.mouse[1] = transform.invert(this.mouse[0]);\n      if (this.touch0 && key !== \"touch\") this.touch0[1] = transform.invert(this.touch0[0]);\n      if (this.touch1 && key !== \"touch\") this.touch1[1] = transform.invert(this.touch1[0]);\n      this.that.__zoom = transform;\n      this.emit(\"zoom\");\n      return this;\n    },\n    end: function() {\n      if (--this.active === 0) {\n        delete this.that.__zooming;\n        this.emit(\"end\");\n      }\n      return this;\n    },\n    emit: function(type) {\n      var d = select(this.that).datum();\n      listeners.call(\n        type,\n        this.that,\n        new ZoomEvent(type, {\n          sourceEvent: this.sourceEvent,\n          target: zoom,\n          type,\n          transform: this.that.__zoom,\n          dispatch: listeners\n        }),\n        d\n      );\n    }\n  };\n\n  function wheeled(event, ...args) {\n    if (!filter.apply(this, arguments)) return;\n    var g = gesture(this, args).event(event),\n        t = this.__zoom,\n        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),\n        p = pointer(event);\n\n    // If the mouse is in the same location as before, reuse it.\n    // If there were recent wheel events, reset the wheel idle timeout.\n    if (g.wheel) {\n      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {\n        g.mouse[1] = t.invert(g.mouse[0] = p);\n      }\n      clearTimeout(g.wheel);\n    }\n\n    // If this wheel event won’t trigger a transform change, ignore it.\n    else if (t.k === k) return;\n\n    // Otherwise, capture the mouse point and location at the start.\n    else {\n      g.mouse = [p, t.invert(p)];\n      interrupt(this);\n      g.start();\n    }\n\n    noevent(event);\n    g.wheel = setTimeout(wheelidled, wheelDelay);\n    g.zoom(\"mouse\", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));\n\n    function wheelidled() {\n      g.wheel = null;\n      g.end();\n    }\n  }\n\n  function mousedowned(event, ...args) {\n    if (touchending || !filter.apply(this, arguments)) return;\n    var currentTarget = event.currentTarget,\n        g = gesture(this, args, true).event(event),\n        v = select(event.view).on(\"mousemove.zoom\", mousemoved, true).on(\"mouseup.zoom\", mouseupped, true),\n        p = pointer(event, currentTarget),\n        x0 = event.clientX,\n        y0 = event.clientY;\n\n    dragDisable(event.view);\n    nopropagation(event);\n    g.mouse = [p, this.__zoom.invert(p)];\n    interrupt(this);\n    g.start();\n\n    function mousemoved(event) {\n      noevent(event);\n      if (!g.moved) {\n        var dx = event.clientX - x0, dy = event.clientY - y0;\n        g.moved = dx * dx + dy * dy > clickDistance2;\n      }\n      g.event(event)\n       .zoom(\"mouse\", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));\n    }\n\n    function mouseupped(event) {\n      v.on(\"mousemove.zoom mouseup.zoom\", null);\n      dragEnable(event.view, g.moved);\n      noevent(event);\n      g.event(event).end();\n    }\n  }\n\n  function dblclicked(event, ...args) {\n    if (!filter.apply(this, arguments)) return;\n    var t0 = this.__zoom,\n        p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this),\n        p1 = t0.invert(p0),\n        k1 = t0.k * (event.shiftKey ? 0.5 : 2),\n        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);\n\n    noevent(event);\n    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0, event);\n    else select(this).call(zoom.transform, t1, p0, event);\n  }\n\n  function touchstarted(event, ...args) {\n    if (!filter.apply(this, arguments)) return;\n    var touches = event.touches,\n        n = touches.length,\n        g = gesture(this, args, event.changedTouches.length === n).event(event),\n        started, i, t, p;\n\n    nopropagation(event);\n    for (i = 0; i < n; ++i) {\n      t = touches[i], p = pointer(t, this);\n      p = [p, this.__zoom.invert(p), t.identifier];\n      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;\n      else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;\n    }\n\n    if (touchstarting) touchstarting = clearTimeout(touchstarting);\n\n    if (started) {\n      if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);\n      interrupt(this);\n      g.start();\n    }\n  }\n\n  function touchmoved(event, ...args) {\n    if (!this.__zooming) return;\n    var g = gesture(this, args).event(event),\n        touches = event.changedTouches,\n        n = touches.length, i, t, p, l;\n\n    noevent(event);\n    for (i = 0; i < n; ++i) {\n      t = touches[i], p = pointer(t, this);\n      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;\n      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;\n    }\n    t = g.that.__zoom;\n    if (g.touch1) {\n      var p0 = g.touch0[0], l0 = g.touch0[1],\n          p1 = g.touch1[0], l1 = g.touch1[1],\n          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,\n          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;\n      t = scale(t, Math.sqrt(dp / dl));\n      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];\n      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];\n    }\n    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];\n    else return;\n\n    g.zoom(\"touch\", constrain(translate(t, p, l), g.extent, translateExtent));\n  }\n\n  function touchended(event, ...args) {\n    if (!this.__zooming) return;\n    var g = gesture(this, args).event(event),\n        touches = event.changedTouches,\n        n = touches.length, i, t;\n\n    nopropagation(event);\n    if (touchending) clearTimeout(touchending);\n    touchending = setTimeout(function() { touchending = null; }, touchDelay);\n    for (i = 0; i < n; ++i) {\n      t = touches[i];\n      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;\n      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;\n    }\n    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;\n    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);\n    else {\n      g.end();\n      // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.\n      if (g.taps === 2) {\n        t = pointer(t, this);\n        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {\n          var p = select(this).on(\"dblclick.zoom\");\n          if (p) p.apply(this, arguments);\n        }\n      }\n    }\n  }\n\n  zoom.wheelDelta = function(_) {\n    return arguments.length ? (wheelDelta = typeof _ === \"function\" ? _ : constant(+_), zoom) : wheelDelta;\n  };\n\n  zoom.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), zoom) : filter;\n  };\n\n  zoom.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), zoom) : touchable;\n  };\n\n  zoom.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;\n  };\n\n  zoom.scaleExtent = function(_) {\n    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];\n  };\n\n  zoom.translateExtent = function(_) {\n    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];\n  };\n\n  zoom.constrain = function(_) {\n    return arguments.length ? (constrain = _, zoom) : constrain;\n  };\n\n  zoom.duration = function(_) {\n    return arguments.length ? (duration = +_, zoom) : duration;\n  };\n\n  zoom.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, zoom) : interpolate;\n  };\n\n  zoom.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? zoom : value;\n  };\n\n  zoom.clickDistance = function(_) {\n    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);\n  };\n\n  zoom.tapDistance = function(_) {\n    return arguments.length ? (tapDistance = +_, zoom) : tapDistance;\n  };\n\n  return zoom;\n}\n","/* eslint-disable func-names */\n\nimport {\n  select,\n  zoom,\n  zoomIdentity,\n  forceLink,\n  forceCenter,\n  forceManyBody,\n  forceSimulation,\n  BaseType,\n  Selection,\n  Simulation,\n  SimulationNodeDatum,\n  ZoomBehavior,\n} from 'd3';\nimport { UserReposQuery } from '../generated/graphql';\nimport { RepoType, UserType } from '../types/object';\n\ntype NodeParam = UserType | RepoType;\ntype RectType = {\n  rect: SVGRect;\n};\n\ntype ForcedUserType = UserType & SimulationNodeDatum;\ntype ForcedRepoType = RepoType & SimulationNodeDatum;\ntype ForcedNode = ForcedUserType & ForcedRepoType & RectType;\ntype ForcedLink = {\n  source: ForcedNode | string | number;\n  target: ForcedNode | string | number;\n};\n\nconst constants = {\n  zoom: {\n    init: 0.3,\n    threshold: 0.5,\n    level: {\n      min: 0.05,\n      max: 2,\n    },\n  },\n  force: {\n    decay: 0.08,\n    alpha: 0.5,\n    strength: -2000,\n    distance: 300,\n  },\n} as const;\n\nexport default class GithubSocialGraph extends EventTarget {\n  public graph: {\n    nodes: ForcedNode[];\n    links: ForcedLink[];\n  };\n\n  public size: {\n    w: number;\n    h: number;\n  };\n\n  public svg: Selection<SVGSVGElement, unknown, HTMLElement, unknown>;\n\n  public group: {\n    lines: Selection<SVGGElement, unknown, HTMLElement, unknown>;\n    names: Selection<SVGGElement, unknown, HTMLElement, unknown>;\n    skeletons: Selection<SVGGElement, unknown, HTMLElement, unknown>;\n    avatars: Selection<SVGGElement, unknown, HTMLElement, unknown>;\n  };\n\n  public container: {\n    lines: Selection<BaseType | SVGLineElement, ForcedLink, BaseType, unknown> | null;\n    names: Selection<BaseType | SVGGElement, ForcedNode, BaseType, unknown> | null;\n    skeletons: Selection<BaseType | SVGGElement, ForcedNode, BaseType, unknown> | null;\n    avatars: Selection<BaseType | SVGGElement, ForcedNode, BaseType, unknown> | null;\n  };\n\n  private nodeIds: string[];\n\n  private simulation: Simulation<ForcedNode, ForcedLink>;\n\n  private zoom: ZoomBehavior<SVGSVGElement, unknown>;\n\n  private isShown: boolean;\n\n  constructor(parent: string) {\n    super();\n\n    this.nodeIds = [];\n    this.graph = { nodes: [], links: [] };\n    this.svg = select(parent).select('#network');\n\n    if (this.svg.empty()) {\n      this.svg = select(parent)\n        .append('svg')\n        .attr('width', '100%')\n        .attr('height', '100%')\n        .attr('id', 'network');\n    }\n\n    this.size = {\n      w: parseInt(this.svg.style('width'), 10),\n      h: parseInt(this.svg.style('height'), 10),\n    };\n\n    this.group = {\n      lines: this.svg\n        .append('g')\n        .attr('id', 'lines')\n        .attr('stroke', '#999')\n        .attr('stroke-opacity', 0.8),\n\n      names: this.svg\n        .append('g')\n        .attr('id', 'names'),\n\n      skeletons: this.svg\n        .append('g')\n        .attr('id', 'skeletons')\n        .attr('display', 'none'),\n\n      avatars: this.svg\n        .append('g')\n        .attr('id', 'avatars'),\n    };\n\n    this.container = {\n      lines: null,\n      names: null,\n      skeletons: null,\n      avatars: null,\n    };\n\n    this.isShown = true;\n\n    this.simulation = forceSimulation<ForcedNode, ForcedLink>()\n      .alphaDecay(constants.force.decay)\n      .on('tick', this.ticked.bind(this));\n\n    this.zoom = zoom<SVGSVGElement, unknown>()\n      .scaleExtent([constants.zoom.level.min, constants.zoom.level.max])\n      .on('zoom', this.zoomed.bind(this));\n\n    this.svg.call(this.zoom);\n  }\n\n  public push(data: UserReposQuery['user']) {\n    if (!data || this.nodeIds.includes(data.id)) return;\n    const { starredRepositories: repos, ...user } = data;\n\n    if (user) this.addNode(user);\n    repos?.nodes?.forEach((repo) => repo && this.connectNodes(user, repo, ({ id }) => id));\n\n    this.updateForce();\n    this.updateZoom();\n  }\n\n  private addNode(node: UserType | RepoType) {\n    if (!this.nodeIds.includes(node.id)) {\n      this.graph.nodes.push((node as ForcedNode));\n      this.nodeIds.push(node.id);\n    }\n  }\n\n  private connectNodes(\n    aNode: NodeParam,\n    bNode: NodeParam,\n    keyFn: (node: NodeParam) => string | number,\n  ) {\n    this.addNode(aNode);\n    this.addNode(bNode);\n    this.graph.links.push({\n      source: keyFn(aNode),\n      target: keyFn(bNode),\n    });\n  }\n\n  private updateForce() {\n    const charge = forceManyBody().strength(constants.force.strength);\n    const center = forceCenter(this.size.w / 2, this.size.h / 2);\n    const link = forceLink<ForcedNode, ForcedLink>(this.graph.links)\n      .id(({ id }) => id)\n      .distance(constants.force.distance);\n\n    this.simulation\n      .nodes(this.graph.nodes)\n      .force('charge', charge)\n      .force('link', link)\n      .force('center', center);\n\n    this.drawLines();\n    this.drawNames();\n    this.drawSkeletons();\n    this.drawAvatars();\n\n    this.simulation.alpha(constants.force.alpha).restart();\n  }\n\n  private drawLines() {\n    this.group.lines.selectAll('line').remove();\n    this.container.lines = this.group.lines\n      .selectAll('line')\n      .data(this.graph.links)\n      .join('line')\n      .attr('stroke-width', 1);\n  }\n\n  private drawNames() {\n    /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n    const instance = this;\n    this.group.names.selectAll('g').remove();\n    this.container.names = this.group.names\n      .selectAll('text')\n      .data(this.graph.nodes)\n      .join('g')\n      .each(function ({ login, isInOrganization }) {\n        select(this)\n          .append('rect')\n          .attr('transform', () => `translate(0, ${login ? 70 : 0})`)\n          .style('fill', () => {\n            if (login) return '#845EC2';\n            if (isInOrganization) return '#3C859E';\n            return '#008F7A';\n          });\n      })\n      .each(function ({ login, name, isInOrganization }) {\n        (select(this) as Selection<BaseType, ForcedNode, null, unknown>)\n          .append('text')\n          .attr('fill', 'white')\n          .attr('text-anchor', 'middle')\n          .attr('alignment-baseline', 'middle')\n          .text(() => (login || name))\n          .style('cursor', isInOrganization ? 'default' : 'pointer')\n          .attr('transform', () => `translate(0, ${login ? 70 : 0})`)\n          .call((selection) => selection.each((node) => {\n            /* eslint-disable-next-line no-param-reassign */\n            node.rect = (this as SVGGElement).getBBox();\n          }))\n          .on('click', instance.clicked.bind(instance));\n      })\n      .each(function ({ rect: { width, height } }) {\n        select(this)\n          .selectAll('rect')\n          .attr('width', () => width + 10)\n          .attr('height', () => height + 5)\n          .attr('rx', () => height / 2)\n          .attr('ry', () => height / 2);\n      });\n  }\n\n  private drawSkeletons() {\n    this.group.skeletons.selectAll('circle').remove();\n    this.container.skeletons = this.group.skeletons\n      .selectAll('text')\n      .data(this.graph.nodes.filter(({ login }) => !login))\n      .join('circle')\n      .attr('r', 30)\n      .style('fill', '#ccc');\n  }\n\n  private drawAvatars() {\n    this.group.avatars.selectAll('foreignObject').remove();\n    this.container.avatars = this.group.avatars\n      .selectAll('circle')\n      .data(this.graph.nodes.filter(({ login }) => login))\n      .join('foreignObject')\n      .attr('width', 100)\n      .attr('height', 100);\n\n    this.container.avatars\n      .append('xhtml:img')\n      .attr('width', 100)\n      .attr('height', 100)\n      .attr('src', ({ avatarUrl }) => avatarUrl)\n      .style('border-radius', '50%');\n  }\n\n  private updateZoom() {\n    const zoomTransform = zoomIdentity\n      .translate(this.size.w / 3, this.size.h / 3)\n      .scale(constants.zoom.init);\n\n    this.svg.call(this.zoom.transform, zoomTransform);\n  }\n\n  private ticked() {\n    const {\n      lines, names, skeletons, avatars,\n    } = this.container;\n\n    const text = names?.selectAll<SVGTextElement, ForcedNode>('text');\n    const rect = names?.selectAll<SVGTextElement, ForcedNode>('rect');\n\n    lines\n      ?.attr('x1', (link) => (link.source as ForcedNode).x || 0)\n      ?.attr('y1', (link) => (link.source as ForcedNode).y || 0)\n      ?.attr('x2', (link) => (link.target as ForcedNode).x || 0)\n      ?.attr('y2', (link) => (link.target as ForcedNode).y || 0);\n\n    text\n      ?.attr('x', (({ x }) => x || 0))?.attr('y', (({ y }) => y || 0));\n\n    rect\n      ?.attr('x', ({ x, rect: { width } }) => (x || 0) - width / 2 - 10 / 2)\n      ?.attr('y', ({ y, rect: { height } }) => (y || 0) - height / 2 - 5 / 2);\n\n    skeletons\n      ?.attr('cx', ({ x }) => x || 0)?.attr('cy', ({ y }) => y || 0);\n\n    avatars\n      ?.attr('x', ({ x }) => (x || 0) - 50)\n      ?.attr('y', ({ y }) => (y || 0) - 50);\n  }\n\n  private zoomed({ transform }: any) {\n    if (\n      (transform.k < constants.zoom.threshold && this.isShown)\n      || (transform.k > constants.zoom.threshold && !this.isShown)\n    ) {\n      this.group.names.attr('display', this.isShown ? 'none' : 'inherit');\n      this.group.skeletons.attr('display', this.isShown ? 'inherit' : 'none');\n      this.isShown = !this.isShown;\n    }\n    Object.values(this.group).forEach((group) => group.attr('transform', transform));\n  }\n\n  private clicked(_: any, node: ForcedNode) {\n    if (node.login) {\n      const { login: username } = node;\n      this.dispatchClickUserEvent(username, node);\n    } else {\n      const { isInOrganization, owner: { id, login: username } } = node;\n      if (isInOrganization) return;\n      if (this.nodeIds.includes(id)) {\n        const user = this.graph.nodes.find((u) => u.id === id);\n        if (user) this.dispatchClickUserEvent(username, user);\n      } else {\n        this.dispatchClickRepoEvent(username);\n      }\n    }\n  }\n\n  private dispatchClickUserEvent(username: string, node: ForcedNode) {\n    this.dispatchEvent(new CustomEvent('click-user', { detail: { username, node } }));\n  }\n\n  private dispatchClickRepoEvent(username: string) {\n    this.dispatchEvent(new CustomEvent('click-repo', { detail: { username } }));\n  }\n}\n","import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport {x, y} from \"./simulation.js\";\n\nexport default function() {\n  var nodes,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i, n = nodes.length, tree = quadtree(nodes, x, y).visitAfter(accumulate);\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(quad) {\n    var strength = 0, q, c, weight = 0, x, y, i;\n\n    // For internal nodes, accumulate forces from child quadrants.\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n      quad.x = x / weight;\n      quad.y = y / weight;\n    }\n\n    // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (y === 0) y = jiggle(random), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (y === 0) y = jiggle(random), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (quad.data !== node) {\n      w = strengths[quad.data.index] * alpha / l;\n      node.vx += x * w;\n      node.vy += y * w;\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n","export default function(x, y) {\n  var nodes, strength = 1;\n\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x, sy += node.y;\n    }\n\n    for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {\n      node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  return force;\n}\n","import { useReactiveVar } from '@apollo/client';\nimport { useEffect, useRef } from 'react';\nimport { usernameVar, userVar } from './apollo';\nimport Search from './components/Search';\nimport GithubSocialGraph from './utils/github-social-graph';\nimport { useUserReposLazyQuery } from './generated/graphql';\n\nexport default function App() {\n  const user = useReactiveVar(userVar);\n  const graph = useRef<GithubSocialGraph>();\n  const [getUserRepos] = useUserReposLazyQuery();\n\n  useEffect(() => {\n    graph.current = new GithubSocialGraph('#root');\n\n    graph.current.addEventListener('click-repo', ((event: CustomEvent) => {\n      const { detail: { username } } = event;\n      getUserRepos({ variables: { username } }).then((res) => userVar(res?.data?.user));\n    }) as EventListener);\n\n    graph.current.addEventListener('click-user', ((event: CustomEvent) => {\n      const { detail: { username, node } } = event;\n      userVar(node);\n      usernameVar(username);\n    }) as EventListener);\n  }, [getUserRepos]);\n\n  useEffect(() => {\n    if (user) {\n      graph.current?.push(JSON.parse(JSON.stringify(user)));\n      usernameVar(user.login);\n    }\n  }, [user]);\n\n  return (\n    <div className=\"relative text-lg\">\n      <Search />\n    </div>\n  );\n}\n","import { ApolloProvider } from '@apollo/client';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport client from './apollo';\nimport './tailwind.css';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"],"names":["module","exports","getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","toObject","val","undefined","TypeError","assign","test1","String","getOwnPropertyNames","test2","i","fromCharCode","map","n","join","test3","split","forEach","letter","keys","err","shouldUseNative","target","source","from","symbols","to","s","arguments","length","key","call","aa","require","m","r","y","a","b","c","encodeURIComponent","Error","ba","Set","ca","da","ea","add","fa","window","document","createElement","ha","ia","ja","ka","B","d","e","f","g","this","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","propertyName","type","sanitizeURL","removeEmptyString","D","toLowerCase","oa","pa","toUpperCase","qa","slice","ma","isNaN","na","test","la","removeAttribute","setAttribute","setAttributeNS","replace","xlinkHref","ra","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","sa","ta","ua","wa","xa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","Symbol","for","E","Ma","Ka","iterator","La","Na","stack","trim","match","Oa","Pa","prepareStackTrace","defineProperty","set","Reflect","construct","k","h","displayName","name","Qa","tag","render","_render","Ra","$$typeof","_context","_payload","_init","Sa","Ta","nodeName","Va","_valueTracker","getOwnPropertyDescriptor","constructor","get","configurable","enumerable","getValue","setValue","stopTracking","Ua","Wa","checked","value","Xa","activeElement","body","Ya","defaultChecked","defaultValue","_wrapperState","initialChecked","Za","initialValue","controlled","$a","ab","bb","cb","ownerDocument","eb","children","Children","db","fb","options","selected","defaultSelected","disabled","gb","dangerouslySetInnerHTML","hb","Array","isArray","ib","jb","textContent","kb","lb","mb","nb","ob","namespaceURI","innerHTML","valueOf","toString","firstChild","removeChild","appendChild","MSApp","execUnsafeLocalFunction","pb","lastChild","nodeType","nodeValue","qb","animationIterationCount","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","rb","sb","tb","style","indexOf","setProperty","charAt","substring","ub","menuitem","area","base","br","col","embed","hr","img","input","keygen","link","meta","param","track","wbr","vb","wb","is","xb","srcElement","correspondingUseElement","parentNode","yb","zb","Ab","Bb","Cb","stateNode","Db","Eb","push","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","Ob","Pb","Qb","addEventListener","removeEventListener","Rb","l","apply","onError","Sb","Tb","Ub","Vb","Wb","Xb","Zb","alternate","return","flags","$b","memoizedState","dehydrated","ac","cc","child","sibling","current","bc","dc","ec","fc","gc","hc","ic","jc","kc","lc","mc","nc","Map","oc","pc","qc","rc","blockedOn","domEventName","eventSystemFlags","nativeEvent","targetContainers","sc","delete","pointerId","tc","vc","wc","lanePriority","unstable_runWithPriority","priority","hydrate","containerInfo","xc","yc","shift","zc","Ac","Bc","unstable_scheduleCallback","unstable_NormalPriority","Cc","Dc","Ec","animationend","animationiteration","animationstart","transitionend","Fc","Gc","Hc","animation","transition","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Pc","Qc","unstable_now","F","Rc","Uc","pendingLanes","expiredLanes","suspendedLanes","pingedLanes","Vc","entangledLanes","entanglements","Wc","Xc","Yc","Zc","$c","eventTimes","Math","clz32","bd","cd","log","LN2","dd","unstable_UserBlockingPriority","ed","fd","gd","hd","id","bind","uc","jd","kd","ld","md","nd","od","keyCode","charCode","pd","qd","rd","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","stopPropagation","cancelBubble","persist","isPersistent","wd","xd","yd","sd","eventPhase","bubbles","cancelable","timeStamp","Date","now","isTrusted","td","ud","view","detail","vd","Ad","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","zd","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Bd","Dd","dataTransfer","Fd","Hd","animationName","elapsedTime","pseudoElement","Id","clipboardData","Jd","Ld","data","Md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Nd","Od","Alt","Control","Meta","Shift","Pd","Qd","code","location","repeat","locale","which","Rd","Td","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","Vd","touches","targetTouches","changedTouches","Xd","Yd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","Zd","$d","ae","be","documentMode","ce","de","ee","fe","ge","he","ie","le","color","date","datetime","email","month","number","password","range","search","tel","text","time","url","week","me","ne","oe","event","listeners","pe","qe","re","se","te","ue","ve","we","xe","ye","ze","oninput","Ae","detachEvent","Be","Ce","attachEvent","De","Ee","Fe","He","Ie","Je","Ke","Le","node","offset","nextSibling","Me","contains","compareDocumentPosition","Ne","HTMLIFrameElement","contentWindow","href","Oe","contentEditable","Pe","Qe","Re","Se","Te","Ue","start","selectionStart","end","selectionEnd","anchorNode","defaultView","getSelection","anchorOffset","focusNode","focusOffset","Ve","We","Xe","Ye","concat","Ze","Yb","instance","listener","G","$e","has","af","bf","random","cf","df","capture","passive","Nb","x","w","z","u","q","t","v","ef","ff","parentWindow","gf","hf","J","K","Q","L","je","char","ke","unshift","jf","kf","lf","mf","autoFocus","nf","__html","of","setTimeout","pf","clearTimeout","qf","rf","sf","previousSibling","tf","vf","wf","xf","yf","zf","Af","Bf","H","I","Cf","M","N","Df","Ef","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Ff","childContextTypes","Gf","Hf","If","getChildContext","Jf","__reactInternalMemoizedMergedChildContext","Kf","Lf","Mf","Nf","Of","Pf","unstable_cancelCallback","Qf","unstable_shouldYield","Rf","unstable_requestPaint","Sf","Tf","unstable_getCurrentPriorityLevel","Uf","unstable_ImmediatePriority","Vf","Wf","Xf","unstable_LowPriority","Yf","unstable_IdlePriority","Zf","$f","ag","bg","cg","dg","O","eg","fg","gg","hg","ig","jg","kg","ReactCurrentBatchConfig","lg","defaultProps","mg","ng","og","pg","qg","rg","_currentValue","sg","childLanes","tg","dependencies","firstContext","lanes","ug","vg","context","observedBits","next","responders","wg","xg","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","yg","zg","eventTime","lane","payload","callback","Ag","Bg","Cg","A","p","C","Dg","Eg","Fg","Component","refs","Gg","Kg","isMounted","_reactInternals","enqueueSetState","Hg","Ig","Jg","enqueueReplaceState","enqueueForceUpdate","Lg","shouldComponentUpdate","isPureReactComponent","Mg","contextType","state","updater","Ng","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","Og","props","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","Pg","Qg","ref","_owner","_stringRef","Rg","Sg","lastEffect","nextEffect","firstEffect","index","Tg","Ug","mode","elementType","Vg","implementation","Wg","Xg","done","Yg","Zg","$g","ah","bh","ch","dh","eh","documentElement","tagName","fh","gh","hh","P","ih","memoizedProps","revealOrder","jh","kh","lh","mh","nh","oh","pendingProps","ph","qh","rh","sh","th","uh","_workInProgressVersionPrimary","vh","ReactCurrentDispatcher","wh","xh","R","S","T","yh","zh","Ah","Bh","Ch","Dh","Eh","Fh","Gh","Hh","baseQueue","queue","Ih","Jh","Kh","lastRenderedReducer","action","eagerReducer","eagerState","lastRenderedState","dispatch","Lh","Mh","_getVersion","_source","mutableReadLanes","Nh","U","useState","getSnapshot","subscribe","useEffect","setSnapshot","Oh","Ph","Qh","Rh","create","destroy","deps","Sh","Th","Uh","Vh","Wh","Xh","Yh","Zh","$h","ai","bi","ci","di","readContext","useCallback","useContext","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useDebugValue","useDeferredValue","useTransition","useMutableSource","useOpaqueIdentifier","unstable_isNewReconciler","uf","ei","ReactCurrentOwner","fi","gi","hi","ii","ji","compare","ki","li","mi","baseLanes","ni","oi","pi","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","qi","getDerivedStateFromError","ri","pendingContext","Bi","Di","Ei","si","retryLane","ti","fallback","unstable_avoidThisFallback","ui","unstable_expectedLoadTime","vi","wi","xi","yi","zi","isBackwards","rendering","renderingStartTime","last","tail","tailMode","Ai","Fi","Gi","wasMultiple","multiple","onClick","onclick","size","createElementNS","createTextNode","V","Hi","Ii","W","Ji","Ki","Li","Mi","message","Ni","console","error","Oi","WeakMap","Pi","element","Qi","Ri","Si","componentDidCatch","Ti","componentStack","Ui","WeakSet","Vi","Wi","Xi","__reactInternalSnapshotBeforeUpdate","Yi","Zi","$i","focus","aj","display","bj","onCommitFiberUnmount","componentWillUnmount","cj","dj","ej","fj","gj","hj","insertBefore","_reactRootContainer","ij","jj","kj","lj","then","mj","nj","ceil","oj","pj","X","Y","qj","rj","sj","tj","uj","vj","Infinity","wj","ck","Z","xj","yj","zj","Aj","Bj","Cj","Dj","Ej","Fj","Gj","Hj","Ij","Jj","Sc","Kj","Lj","Mj","callbackNode","expirationTimes","callbackPriority","Tc","Nj","Oj","Pj","Qj","Rj","Sj","Tj","finishedWork","finishedLanes","Uj","timeoutHandle","Wj","Xj","pingCache","Yj","Zj","va","ak","bk","dk","rangeCount","focusedElem","selectionRange","ek","min","extend","createRange","setStart","removeAllRanges","addRange","setEnd","left","scrollLeft","top","scrollTop","onCommitFiberRoot","fk","gk","ik","isReactComponent","pendingChildren","jk","mutableSourceEagerHydrationData","kk","lk","mk","nk","ok","qk","hydrationOptions","mutableSources","_internalRoot","rk","tk","hasAttribute","sk","uk","hk","_calculateChangedBits","unstable_observedBits","unmount","querySelectorAll","JSON","stringify","form","Vj","vk","Events","wk","findFiberByHostInstance","bundleType","version","rendererPackageName","xk","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","__REACT_DEVTOOLS_GLOBAL_HOOK__","yk","isDisabled","supportsFiber","inject","createPortal","findDOMNode","flushSync","unmountComponentAtNode","unstable_batchedUpdates","unstable_createPortal","unstable_renderSubtreeIntoContainer","checkDCE","Fragment","__self","__source","jsx","jsxs","StrictMode","Profiler","Suspense","setState","forceUpdate","escape","_status","_result","default","IsSomeRendererActing","count","toArray","only","PureComponent","cloneElement","createContext","_currentValue2","_threadCount","Provider","Consumer","createFactory","createRef","forwardRef","isValidElement","lazy","memo","runtime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","Context","_invoke","GenStateSuspendedStart","method","arg","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","GenStateSuspendedYield","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","object","reverse","pop","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis","Function","performance","MessageChannel","unstable_forceFrameRate","cancelAnimationFrame","requestAnimationFrame","floor","port2","port1","onmessage","postMessage","sortIndex","startTime","expirationTime","priorityLevel","unstable_Profiling","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","delay","unstable_wrapCallback","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","definition","o","prop","extendStatics","__extends","__","__assign","__rest","__awaiter","thisArg","_arguments","fulfilled","step","rejected","__generator","_","label","trys","ops","verb","op","__spreadArray","pack","ar","genericMessage","proto","_a","_super","_this","InvariantError","invariant","condition","verbosityLevels","verbosityLevel","wrapConsoleMethod","maybe","thunk","global","GLOBAL_KEY","Boolean","__DEV__","safeGlobal","needToRemove","remove","process","_classCallCheck","Constructor","_defineProperties","descriptor","_createClass","protoProps","staticProps","devAssert","_arrayLikeToArray","arr","len","arr2","_unsupportedIterableToArray","minLen","_slicedToArray","_i","_s","_e","_arr","_n","_d","_toConsumableArray","env","NODE_ENV","inspect","formatValue","seenValues","previouslySeenValues","includes","toJSON","isJSONable","jsonValue","array","remaining","items","formatArray","entries","getObjectTag","properties","formatObject","formatObjectValue","instanceOf","Source","locationOffset","line","column","DEV","canUseWeakMap","navigator","product","canUseWeakSet","canUseSymbol","contextKey","getApolloContext","React","ApolloProvider","client","ApolloContext","useReactiveVar","rv","probablySameValue","onNextChange","_createForOfIteratorHelperLoose","allowArrayLike","it","hasSymbols","hasSymbol","getSymbol","observable","SymbolIterator","SymbolObservable","SymbolSpecies","getMethod","getSpecies","Observable","isObservable","hostReportError","enqueue","cleanupSubscription","subscription","cleanup","_cleanup","unsubscribe","closeSubscription","_observer","_queue","_state","notifySubscription","observer","onNotify","flushSubscription","Subscription","subscriber","subscriptionObserver","SubscriptionObserver","_subscription","_proto2","_subscriber","_proto3","_this2","filter","_this3","reduce","_this4","hasSeed","hasValue","seed","acc","first","_this5","_len","sources","_key","startNext","flatMap","_this6","subscriptions","outer","inner","splice","completeIfDone","closed","_step","_iterator","item","_len2","_key2","isNonNullObject","getFragmentQueryDocument","fragmentName","actualFragmentName","fragments","definitions","kind","operation","selectionSet","selections","createFragmentMap","symTable","fragment","getFragmentFromSelection","selection","fragmentMap","makeReference","__ref","isReference","valueToObjectRepresentation","argObj","variables","isIntValue","isFloatValue","Number","isBooleanValue","isStringValue","isObjectValue","nestedArgObj_1","fields","isVariable","variableValue","isListValue","listValue","nestedArgArrayObj","isEnumValue","isNullValue","symbol","KNOWN_DIRECTIVES","getStoreKeyName","fieldName","args","directives","filterKeys","sort","filteredArgs_1","completeFieldName","stringifiedArgs","setStringify","previous","stringifyReplacer","copy","argumentsObjectFromField","field","argObj_1","resultKeyNameFromField","alias","getTypenameFromResult","__typename","isField","typename","isInlineFragment","checkDocument","doc","operations","getOperationDefinition","getOperationName","getFragmentDefinitions","getQueryDefinition","queryDef","getMainDefinition","queryDoc","fragmentDefinition","getDefaultValues","defaultValues","defs","variableDefinitions","def","variable","passthrough","forward","toLink","handler","ApolloLink","isTerminating","request","links","empty","right","leftLink","rightLink","starting","createOperation","transformedOperation","extensions","operationName","query","transformOperation","OPERATION_FIELDS","validateOperation","second","firstLink","LinkError","nextLink","execute","compact","objects","normalCompletion","didErr","_e2","OperationTypeNode","Kind","Location","startToken","endToken","Token","QueryDocumentKeys","Name","Document","OperationDefinition","VariableDefinition","Variable","SelectionSet","Field","Argument","FragmentSpread","InlineFragment","FragmentDefinition","IntValue","FloatValue","StringValue","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Directive","NamedType","ListType","NonNullType","SchemaDefinition","OperationTypeDefinition","ScalarTypeDefinition","ObjectTypeDefinition","FieldDefinition","InputValueDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","EnumValueDefinition","InputObjectTypeDefinition","DirectiveDefinition","SchemaExtension","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","kindValues","isNode","maybeNode","maybeKind","BREAK","freeze","visit","root","visitor","visitorKeys","enterLeaveMap","getEnterLeaveForKind","inArray","edits","parent","path","ancestors","isLeaving","isEdited","editOffset","editKey","editValue","arrayKey","defineProperties","getOwnPropertyDescriptors","_node$kind","_enterLeaveMap$get","_enterLeaveMap$get2","visitFn","leave","enter","kindVisitor","serializeFetchParameter","serialized","parseError","throwServerError","response","statusCode","status","isWhiteSpace","isDigit","isLetter","isNameStart","isNameContinue","dedentBlockStringLines","lines","_firstNonEmptyLine2","commonIndent","MAX_SAFE_INTEGER","firstNonEmptyLine","lastNonEmptyLine","_firstNonEmptyLine","indent","leadingWhitespace","str","charCodeAt","escapedRegExp","escapedReplacer","escapeSequences","print","ast","printDocASTReducer","varDefs","prefix","block","argsLine","typeCondition","escapedValue","isSingleLine","forceLeadingNewLine","every","hasTrailingTripleQuotes","endsWith","hasTrailingQuote","hasTrailingSlash","forceTrailingNewline","printAsMultipleLines","minimize","skipLeadingNewLine","printBlockString","description","operationTypes","interfaces","hasMultilineItems","types","repeatable","locations","maybeArray","_maybeArray$filter$jo","separator","maybeString","_maybeArray$some","some","fallbackHttpConfig","http","includeQuery","includeExtensions","headers","accept","defaultPrinter","printer","selectHttpOptionsAndBodyInternal","configs","config","headersToLowerCase","credentials","normalized_1","fromError","errorValue","backupFetch","fetch","createHttpLink","linkOptions","uri","preferredFetch","_b","useGETForQueries","_c","includeUnusedVariables","requestOptions","fetcher","checkFetcher","linkConfig","fetchOptions","chosenURI","fallbackURI","getContext","selectURI","clientAwarenessHeaders","clientAwareness","name_1","controller","contextHeaders","contextConfig","unusedNames_1","signal","AbortController","createSignalIfSupported","_controller","queryParams","addQueryParam","serializedVariables","serializedExtensions","preFragment","fragmentStart","substr","queryParamsPrefix","newURI","rewriteURIForGET","setContext","bodyText","parse","catch","errors","abort","fnToStr","previousComparisons","equal","check","clear","aTag","previouslyCompared","aKeys","definedKeys","bKeys","keyCount","aIterator","isMap","aKey","aValue","Uint8Array","byteLength","aCode","full","suffix","fromIndex","nativeCodeSuffix","isDefinedKey","bSet","defaultMakeData","weakness","makeData","Trie","lookupArray","getChildTrie","isObjRef","weak","strong","shouldInclude","directive","isInclusionDirective","directiveArguments","directiveName","ifArgument","ifValue","getInclusionDirectives","evaledValue","hasDirectives","names","getDirectiveNames","hasClientExports","mergeDeep","mergeDeepArray","merger","DeepMerger","merge","defaultReconciler","property","reconciler","isObject","pastCopies","sourceKey","targetValue","shallowCopyForMerge","isFrozen","defaultDataIdFromObject","_id","keyObject","defaultConfig","dataIdFromObject","addTypename","resultCaching","canonizeResults","shouldCanonizeResults","TypeOrFieldNameRegExp","fieldNameFromStoreName","storeFieldName","selectionSetMatchesResult","storeValueIsStoreObject","stringifyCanon","stringifyCache","known","pool","passes","keysByJSON","admit","ObjectCanon","isObjectOrArray","shallowCopy","original","proto_1","array_1","sortedKeys","json","firstValueIndex_1","sorted","obj_1","canonicalStringify","resetCanonicalStringify","canonical","asyncMap","mapFn","catchFn","activeCallbackCount","completed","promiseQueue","makeCallback","examiner","both","sub","graphQLResultHasError","filterInPlace","elem","TYPENAME_FIELD","isEmpty","nullIfDocIsEmpty","fragmentDef","getFragmentDefinition","getDirectiveMatcher","dir","removeDirectivesFromDocument","variablesInUse","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","getAllFragmentSpreadsFromSelectionSet","frag","argMatcher","argument","aConfig","getArgumentMatcher","varDef","argConfig","argMatchCount_1","removeArgumentsFromDocument","fs","removeFragmentSpreadFromDocument","addTypenameToDocument","skip","lastIndexOf","added","connectionRemoveConfig","willRemove","allFragments","buildQueryFromSelectionSet","prefixCounts","makeUniqueId","iterateObserversSafely","observers","observersWithMethod","obs","fixObservableSubclass","subclass","species","isPromiseLike","addObserver","removeObserver","latest","handlers","reason","promise","Concast","nextOrError","deliverLastMessage","addCount","quietly","called","once","isNonEmptyArray","NetworkStatus","graphQLErrors","clientErrors","networkError","errorMessage","extraInfo","generateErrorMessage","ApolloError","isNetworkRequestInFlight","networkStatus","cloneDeep","cloneDeepHelper","seen","copy_1","copy_2","warnedAboutUpdateQuery","queryManager","queryInfo","subObserver","defaultSubscriptionObserverErrorCallback","reobserve","tearDownQuery","isTornDown","queryId","generateQueryId","opDef","queryName","initialFetchPolicy","fetchPolicy","ObservableQuery","removeQuery","saveAsLastResult","lastResult","getLastResult","ready","loading","transform","hasForcedResolvers","diff","getDiff","returnPartialData","partial","partialRefetch","logMissingFieldErrors","missing","updateLastResult","newResult","variablesMustMatch","getLast","resetErrors","reobserveOptions","pollInterval","vars","resetLastWrite","refetch","fetchMoreOptions","combinedOptions","qid","notifyOnNetworkStatusChange","fetchMore","observe","fetchQuery","fetchMoreResult","updateQuery","cache","writeQuery","finally","stopQuery","startGraphQLSubscription","subscriptionData","newOptions","setVariables","optimistic","broadcastQueries","updatePolling","newNetworkStatus","setObservableQuery","fetchQueryObservable","ssrMode","pollingInfo","interval","maybeFetch","poll","timeout","assumeImmutableResults","useDisposableConcast","oldVariables","concast","reportResult","reportError","getCurrentResult","lastError","getLastError","isDifferentFromLastResult","errorResult","stopPolling","currentContext","MISSING_VALUE","idCounter","globalKey","host","Slot","context_1","slots","saved","defaultDispose","max","dispose","newest","oldest","Cache","getNode","older","newer","parentEntrySlot","collection","maybeUnsubscribe","entryOrDep","emptySetPool","assert","optionalMessage","valueGet","parents","childValues","dirtyChildren","dirty","recomputing","Entry","mightBeDirty","rememberParent","forgetChildren","withValue","recomputeNewValue","setDirty","maybeSubscribe","reportClean","setClean","reallyRecompute","reportDirty","eachParent","forgetChild","dep","reportDirtyChild","reportCleanChild","parentCount","parentWasClean","childValue","valueIs","removeDirtyChild","_value","forgetDeps","EntryMethods","forget","depsByKey","depend","dep_1","dependOn","entryMethodName","m_1","makeDefaultMakeCacheKeyFunction","keyTrie","caches","originalFunction","pow","keyArgs","makeCacheKey","recompute","clean","dirtyKey","peekKey","peek","forgetKey","getKey","cacheSlot","cacheInfoMap","getCacheInfo","forgetCache","makeVar","newValue","broadcast","oldListeners","attach","attachCache","broadcastWatches","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","LocalState","resolverGroup","remoteResult","onlyRunForcedResolvers","resolveDocument","localResult","isTypenameOnly","removeClientSetsFromDocument","getCacheKey","identify","buildRootValueFromCache","prepareContext","exportedVariables","forceResolvers","rootValue","mainDefinition","definitionOperation","defaultOperationType","execContext","resolveSelectionSet","resultsToMerge","resolveField","fieldResult","fragmentResult","all","aliasedFieldName","aliasUsed","defaultResult","resultPromise","shouldForceResolvers","resolverType","resolverMap","resolveSubSelectedArray","destructiveMethodCounts","wrapDestructiveCacheMethod","methodName","cancelNotifyTimeout","lastRequestId","stopped","observableQuery","QueryInfo","lastDiff","getDiffOptions","updateWatch","oq","updateLastDiff","oldDiff","notifyTimeout","notify","oqListener","fromOptimisticTransaction","shouldNotify","cancel","watchOptions","watcher","setDiff","lastWatch","watch","lastWrite","dmCount","cacheWriteBehavior","shouldWriteResult","errorPolicy","performTransaction","shouldWrite","overwrite","diffOptions","ignoreErrors","writeWithErrors","queryDeduplication","onBroadcast","localState","queries","fetchCancelFns","transformCache","queryIdCounter","requestIdCounter","mutationIdCounter","inFlightLinkObservables","mutationStore","QueryManager","_info","stopQueryNoBroadcast","cancelPendingFetches","mutation","optimisticResponse","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","onQueryUpdated","keepRootFields","mutationId","generateMutationId","markMutationOptimistic","update","mutationStoreValue","storeResult","removeOptimistic","markMutationResult","cacheWrites","skipCache","dataId","updateQueries_1","currentQueryResult","nextQueryResult","mutationResult","queryVariables","results_1","asQuery","modify","DELETE","include","recordOptimisticTransaction","getQueryStore","store","transformed","forLink","transformForLink","clientQuery","serverQuery","cacheEntry_1","defaultVars","generateRequestId","stopQueryInStore","stopQueryInStoreNoBroadcast","discardWatches","getObservableQueries","queryNamesAndDocs","legacyQueryOptions","desc","getQuery","init","reFetchObservableQueries","includeStandby","observableQueryPromises","makeObservable","write","addExportedVariables","observablePromise_1","getLocalState","getObservableFromLink","deduplication","inFlightLinkObservables_1","forceFetch","byVariables_1","varJson_1","runResolvers","getResultsFromLink","hasErrors","requestId","markResult","aqr","getVariables","normalized","fromVariables","nextFetchPolicy","applyNextFetchPolicy","updateCache","includedQueriesById","results","batch","fetchQueryByPolicy","refetchWritePolicy","readCache","resultsFromCache","fromData","resultsFromLink","oldNetworkStatus","hasSuggestedDevtools","mergeOptions","defaults","defaultOptions","resetStoreCallbacks","clearStoreCallbacks","ssrForceFetchDelay","connectToDevTools","__APOLLO_CLIENT__","typeDefs","clientAwarenessName","clientAwarenessVersion","HttpLink","disableNetworkFetches","watchQuery","mutate","resetStore","__APOLLO_DEVTOOLS_GLOBAL_HOOK__","nav","userAgent","devToolsHookCb","mutations","dataWithOptimisticResults","extract","ApolloClient","readQuery","readFragment","writeFragment","clearStore","obsQuery","serializedState","restore","setResolvers","getResolvers","newLink","getFragmentDoc","ApolloCache","updateResult","optimisticId","transaction","read","rootId","deepFreeze","workSet","shallowFreeze","maybeDeepFreeze","delModifier","INVALIDATE","policies","group","rootIds","getFieldValue","objectOrReference","canRead","objOrRef","toReference","objOrIdOrRef","mergeIntoStore","EntityStore","lookup","storeObject","rootTypenamesById","Layer","dependOnExistence","existing","incoming","merged","storeObjectReconciler","caching","fieldsToDirty_1","__exists","hasKeyArgs","changedFields_1","needToMerge_1","allDeleted_1","sharedDetails_1","readField","fieldNameOrOptions","fieldValue","storage","getStorage","getStoreFieldName","limit","evicted","evict","extraRootIds","getRootIdSet","__META","newData","rest_1","retain","ids","snapshot","findChildRefIds","idsToRemove","root_1","found_1","workSet_1","keyMaker","resetCaching","CacheGroup","makeDepKey","maybeDependOnExistenceOfEntity","entityId","supportsResultCaching","Stump","Root","layerId","replay","stump","addLayer","storageTrie","removeLayer","ownStoreObject","parentStoreObject","fromParent","existingObject","incomingObject","existingValue","incomingValue","execSelectionSetKeyArgs","knownResults","canon","executeSelectionSet","peekArgs","other","enclosingRef","execSelectionSetImpl","resultCacheMaxSize","varString","executeSubSelectedArray","execSubSelectedArrayImpl","StoreReader","rootRef","execResult","MissingFieldError","firstMissing","isKnown","handleMissing","rootIdsByTypename","pass","fragmentMatches","finalResult","frozen","childResult","getTypenameFromStoreObject","assertSelectionSetForIdValue","tree","specifierInfoCache","lookupSpecifierInfo","spec","cacheKey","keyFieldsFnFromSpecifier","specifier","keyFieldsFn","collectSpecifierPaths","schemaKeyPath","extracted","extractKeyPath","extractKey","keyArgsFnFromSpecifier","keyArgsFn","collected","keyPath","firstKey","firstChar","variableName","varKeyPath","directiveName_1","find","directiveArgs","extractor","getSpecifierPaths","toMerge","paths","paths_1","currentPath_1","normalize","reducer","argsFromFieldSpecifier","nullKeyFieldsFn","simpleKeyArgsFn","_args","mergeTrueFn","mergeObjects","mergeFalseFn","typePolicies","toBeAdded","supertypeMap","fuzzySubtypes","usingPossibleTypes","setRootTypename","possibleTypes","addPossibleTypes","addTypePolicies","Policies","partialContext","ROOT_QUERY","normalizeReadFieldOptions","policy","getTypePolicy","keyFn","specifierOrId","queryType","mutationType","subscriptionType","keyFields","setMerge","getFieldPolicy","old","supertype","getSupertypeSet","subtype","RegExp","policy_1","supertypes","rest","inbox","updateTypePolicy","createIfMissing","fieldPolicies","supertypeSet","typenameSupertypeSet","workQueue_1","maybeEnqueue_1","needToCheckFuzzySubtypes","checkingFuzzySubtypes","regExp","fuzzyString","fieldSpec","specifierOrString","directivesObj","storeKeyNameFromField","readOptions","makeFieldFunctionOptions","parentTypename","childTypename","makeMergeObjectsFunction","readFieldArgs","argc","undefId","stringifyForDisplay","eType","iType","getContextFlavor","clientOnly","deferred","flavored","flavors","reader","StoreWriter","operationDefinition","written","incomingById","processSelectionSet","mergeTree","fieldNodeSet","entityRef","applied","applyMerges","fieldsWithSelectionSets_1","hasSelectionSet_1","childTree","hasMergeFunction_1","existingRef","incomingObj","getChild","parentType","typeDotName","warnings","childTypenames","warnAboutDataLoss","result_1","flattenFields","resultFieldKey","getChildMergeTree","processFieldValue","getMergeFunction","maybeRecycleChildMergeTree","getReadFunction","dataRef","sets","isFresh","previous_1","mergeMergeTrees","mergeTreeIsEmpty","fieldMap","limitingTrie","flatten","inheritedContext","visitedNode","visited","if","getStorageArgs","e_1","i_1","getValue_1","eVal","iVal","aVal","runMergeFunction","emptyMergeTreePool","needToMergeMaps","remainingRightKeys_1","leftTree","normalizeConfig","InMemoryCache","rootStore","optimisticData","resetResultCache","resetResultIdentities","previousReader","storeReader","storeWriter","maybeBroadcastWatch","broadcastWatch","diffQueryAgainstStore","txCount","writeToStore","watches","recallCache","immediate","resetCanon","release","idToRemove","newOptimisticData","onWatchUpdated","perform","layer","alreadyDirty","typenameDocumentCache","Authorization","usernameVar","userVar","asyncGeneratorStep","gen","_next","_throw","_defineProperty","ownKeys","enumerableOnly","sym","_objectSpread2","_assertThisInitialized","ReferenceError","_setPrototypeOf","_inherits","subClass","superClass","_getPrototypeOf","_isNativeReflectConstruct","sham","Proxy","_typeof","_possibleConstructorReturn","_createSuper","Derived","hasNativeReflectConstruct","Super","NewTarget","_construct","Parent","Class","_wrapNativeSuper","_cache","Wrapper","isObjectLike","LineRegExp","getLocation","position","lastLineStart","matchAll","printLocation","printSourceLocation","sourceLocation","firstLineColumnOffset","padStart","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","locationLine","subLineIndex","subLineColumnNum","subLines","printPrefixedLines","subLine","existingLines","padLen","toNormalizedArgs","firstArg","nodes","positions","originalError","DirectiveLocation","TokenKind","GraphQLError","_this$nodes","_nodeLocations$","_ref","rawArgs","undefinedIfEmpty","nodeLocations","pos","originalExtensions","captureStackTrace","output","formattedError","syntaxError","Lexer","startOfFileToken","lastToken","token","lineStart","lookahead","nextToken","readNextToken","isUnicodeScalarValue","isSupplementaryCodePoint","isLeadingSurrogate","isTrailingSurrogate","printCodePointAt","lexer","codePointAt","fromCodePoint","createToken","bodyLength","readComment","readBlockString","readString","readNumber","readName","firstCode","isFloat","readDigits","chunkStart","readEscapedUnicodeVariableWidth","readEscapedUnicodeFixedWidth","readEscapedCharacter","point","readHexDigit","read16BitHexCode","trailingCode","currentLine","blockLines","Parser","sourceObj","isSource","_lexer","_options","expectToken","many","parseDefinition","parseOperationDefinition","hasDescription","peekDescription","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseFragmentDefinition","parseTypeSystemExtension","unexpected","QUERY","parseSelectionSet","parseOperationType","parseName","parseVariableDefinitions","parseDirectives","operationToken","MUTATION","SUBSCRIPTION","optionalMany","parseVariableDefinition","parseVariable","parseTypeReference","expectOptionalToken","parseConstValueLiteral","parseConstDirectives","parseSelection","parseFragment","parseField","nameOrAlias","parseArguments","isConst","parseConstArgument","parseArgument","parseValueLiteral","hasTypeCondition","expectOptionalKeyword","parseFragmentName","parseNamedType","_this$_options","expectKeyword","allowLegacyFragmentVariables","parseList","parseObject","advance","parseStringLiteral","varName","any","parseObjectField","parseDirective","innerType","parseDescription","parseOperationTypeDefinition","parseImplementsInterfaces","parseFieldsDefinition","delimitedMany","parseFieldDefinition","parseArgumentDefs","parseInputValueDef","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseEnumValueName","getTokenDesc","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","parseDirectiveLocations","parseDirectiveLocation","_this$_options2","noLocation","getTokenKindDesc","atToken","openKind","parseFn","closeKind","delimiterKind","isPunctuatorTokenKind","docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","string","processFragments","seenKeys","sourceKeySet","warn","parseDocument","parsed","stripLoc","gql","literals","gql_1","extras","DocumentType","Query","Mutation","verifyDocumentType","cached","requiredOperationName","useQuery","override","useApolloClient","defaultWatchQueryOptions","watchQueryOptions","createWatchQueryOptions","renderPromises","getSSRObservable","registerSSRObservable","ssr","addQueryPromise","getOptions","fetchData","setObsQuery","onCompleted","setResult","previousData","nextResult","setOptions","obsQuery_1","previousResult","onNext","resetLastResults","obsQueryFields","startPolling","subscribeToMore","otherOptions","EAGER_METHODS","ActorType","AuditLogOrderField","CheckAnnotationLevel","CheckConclusionState","CheckRunType","CheckStatusState","CollaboratorAffiliation","CommentAuthorAssociation","CommentCannotUpdateReason","CommitContributionOrderField","ContributionLevel","DefaultRepositoryPermissionField","DependencyGraphEcosystem","DeploymentOrderField","DeploymentProtectionRuleType","DeploymentReviewState","DeploymentState","DeploymentStatusState","DiffSide","DiscussionOrderField","DismissReason","EnterpriseAdministratorInvitationOrderField","EnterpriseAdministratorRole","EnterpriseDefaultRepositoryPermissionSettingValue","EnterpriseEnabledDisabledSettingValue","EnterpriseEnabledSettingValue","EnterpriseMemberOrderField","EnterpriseMembersCanCreateRepositoriesSettingValue","EnterpriseMembersCanMakePurchasesSettingValue","EnterpriseServerInstallationOrderField","EnterpriseServerUserAccountEmailOrderField","EnterpriseServerUserAccountOrderField","EnterpriseServerUserAccountsUploadOrderField","EnterpriseServerUserAccountsUploadSyncState","EnterpriseUserAccountMembershipRole","EnterpriseUserDeployment","FileViewedState","FundingPlatform","GistOrderField","GistPrivacy","GitSignatureState","IdentityProviderConfigurationState","IpAllowListEnabledSettingValue","IpAllowListEntryOrderField","IpAllowListForInstalledAppsEnabledSettingValue","IssueCommentOrderField","IssueOrderField","IssueState","IssueTimelineItemsItemType","LabelOrderField","LanguageOrderField","LockReason","MergeableState","MigrationSourceType","MigrationState","MilestoneOrderField","MilestoneState","NotificationRestrictionSettingValue","OidcProviderType","OauthApplicationCreateAuditEntryState","OperationType","OrderDirection","OrgAddMemberAuditEntryPermission","OrgCreateAuditEntryBillingPlan","OrgEnterpriseOwnerOrderField","OrgRemoveBillingManagerAuditEntryReason","OrgRemoveMemberAuditEntryMembershipType","OrgRemoveMemberAuditEntryReason","OrgRemoveOutsideCollaboratorAuditEntryMembershipType","OrgRemoveOutsideCollaboratorAuditEntryReason","OrgUpdateDefaultRepositoryPermissionAuditEntryPermission","OrgUpdateMemberAuditEntryPermission","OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility","OrganizationInvitationRole","OrganizationInvitationType","OrganizationMemberRole","OrganizationMembersCanCreateRepositoriesSettingValue","OrganizationOrderField","PackageFileOrderField","PackageOrderField","PackageType","PackageVersionOrderField","PinnableItemType","PinnedDiscussionGradient","PinnedDiscussionPattern","ProjectCardArchivedState","ProjectCardState","ProjectColumnPurpose","ProjectItemType","ProjectNextFieldType","ProjectNextOrderField","ProjectOrderField","ProjectState","ProjectTemplate","PullRequestMergeMethod","PullRequestOrderField","PullRequestReviewCommentState","PullRequestReviewDecision","PullRequestReviewEvent","PullRequestReviewState","PullRequestState","PullRequestTimelineItemsItemType","PullRequestUpdateState","ReactionContent","ReactionOrderField","RefOrderField","ReleaseOrderField","RepoAccessAuditEntryVisibility","RepoAddMemberAuditEntryVisibility","RepoArchivedAuditEntryVisibility","RepoChangeMergeSettingAuditEntryMergeType","RepoCreateAuditEntryVisibility","RepoDestroyAuditEntryVisibility","RepoRemoveMemberAuditEntryVisibility","ReportedContentClassifiers","RepositoryAffiliation","RepositoryContributionType","RepositoryInteractionLimit","RepositoryInteractionLimitExpiry","RepositoryInteractionLimitOrigin","RepositoryInvitationOrderField","RepositoryLockReason","RepositoryMigrationOrderDirection","RepositoryMigrationOrderField","RepositoryOrderField","RepositoryPermission","RepositoryPrivacy","RepositoryVisibility","RepositoryVulnerabilityAlertState","RequestableCheckStatusState","RoleInOrganization","SamlDigestAlgorithm","SamlSignatureAlgorithm","SavedReplyOrderField","SearchType","SecurityAdvisoryEcosystem","SecurityAdvisoryIdentifierType","SecurityAdvisoryOrderField","SecurityAdvisorySeverity","SecurityVulnerabilityOrderField","SponsorOrderField","SponsorableOrderField","SponsorsActivityAction","SponsorsActivityOrderField","SponsorsActivityPeriod","SponsorsGoalKind","SponsorsTierOrderField","SponsorshipNewsletterOrderField","SponsorshipOrderField","SponsorshipPrivacy","StarOrderField","StatusState","SubscriptionState","TeamDiscussionCommentOrderField","TeamDiscussionOrderField","TeamMemberOrderField","TeamMemberRole","TeamMembershipType","TeamOrderField","TeamPrivacy","TeamRepositoryOrderField","TeamRole","TopicSuggestionDeclineReason","UserBlockDuration","UserStatusOrderField","VerifiableDomainOrderField","strings","raw","UserReposDocument","useUserReposLazyQuery","baseOptions","execution","setExecution","eagerMethods","executeOptions","result1","result2","Apollo","user","username","getUserRepos","handleSubmit","res","alert","className","onSubmit","placeholder","onChange","src","avatarUrl","alt","login","bio","_objectWithoutProperties","excluded","sourceKeys","sourceSymbolKeys","none","selector","querySelector","matches","childMatcher","childFirst","firstElementChild","EnterNode","datum","_parent","__data__","bindIndex","exit","groupLength","dataLength","bindKey","keyValue","nodeByKeyValue","keyValues","arraylike","ascending","NaN","xhtml","svg","xlink","xml","xmlns","namespaces","space","local","attrRemove","attrRemoveNS","fullname","removeAttributeNS","attrConstant","attrConstantNS","attrFunction","attrFunctionNS","styleRemove","removeProperty","styleConstant","styleFunction","styleValue","getPropertyValue","getComputedStyle","propertyRemove","propertyConstant","propertyFunction","classArray","classList","ClassList","_node","_names","getAttribute","classedAdd","list","classedRemove","classedTrue","classedFalse","classedFunction","textRemove","textConstant","textFunction","htmlRemove","htmlConstant","htmlFunction","raise","lower","creatorInherit","creatorFixed","namespace","constantNull","selection_cloneShallow","clone","cloneNode","selection_cloneDeep","parseTypenames","typenames","onRemove","on","__on","j","onAdd","contextListener","dispatchEvent","params","CustomEvent","createEvent","initEvent","dispatchConstant","dispatchFunction","groups","_groups","Selection","_parents","select","subgroups","subnode","subgroup","selectAll","arrayAll","selectorAll","selectChild","childFind","selectChildren","childrenFilter","matcher","constant","enterGroup","updateGroup","exitGroup","i0","i1","_enter","_exit","sparse","onenter","onupdate","onexit","append","groups0","groups1","m0","m1","merges","group0","group1","compareNode","sortgroups","sortgroup","each","attr","getAttributeNS","classed","html","creator","insert","before","deep","selection_iterator","noop","Dispatch","that","taskHead","taskTail","frame","clockLast","clockNow","clockSkew","clock","setFrame","clearNow","Timer","_call","_time","timer","restart","wake","timerFlush","t0","t2","t1","sleep","nap","poke","clearInterval","setInterval","elapsed","emptyOn","emptyTween","timing","schedules","__transition","tween","schedule","tick","duration","ease","active","svgNode","degrees","PI","identity","translateX","translateY","rotate","skewX","scaleX","scaleY","sqrt","atan2","atan","interpolateTransform","pxComma","pxParen","degParen","translate","scale","interpolateTransformCss","DOMMatrix","WebKitCSSMatrix","isIdentity","decompose","interpolateTransformSvg","baseVal","consolidate","matrix","tweenRemove","tween0","tween1","tweenFunction","tweenValue","factory","Color","darker","brighter","reI","reN","reP","reHex","reRgbInteger","reRgbPercent","reRgbaInteger","reRgbaPercent","reHslPercent","reHslaPercent","named","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","color_formatHex","rgb","formatHex","color_formatRgb","formatRgb","format","exec","parseInt","rgbn","Rgb","rgba","hsla","rgbConvert","rgb_formatHex","hex","rgb_formatRgb","round","Hsl","hslConvert","hsl2rgb","m2","basis","v0","v1","v2","v3","t3","channels","displayable","formatHsl","linear","gamma","nogamma","exponential","rgbGamma","colorRgb","rgbSpline","spline","colors","reA","reB","am","bm","bs","lastIndex","one","zero","interpolateNumber","interpolateRgb","interpolateString","interpolate","value1","string00","interpolate0","string1","string0","string10","attrInterpolate","attrInterpolateNS","attrTweenNS","attrTween","delayFunction","delayConstant","durationFunction","durationConstant","easeConstant","onFunction","on0","on1","sit","styleInterpolate","styleTween","textInterpolate","textTween","Transition","_name","newId","selection_prototype","inherit","id0","id1","styleNull","listener0","styleMaybeRemove","removeFunction","easeVarying","interrupt","defaultTiming","abs","number1","number2","nodeById","nodeId","xm","ym","xp","yp","bottom","_root","leaf","x0","_x0","y0","_y0","x1","_x1","y1","_y1","_x","_y","defaultX","defaultY","quadtree","Quadtree","addAll","leaf_copy","treeProto","cover","xz","yz","extent","radius","x2","y2","x3","y3","quads","Quad","dx","dy","d2","retainer","removeAll","visitAfter","initialAngle","simulation","alpha","alphaMin","alphaDecay","alphaTarget","velocityDecay","forces","stepper","lcg","iterations","force","fx","vx","fy","vy","initializeNodes","angle","cos","sin","initializeForce","initialize","randomSource","closest","nonpassivecapture","stopImmediatePropagation","noevent","__noselect","MozUserSelect","yesdrag","noclick","cosh","exp","zoomRho","rho","rho2","rho4","p0","p1","ux0","uy0","w0","ux1","uy1","w1","d1","b0","b1","r0","r1","coshr0","tanh","sinh","SQRT2","_1","_2","sourceEvent","ownerSVGElement","createSVGPoint","matrixTransform","getScreenCTM","inverse","getBoundingClientRect","rect","clientLeft","clientTop","ZoomEvent","Transform","applyX","applyY","invert","invertX","invertY","rescaleX","domain","rescaleY","nopropagation","defaultFilter","defaultExtent","SVGElement","viewBox","clientWidth","clientHeight","defaultTransform","__zoom","defaultWheelDelta","defaultTouchable","maxTouchPoints","defaultConstrain","translateExtent","dx0","dx1","dy0","dy1","constants","threshold","level","decay","strength","distance","GithubSocialGraph","graph","container","nodeIds","isShown","skeletons","avatars","forceSimulation","ticked","touchstarting","touchfirst","touchending","constrain","touchable","scaleExtent","interpolateZoom","touchDelay","clickDistance2","tapDistance","wheeled","mousedowned","dblclicked","touchstarted","touchmoved","touchended","centroid","gesture","__zooming","Gesture","taps","pointer","wheel","mouse","wheelidled","mousemoved","mouseupped","dragDisable","moved","dragEnable","k1","started","identifier","touch0","touch1","l0","l1","dp","dl","hypot","scaleBy","scaleTo","translateBy","translateTo","emit","clickDistance","zoomed","repos","starredRepositories","addNode","repo","connectNodes","updateForce","updateZoom","aNode","bNode","charge","strengths","distanceMin2","distanceMax2","theta2","accumulate","quad","weight","jiggle","_nodes","_random","distanceMin","distanceMax","theta","forceManyBody","center","sx","sy","forceCenter","distances","bias","initializeStrength","initializeDistance","forceLink","drawLines","drawNames","drawSkeletons","drawAvatars","isInOrganization","getBBox","clicked","zoomTransform","zoomIdentity","dispatchClickUserEvent","owner","dispatchClickRepoEvent","EventTarget","App","ReactDOM","getElementById"],"sourceRoot":""}